// Code generated by capnpc-go. DO NOT EDIT.

package arc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

// Constants defined in arc.capnp.
const (
	LinkCellSpec = "([Locale.Name]CellLabels,[Glyph.Name]CellGlyphs,[Surface.Name]Position)()"
)

type AttrDefTest capnp.Struct

// AttrDefTest_TypeID is the unique identifier for the type AttrDefTest.
const AttrDefTest_TypeID = 0xd8105e522f0e9c87

func NewAttrDefTest(s *capnp.Segment) (AttrDefTest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AttrDefTest(st), err
}

func NewRootAttrDefTest(s *capnp.Segment) (AttrDefTest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AttrDefTest(st), err
}

func ReadRootAttrDefTest(msg *capnp.Message) (AttrDefTest, error) {
	root, err := msg.Root()
	return AttrDefTest(root.Struct()), err
}

func (s AttrDefTest) String() string {
	str, _ := text.Marshal(0xd8105e522f0e9c87, capnp.Struct(s))
	return str
}

func (s AttrDefTest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AttrDefTest) DecodeFromPtr(p capnp.Ptr) AttrDefTest {
	return AttrDefTest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AttrDefTest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AttrDefTest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AttrDefTest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AttrDefTest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AttrDefTest) TypeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AttrDefTest) HasTypeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AttrDefTest) TypeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AttrDefTest) SetTypeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AttrDefTest) TypeID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AttrDefTest) SetTypeID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// AttrDefTest_List is a list of AttrDefTest.
type AttrDefTest_List = capnp.StructList[AttrDefTest]

// NewAttrDefTest creates a new list of AttrDefTest.
func NewAttrDefTest_List(s *capnp.Segment, sz int32) (AttrDefTest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[AttrDefTest](l), err
}

// AttrDefTest_Future is a wrapper for a AttrDefTest promised by a client call.
type AttrDefTest_Future struct{ *capnp.Future }

func (f AttrDefTest_Future) Struct() (AttrDefTest, error) {
	p, err := f.Future.Ptr()
	return AttrDefTest(p.Struct()), err
}

type CellTxOp2 uint16

// CellTxOp2_TypeID is the unique identifier for the type CellTxOp2.
const CellTxOp2_TypeID = 0xe837dc667fe57e1f

// Values of CellTxOp2.
const (
	CellTxOp2_noOp        CellTxOp2 = 0
	CellTxOp2_insertChild CellTxOp2 = 1
	CellTxOp2_upsertChild CellTxOp2 = 2
	CellTxOp2_deleteChild CellTxOp2 = 3
	CellTxOp2_deleteCell  CellTxOp2 = 4
	CellTxOp2_checkpoint  CellTxOp2 = 5
)

// String returns the enum's constant name.
func (c CellTxOp2) String() string {
	switch c {
	case CellTxOp2_noOp:
		return "noOp"
	case CellTxOp2_insertChild:
		return "insertChild"
	case CellTxOp2_upsertChild:
		return "upsertChild"
	case CellTxOp2_deleteChild:
		return "deleteChild"
	case CellTxOp2_deleteCell:
		return "deleteCell"
	case CellTxOp2_checkpoint:
		return "checkpoint"

	default:
		return ""
	}
}

// CellTxOp2FromString returns the enum value with a name,
// or the zero value if there's no such value.
func CellTxOp2FromString(c string) CellTxOp2 {
	switch c {
	case "noOp":
		return CellTxOp2_noOp
	case "insertChild":
		return CellTxOp2_insertChild
	case "upsertChild":
		return CellTxOp2_upsertChild
	case "deleteChild":
		return CellTxOp2_deleteChild
	case "deleteCell":
		return CellTxOp2_deleteCell
	case "checkpoint":
		return CellTxOp2_checkpoint

	default:
		return 0
	}
}

type CellTxOp2_List = capnp.EnumList[CellTxOp2]

func NewCellTxOp2_List(s *capnp.Segment, sz int32) (CellTxOp2_List, error) {
	return capnp.NewEnumList[CellTxOp2](s, sz)
}

type MultiTxCp capnp.Struct

// MultiTxCp_TypeID is the unique identifier for the type MultiTxCp.
const MultiTxCp_TypeID = 0x8afb8b2f70664e55

func NewMultiTxCp(s *capnp.Segment) (MultiTxCp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MultiTxCp(st), err
}

func NewRootMultiTxCp(s *capnp.Segment) (MultiTxCp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MultiTxCp(st), err
}

func ReadRootMultiTxCp(msg *capnp.Message) (MultiTxCp, error) {
	root, err := msg.Root()
	return MultiTxCp(root.Struct()), err
}

func (s MultiTxCp) String() string {
	str, _ := text.Marshal(0x8afb8b2f70664e55, capnp.Struct(s))
	return str
}

func (s MultiTxCp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiTxCp) DecodeFromPtr(p capnp.Ptr) MultiTxCp {
	return MultiTxCp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiTxCp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiTxCp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiTxCp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiTxCp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiTxCp) ReqID() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s MultiTxCp) SetReqID(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s MultiTxCp) CellTxs() (MultiTxCp_CellTxCp_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MultiTxCp_CellTxCp_List(p.List()), err
}

func (s MultiTxCp) HasCellTxs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiTxCp) SetCellTxs(v MultiTxCp_CellTxCp_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCellTxs sets the cellTxs field to a newly
// allocated MultiTxCp_CellTxCp_List, preferring placement in s's segment.
func (s MultiTxCp) NewCellTxs(n int32) (MultiTxCp_CellTxCp_List, error) {
	l, err := NewMultiTxCp_CellTxCp_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return MultiTxCp_CellTxCp_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// MultiTxCp_List is a list of MultiTxCp.
type MultiTxCp_List = capnp.StructList[MultiTxCp]

// NewMultiTxCp creates a new list of MultiTxCp.
func NewMultiTxCp_List(s *capnp.Segment, sz int32) (MultiTxCp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MultiTxCp](l), err
}

// MultiTxCp_Future is a wrapper for a MultiTxCp promised by a client call.
type MultiTxCp_Future struct{ *capnp.Future }

func (f MultiTxCp_Future) Struct() (MultiTxCp, error) {
	p, err := f.Future.Ptr()
	return MultiTxCp(p.Struct()), err
}

type MultiTxCp_CellTxCp capnp.Struct

// MultiTxCp_CellTxCp_TypeID is the unique identifier for the type MultiTxCp_CellTxCp.
const MultiTxCp_CellTxCp_TypeID = 0xf6f1fa73036d902f

func NewMultiTxCp_CellTxCp(s *capnp.Segment) (MultiTxCp_CellTxCp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MultiTxCp_CellTxCp(st), err
}

func NewRootMultiTxCp_CellTxCp(s *capnp.Segment) (MultiTxCp_CellTxCp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MultiTxCp_CellTxCp(st), err
}

func ReadRootMultiTxCp_CellTxCp(msg *capnp.Message) (MultiTxCp_CellTxCp, error) {
	root, err := msg.Root()
	return MultiTxCp_CellTxCp(root.Struct()), err
}

func (s MultiTxCp_CellTxCp) String() string {
	str, _ := text.Marshal(0xf6f1fa73036d902f, capnp.Struct(s))
	return str
}

func (s MultiTxCp_CellTxCp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiTxCp_CellTxCp) DecodeFromPtr(p capnp.Ptr) MultiTxCp_CellTxCp {
	return MultiTxCp_CellTxCp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiTxCp_CellTxCp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiTxCp_CellTxCp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiTxCp_CellTxCp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiTxCp_CellTxCp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiTxCp_CellTxCp) Op() CellTxOp2 {
	return CellTxOp2(capnp.Struct(s).Uint16(0))
}

func (s MultiTxCp_CellTxCp) SetOp(v CellTxOp2) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MultiTxCp_CellTxCp) CellSpec() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s MultiTxCp_CellTxCp) SetCellSpec(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s MultiTxCp_CellTxCp) CellID() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s MultiTxCp_CellTxCp) SetCellID(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s MultiTxCp_CellTxCp) Elems() (MultiTxCp_CellTxCp_AttrElemCp, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MultiTxCp_CellTxCp_AttrElemCp(p.Struct()), err
}

func (s MultiTxCp_CellTxCp) HasElems() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiTxCp_CellTxCp) SetElems(v MultiTxCp_CellTxCp_AttrElemCp) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewElems sets the elems field to a newly
// allocated MultiTxCp_CellTxCp_AttrElemCp struct, preferring placement in s's segment.
func (s MultiTxCp_CellTxCp) NewElems() (MultiTxCp_CellTxCp_AttrElemCp, error) {
	ss, err := NewMultiTxCp_CellTxCp_AttrElemCp(capnp.Struct(s).Segment())
	if err != nil {
		return MultiTxCp_CellTxCp_AttrElemCp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MultiTxCp_CellTxCp_List is a list of MultiTxCp_CellTxCp.
type MultiTxCp_CellTxCp_List = capnp.StructList[MultiTxCp_CellTxCp]

// NewMultiTxCp_CellTxCp creates a new list of MultiTxCp_CellTxCp.
func NewMultiTxCp_CellTxCp_List(s *capnp.Segment, sz int32) (MultiTxCp_CellTxCp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[MultiTxCp_CellTxCp](l), err
}

// MultiTxCp_CellTxCp_Future is a wrapper for a MultiTxCp_CellTxCp promised by a client call.
type MultiTxCp_CellTxCp_Future struct{ *capnp.Future }

func (f MultiTxCp_CellTxCp_Future) Struct() (MultiTxCp_CellTxCp, error) {
	p, err := f.Future.Ptr()
	return MultiTxCp_CellTxCp(p.Struct()), err
}
func (p MultiTxCp_CellTxCp_Future) Elems() MultiTxCp_CellTxCp_AttrElemCp_Future {
	return MultiTxCp_CellTxCp_AttrElemCp_Future{Future: p.Future.Field(0, nil)}
}

type MultiTxCp_CellTxCp_AttrElemCp capnp.Struct

// MultiTxCp_CellTxCp_AttrElemCp_TypeID is the unique identifier for the type MultiTxCp_CellTxCp_AttrElemCp.
const MultiTxCp_CellTxCp_AttrElemCp_TypeID = 0xd2411b0b08bea741

func NewMultiTxCp_CellTxCp_AttrElemCp(s *capnp.Segment) (MultiTxCp_CellTxCp_AttrElemCp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MultiTxCp_CellTxCp_AttrElemCp(st), err
}

func NewRootMultiTxCp_CellTxCp_AttrElemCp(s *capnp.Segment) (MultiTxCp_CellTxCp_AttrElemCp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MultiTxCp_CellTxCp_AttrElemCp(st), err
}

func ReadRootMultiTxCp_CellTxCp_AttrElemCp(msg *capnp.Message) (MultiTxCp_CellTxCp_AttrElemCp, error) {
	root, err := msg.Root()
	return MultiTxCp_CellTxCp_AttrElemCp(root.Struct()), err
}

func (s MultiTxCp_CellTxCp_AttrElemCp) String() string {
	str, _ := text.Marshal(0xd2411b0b08bea741, capnp.Struct(s))
	return str
}

func (s MultiTxCp_CellTxCp_AttrElemCp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiTxCp_CellTxCp_AttrElemCp) DecodeFromPtr(p capnp.Ptr) MultiTxCp_CellTxCp_AttrElemCp {
	return MultiTxCp_CellTxCp_AttrElemCp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiTxCp_CellTxCp_AttrElemCp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiTxCp_CellTxCp_AttrElemCp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiTxCp_CellTxCp_AttrElemCp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiTxCp_CellTxCp_AttrElemCp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiTxCp_CellTxCp_AttrElemCp) AttrID() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s MultiTxCp_CellTxCp_AttrElemCp) SetAttrID(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s MultiTxCp_CellTxCp_AttrElemCp) SeriesIndex() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s MultiTxCp_CellTxCp_AttrElemCp) SetSeriesIndex(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s MultiTxCp_CellTxCp_AttrElemCp) ValBuf() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s MultiTxCp_CellTxCp_AttrElemCp) HasValBuf() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiTxCp_CellTxCp_AttrElemCp) SetValBuf(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// MultiTxCp_CellTxCp_AttrElemCp_List is a list of MultiTxCp_CellTxCp_AttrElemCp.
type MultiTxCp_CellTxCp_AttrElemCp_List = capnp.StructList[MultiTxCp_CellTxCp_AttrElemCp]

// NewMultiTxCp_CellTxCp_AttrElemCp creates a new list of MultiTxCp_CellTxCp_AttrElemCp.
func NewMultiTxCp_CellTxCp_AttrElemCp_List(s *capnp.Segment, sz int32) (MultiTxCp_CellTxCp_AttrElemCp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[MultiTxCp_CellTxCp_AttrElemCp](l), err
}

// MultiTxCp_CellTxCp_AttrElemCp_Future is a wrapper for a MultiTxCp_CellTxCp_AttrElemCp promised by a client call.
type MultiTxCp_CellTxCp_AttrElemCp_Future struct{ *capnp.Future }

func (f MultiTxCp_CellTxCp_AttrElemCp_Future) Struct() (MultiTxCp_CellTxCp_AttrElemCp, error) {
	p, err := f.Future.Ptr()
	return MultiTxCp_CellTxCp_AttrElemCp(p.Struct()), err
}

const schema_9aff325096b39f47 = "x\xdat\x93\xcf\x8b[U\x14\xc7\xbf\xdf{_\x9c\x80" +
	"3M\x1eo@Qd\x10Dgd~ej\xd1\x16" +
	"$\x9d&\xa5f\x18\xdb\xb9\x9d\x11dF\x857/7" +
	"\xe4\xd1\x9b\xe45\xefE\xd3\x85v)\xd4\x8d\"U\x10" +
	"E\\u\xe9\xc2\xbd\xe0\xbf\xe0\xca\x85\xee\x14\xa5\x0b\xc1" +
	"\x85\x82U\xb8r\x93&/\x96\xe9&7\xf7\xdc\xf3\xce" +
	"\xf9\x9c\xef9g\xf3c\x9e\xf7*\x0b\xcfy\x10j\xb3" +
	"\xf0\x88}\xedr+\xd9\xf8\xe0\x9f[P\x01i/}" +
	"\xf9\xcd'{[\xf63\x148\x07\x04\x7f\xf3nP\x10" +
	"\x8f\x01\x81/\xde\x01\xed\xf6\x9do\x8b\x8f>\xb9\xfd=" +
	"\xd4\xb3\x14v\xe3\xc3\x8eL\xef\xfd\xf1\xd7\xd8\xf9\xf4\xbb" +
	"\xe2\x16\x83\xdb\xc2}\xf7\x91\xf8\x1a\xb4\xef\x7f~j\xe3" +
	"\xea[\xe5\x1fN\x0c\xbd&\xef\x05g\xa5\xfbwF\xba" +
	"\xd0K\xef\xfdr\xb3\xf5\xe3\x8b\xbf\xc1\x0fD\xee\x0b\x06" +
	"\xb7\xe5\xdd\xe0\xab\x91\xe3\x17\xf2S\xd0\xfe\xb4\xf3s\xa9" +
	"|\xe7\xbb\xdf\xe1\x07\xde\xac\xe3\xe9?\xa5`@o\x0e" +
	"\xd8\xffWJ\xee\x17=A \xa7TOQ\xe4\xe5\x8e" +
	"\x99\x9f\xf6\xb6\x18T<W\xe1\xcb\xde\xaf\xa8\xd90\x89" +
	"\xd3\x8d\xb0\x1f\x09\xf7\xb3\x1e\x85I79\xf7\xea\xc0d" +
	"q\xe9`XK\x94G\xe6\x01}\xee\xd8\x9a6\xc6\xbd" +
	"\x00PE\xe9\x01\x1e\x01\x7fe\x0bP\xcfH\xaaMA" +
	"r\x91\xce\xb6v\x01P\xcb\x92\xaa.\xb8\xd4\xd7\xd7\x1b" +
	"u\x16 X\x00oF\xa3 )O\x81{\x92,\xe7" +
	")@g\x9cR\x15\x1e\xa4r\xa9\xd7'\x0c\xeb\xdbY" +
	"\xd6\xbfht\xc7\xe1\xec\x91j~\x0at\xf1\x1c\xa0\xce" +
	"K\xaa]A\x7fB\xd48\x06\xd4+\x92\xea@\x90b" +
	"\x91\x02\xf0\x95s\xdc\x95T\xaf\x0bV\xc3,\xeb7\xea" +
	",B\xb0\x08\xdaT\xf7c\x9d6\xba\x98k\xea\xe1\x04" +
	"\xbe\xfavh.\x0cZ\\\x80\xe0\xc2\x0c\xea\xac\x80\x8e" +
	"\xab^\xd5\xad\x03\x9df\x8ekF\xa8\x9d\xfb\xa2\xbc\x90" +
	"\x0bUq\x08\xab\x92\xea%A\x9b\xddH\xf4\xe5\xb0\xa3" +
	"\x01p\x1e\x82\xf3`\xd5\xd9\x1auz\x10\xf4\x1e\x92q" +
	"$Iix%\xd9r\xf9\x1e\x1f\x95\xb6\xfd\xbc\x93\xd3" +
	"?{\x0cP\xf8g\xdc!\xfd\x8a;<\x7f\xed\x10`" +
	"\xc1_9\x04J\xdd\xde\x95\xc4\xc6\xddT\xf7\xb3Z\x1b" +
	"s\xb1i\xdaA2{kj\xa33\xfd\xc0MC\x1a" +
	"c\xa3\xb6\x8e\xae%\xbd\x18\xb2\x9bM\xc1\xe4\x0c\x98\x89" +
	"\xbb\xd7\x1c\xdc~\xa2#\xd7\xa3\xfbE\xa1\xc2\xab\xc2." +
	"\x1f\xed\xf6\xa2\xd0\xe8\xe2\xba+\xf9M\xe7\xb7\x1b\x1ek" +
	"\x93\xae\x1e]27\x92vn\x1e]\xd3\xd5\xa3\xfdA" +
	"\xbf\x15Fz\xfc\xb0\xd7K\xe3,\xeeuW\x96\xb9r" +
	"b\xf2\xff\x8d\xcc\x92\x99N\xf4t\xad}\x1e\xda\xc9\x10" +
	"A\xd6\x12U\x9ev*|\x02PoH\xaa\xf6\xcc\x04" +
	"i\xd7\xbe\xa6\xa4J\x04}\xc1\xf1\x08u\\\xff\xda\x92" +
	"*\x13\xa4\\\xa4\x04\xfc\xebn!\x8c\xa4\x1a\x0a\xca^" +
	"\xc2R\xbe\xef K\xa0\x8d&\xa2\x00\x93\x81\xab:[" +
	"\xbe&K\xda\xe8N\xcar\x8e\x0b\xb2\x0c\xfe\x17\x00\x00" +
	"\xff\xff)\x13<t"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9aff325096b39f47,
		Nodes: []uint64{
			0x8afb8b2f70664e55,
			0xd2411b0b08bea741,
			0xd8105e522f0e9c87,
			0xe837dc667fe57e1f,
			0xeec1a7100fe44add,
			0xf6f1fa73036d902f,
		},
		Compressed: true,
	})
}
