// Code generated by capnpc-go. DO NOT EDIT.

package arc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

// Constants defined in arc.capnp.
const (
	LinkCellSpec = "(CellInfo)()"
)

type AttrDefTest capnp.Struct

// AttrDefTest_TypeID is the unique identifier for the type AttrDefTest.
const AttrDefTest_TypeID = 0xd8105e522f0e9c87

func NewAttrDefTest(s *capnp.Segment) (AttrDefTest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AttrDefTest(st), err
}

func NewRootAttrDefTest(s *capnp.Segment) (AttrDefTest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AttrDefTest(st), err
}

func ReadRootAttrDefTest(msg *capnp.Message) (AttrDefTest, error) {
	root, err := msg.Root()
	return AttrDefTest(root.Struct()), err
}

func (s AttrDefTest) String() string {
	str, _ := text.Marshal(0xd8105e522f0e9c87, capnp.Struct(s))
	return str
}

func (s AttrDefTest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AttrDefTest) DecodeFromPtr(p capnp.Ptr) AttrDefTest {
	return AttrDefTest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AttrDefTest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AttrDefTest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AttrDefTest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AttrDefTest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AttrDefTest) TypeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AttrDefTest) HasTypeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AttrDefTest) TypeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AttrDefTest) SetTypeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AttrDefTest) TypeID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AttrDefTest) SetTypeID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// AttrDefTest_List is a list of AttrDefTest.
type AttrDefTest_List = capnp.StructList[AttrDefTest]

// NewAttrDefTest creates a new list of AttrDefTest.
func NewAttrDefTest_List(s *capnp.Segment, sz int32) (AttrDefTest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[AttrDefTest](l), err
}

// AttrDefTest_Future is a wrapper for a AttrDefTest promised by a client call.
type AttrDefTest_Future struct{ *capnp.Future }

func (f AttrDefTest_Future) Struct() (AttrDefTest, error) {
	p, err := f.Future.Ptr()
	return AttrDefTest(p.Struct()), err
}

type CellTxOp2 uint16

// CellTxOp2_TypeID is the unique identifier for the type CellTxOp2.
const CellTxOp2_TypeID = 0xe837dc667fe57e1f

// Values of CellTxOp2.
const (
	CellTxOp2_noOp        CellTxOp2 = 0
	CellTxOp2_insertChild CellTxOp2 = 1
	CellTxOp2_upsertChild CellTxOp2 = 2
	CellTxOp2_deleteChild CellTxOp2 = 3
	CellTxOp2_deleteCell  CellTxOp2 = 4
	CellTxOp2_checkpoint  CellTxOp2 = 5
)

// String returns the enum's constant name.
func (c CellTxOp2) String() string {
	switch c {
	case CellTxOp2_noOp:
		return "noOp"
	case CellTxOp2_insertChild:
		return "insertChild"
	case CellTxOp2_upsertChild:
		return "upsertChild"
	case CellTxOp2_deleteChild:
		return "deleteChild"
	case CellTxOp2_deleteCell:
		return "deleteCell"
	case CellTxOp2_checkpoint:
		return "checkpoint"

	default:
		return ""
	}
}

// CellTxOp2FromString returns the enum value with a name,
// or the zero value if there's no such value.
func CellTxOp2FromString(c string) CellTxOp2 {
	switch c {
	case "noOp":
		return CellTxOp2_noOp
	case "insertChild":
		return CellTxOp2_insertChild
	case "upsertChild":
		return CellTxOp2_upsertChild
	case "deleteChild":
		return CellTxOp2_deleteChild
	case "deleteCell":
		return CellTxOp2_deleteCell
	case "checkpoint":
		return CellTxOp2_checkpoint

	default:
		return 0
	}
}

type CellTxOp2_List = capnp.EnumList[CellTxOp2]

func NewCellTxOp2_List(s *capnp.Segment, sz int32) (CellTxOp2_List, error) {
	return capnp.NewEnumList[CellTxOp2](s, sz)
}

type MultiTxCp capnp.Struct

// MultiTxCp_TypeID is the unique identifier for the type MultiTxCp.
const MultiTxCp_TypeID = 0x8afb8b2f70664e55

func NewMultiTxCp(s *capnp.Segment) (MultiTxCp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MultiTxCp(st), err
}

func NewRootMultiTxCp(s *capnp.Segment) (MultiTxCp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MultiTxCp(st), err
}

func ReadRootMultiTxCp(msg *capnp.Message) (MultiTxCp, error) {
	root, err := msg.Root()
	return MultiTxCp(root.Struct()), err
}

func (s MultiTxCp) String() string {
	str, _ := text.Marshal(0x8afb8b2f70664e55, capnp.Struct(s))
	return str
}

func (s MultiTxCp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiTxCp) DecodeFromPtr(p capnp.Ptr) MultiTxCp {
	return MultiTxCp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiTxCp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiTxCp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiTxCp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiTxCp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiTxCp) ReqID() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s MultiTxCp) SetReqID(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s MultiTxCp) CellTxs() (MultiTxCp_CellTxCp_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MultiTxCp_CellTxCp_List(p.List()), err
}

func (s MultiTxCp) HasCellTxs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiTxCp) SetCellTxs(v MultiTxCp_CellTxCp_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCellTxs sets the cellTxs field to a newly
// allocated MultiTxCp_CellTxCp_List, preferring placement in s's segment.
func (s MultiTxCp) NewCellTxs(n int32) (MultiTxCp_CellTxCp_List, error) {
	l, err := NewMultiTxCp_CellTxCp_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return MultiTxCp_CellTxCp_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// MultiTxCp_List is a list of MultiTxCp.
type MultiTxCp_List = capnp.StructList[MultiTxCp]

// NewMultiTxCp creates a new list of MultiTxCp.
func NewMultiTxCp_List(s *capnp.Segment, sz int32) (MultiTxCp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MultiTxCp](l), err
}

// MultiTxCp_Future is a wrapper for a MultiTxCp promised by a client call.
type MultiTxCp_Future struct{ *capnp.Future }

func (f MultiTxCp_Future) Struct() (MultiTxCp, error) {
	p, err := f.Future.Ptr()
	return MultiTxCp(p.Struct()), err
}

type MultiTxCp_CellTxCp capnp.Struct

// MultiTxCp_CellTxCp_TypeID is the unique identifier for the type MultiTxCp_CellTxCp.
const MultiTxCp_CellTxCp_TypeID = 0xf6f1fa73036d902f

func NewMultiTxCp_CellTxCp(s *capnp.Segment) (MultiTxCp_CellTxCp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MultiTxCp_CellTxCp(st), err
}

func NewRootMultiTxCp_CellTxCp(s *capnp.Segment) (MultiTxCp_CellTxCp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MultiTxCp_CellTxCp(st), err
}

func ReadRootMultiTxCp_CellTxCp(msg *capnp.Message) (MultiTxCp_CellTxCp, error) {
	root, err := msg.Root()
	return MultiTxCp_CellTxCp(root.Struct()), err
}

func (s MultiTxCp_CellTxCp) String() string {
	str, _ := text.Marshal(0xf6f1fa73036d902f, capnp.Struct(s))
	return str
}

func (s MultiTxCp_CellTxCp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiTxCp_CellTxCp) DecodeFromPtr(p capnp.Ptr) MultiTxCp_CellTxCp {
	return MultiTxCp_CellTxCp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiTxCp_CellTxCp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiTxCp_CellTxCp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiTxCp_CellTxCp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiTxCp_CellTxCp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiTxCp_CellTxCp) Op() CellTxOp2 {
	return CellTxOp2(capnp.Struct(s).Uint16(0))
}

func (s MultiTxCp_CellTxCp) SetOp(v CellTxOp2) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MultiTxCp_CellTxCp) CellSpec() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s MultiTxCp_CellTxCp) SetCellSpec(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s MultiTxCp_CellTxCp) CellID() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s MultiTxCp_CellTxCp) SetCellID(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s MultiTxCp_CellTxCp) Elems() (MultiTxCp_CellTxCp_AttrElemCp, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MultiTxCp_CellTxCp_AttrElemCp(p.Struct()), err
}

func (s MultiTxCp_CellTxCp) HasElems() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiTxCp_CellTxCp) SetElems(v MultiTxCp_CellTxCp_AttrElemCp) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewElems sets the elems field to a newly
// allocated MultiTxCp_CellTxCp_AttrElemCp struct, preferring placement in s's segment.
func (s MultiTxCp_CellTxCp) NewElems() (MultiTxCp_CellTxCp_AttrElemCp, error) {
	ss, err := NewMultiTxCp_CellTxCp_AttrElemCp(capnp.Struct(s).Segment())
	if err != nil {
		return MultiTxCp_CellTxCp_AttrElemCp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MultiTxCp_CellTxCp_List is a list of MultiTxCp_CellTxCp.
type MultiTxCp_CellTxCp_List = capnp.StructList[MultiTxCp_CellTxCp]

// NewMultiTxCp_CellTxCp creates a new list of MultiTxCp_CellTxCp.
func NewMultiTxCp_CellTxCp_List(s *capnp.Segment, sz int32) (MultiTxCp_CellTxCp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[MultiTxCp_CellTxCp](l), err
}

// MultiTxCp_CellTxCp_Future is a wrapper for a MultiTxCp_CellTxCp promised by a client call.
type MultiTxCp_CellTxCp_Future struct{ *capnp.Future }

func (f MultiTxCp_CellTxCp_Future) Struct() (MultiTxCp_CellTxCp, error) {
	p, err := f.Future.Ptr()
	return MultiTxCp_CellTxCp(p.Struct()), err
}
func (p MultiTxCp_CellTxCp_Future) Elems() MultiTxCp_CellTxCp_AttrElemCp_Future {
	return MultiTxCp_CellTxCp_AttrElemCp_Future{Future: p.Future.Field(0, nil)}
}

type MultiTxCp_CellTxCp_AttrElemCp capnp.Struct

// MultiTxCp_CellTxCp_AttrElemCp_TypeID is the unique identifier for the type MultiTxCp_CellTxCp_AttrElemCp.
const MultiTxCp_CellTxCp_AttrElemCp_TypeID = 0xd2411b0b08bea741

func NewMultiTxCp_CellTxCp_AttrElemCp(s *capnp.Segment) (MultiTxCp_CellTxCp_AttrElemCp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MultiTxCp_CellTxCp_AttrElemCp(st), err
}

func NewRootMultiTxCp_CellTxCp_AttrElemCp(s *capnp.Segment) (MultiTxCp_CellTxCp_AttrElemCp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MultiTxCp_CellTxCp_AttrElemCp(st), err
}

func ReadRootMultiTxCp_CellTxCp_AttrElemCp(msg *capnp.Message) (MultiTxCp_CellTxCp_AttrElemCp, error) {
	root, err := msg.Root()
	return MultiTxCp_CellTxCp_AttrElemCp(root.Struct()), err
}

func (s MultiTxCp_CellTxCp_AttrElemCp) String() string {
	str, _ := text.Marshal(0xd2411b0b08bea741, capnp.Struct(s))
	return str
}

func (s MultiTxCp_CellTxCp_AttrElemCp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiTxCp_CellTxCp_AttrElemCp) DecodeFromPtr(p capnp.Ptr) MultiTxCp_CellTxCp_AttrElemCp {
	return MultiTxCp_CellTxCp_AttrElemCp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiTxCp_CellTxCp_AttrElemCp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiTxCp_CellTxCp_AttrElemCp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiTxCp_CellTxCp_AttrElemCp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiTxCp_CellTxCp_AttrElemCp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiTxCp_CellTxCp_AttrElemCp) AttrID() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s MultiTxCp_CellTxCp_AttrElemCp) SetAttrID(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s MultiTxCp_CellTxCp_AttrElemCp) SeriesIndex() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s MultiTxCp_CellTxCp_AttrElemCp) SetSeriesIndex(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s MultiTxCp_CellTxCp_AttrElemCp) ValBuf() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s MultiTxCp_CellTxCp_AttrElemCp) HasValBuf() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiTxCp_CellTxCp_AttrElemCp) SetValBuf(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// MultiTxCp_CellTxCp_AttrElemCp_List is a list of MultiTxCp_CellTxCp_AttrElemCp.
type MultiTxCp_CellTxCp_AttrElemCp_List = capnp.StructList[MultiTxCp_CellTxCp_AttrElemCp]

// NewMultiTxCp_CellTxCp_AttrElemCp creates a new list of MultiTxCp_CellTxCp_AttrElemCp.
func NewMultiTxCp_CellTxCp_AttrElemCp_List(s *capnp.Segment, sz int32) (MultiTxCp_CellTxCp_AttrElemCp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[MultiTxCp_CellTxCp_AttrElemCp](l), err
}

// MultiTxCp_CellTxCp_AttrElemCp_Future is a wrapper for a MultiTxCp_CellTxCp_AttrElemCp promised by a client call.
type MultiTxCp_CellTxCp_AttrElemCp_Future struct{ *capnp.Future }

func (f MultiTxCp_CellTxCp_AttrElemCp_Future) Struct() (MultiTxCp_CellTxCp_AttrElemCp, error) {
	p, err := f.Future.Ptr()
	return MultiTxCp_CellTxCp_AttrElemCp(p.Struct()), err
}

const schema_9aff325096b39f47 = "x\xdat\x93\xc1kkE\x14\xc6\xbfo\xe6\xc6\x04l" +
	"_2\xdc\x82\xa2<\xb2\x11m\xc46m\x9e\x0f}o" +
	"\x93\x97\x97<4\xe5\xd9vl\x05)\"\xa4\xc9\x84\xc4" +
	"\xde$\xb7\xb9\xb7\x1a\x17\xda\xa5\xd0ntQ\x05Q\xc4" +
	"U\x97.\xdc\x0b\xfe\x0b\xae\\\xe8NQ\xba\x10\\(" +
	"X\x85\x91I\x9b\xdcX\xea\xe6\xce\x9d3g\xce\xf9\x9d" +
	"s\xbeY9\xe6=ou\xfe\x19\x0fB\xaf\xa4\x1e\xb1" +
	"\xaf\xad\xb7\xc3\xe2\xf1\xdfG\xd0>i_\xfa\xe2\xeb\x8f" +
	"7K\xf6S\xa4\x98\x06\xfc\xbfx\xe6\xa7\xc4c\x80\xaf" +
	"\xc4;\xa0\xad\x9c~\x93y\xf4\xc9\xcaw\xd0OS\xd8" +
	"\xe2\x87=\x19\x9d\xff\xfe\xe7\x85\xf3\xad\xf7\xc4\x11\xfd\x13" +
	"\xe1\xee}$\xbe\x02\xed\x07\x9f\xdd(\xbe\xfaf\xee\xfb" +
	"kC/\xc9s\xff\x8et\x7f\xb7\xa5\x0b\x9d\x7f\xff\xe7" +
	"\xc3\xf6\x0f/\xfc\x0a\xe5\x8b\xc4\x17\xf4O\xe4\x99\xff\xe5" +
	"\xd8\xf1s\xf9\x09h\x7f\\\xfb)\x9b;\xfd\xf67(" +
	"\xdf\x9bu\xbc\xf5\x87\x14\xf4\xe9\xa5\x81\xad\x7f\xa4\xe4V" +
	"\xc6\x13\x04\x12J}\x93\")\xf7\x82\x99^\x89\xbe\xf2" +
	"\\\x857\xbd_P\xb5\x8d\xb0\x1b\x15\x1b\xc3\xa6p\x9f" +
	"\xe5f#\xec\x87w_9\x08\xe2nv{T\x0d\xb5" +
	"G&\x01\x15\xd7l\xd5\x04\x81;\x01\xa03\xd2\x03<" +
	"\x02\xaaP\x02\xf4S\x92zE\x90\\\xa0\xb3-\xdd\x07" +
	"\xf4\xa2\xa4\xae\x09\xe6\x87f\xbf^c\x0a\x82)\xf0\xb0" +
	"9\x0e\x12\xf1\x06\xb8)\xc9\\\x92\x02t\xc6)U\xea" +
	"*\x95K\xbd<aX\xae\xc4\xf1\xf0A`z\x0eg" +
	"\x93\xd4sS\xa0\x07w\x01}OR?\x14T\x13\xa2" +
	"\xfa.\xa0_\x96\xd4\xdb\x82\x14\x0b\x14\x80\xd2\xce\xf1\xa1" +
	"\xa4~]\xb0\xdc\x88\xe3a\xbd\xc6\x0c\x043\xa0\x8d\xcc" +
	"\xb0k\xa2z\x1f\xe9\x96\x19M\xe0\xcbo7\x82\xfb\x07" +
	"m\xceCp~\x06u\xb6\x81\x8e\xabV6\xedm\x13" +
	"\xc5\x8ek\xa6Qk\x97My>i\xd4\xaaCxN" +
	"R\xbf(h\xe3wC\xb3\xde\xe8\x19\x00\x9c\x83\xe0\x1c" +
	"Xv\xb6z\x8d\x1e\x04\xbd\xff\xc98nIv\xb4\x11" +
	"\x96\\\xbe\xc7\xc7\xa5U\x9eu\xedTwv\x01\x0au" +
	"\xdb-R\xad\xba\xc5SK;\x00S\xaa\xb0\x03d\xfb" +
	"\x83\x8d\xd0v\xfb\x91\x19\xc6\xd5\x0e\xd2\xdd\xa0e\x0f\xc2" +
	"\xd9]\xcb\x04&6Wv\x062\x08l\xb3c\x9a{" +
	"\xe1\xa0\x0b\xd9\x8f\xa7`r\x06,\xe8\xf6\xf7\x1c\xdcV" +
	"h\x9anF\x97EA\xf1-\xbb\xe8\x0e\xea\xfd6\xb2" +
	"\x83\xc2b\xe1\xda\xeb\xff\x19z>\x98jr\xfa0\x15" +
	"w\xecD\x06\x90\xd5P\xe7\xa6\xbdn<\x01\xe87$" +
	"ugF\x03\xc6\x0d\xa0%\xa9CA%x!\x82\x9e" +
	"\x9b@GR\xc7\x82\x94\x0b\x94\x80\xdaw\x92\x0e$\xf5" +
	"HP\x0eBf\x93\x17\x0b2\x0b\xda\xe6\xa4,`\"" +
	"\x99\xb2\xb3%B\xcf\x9b\xc0\xf4\"\xe6\x12\\\x909\xf0" +
	"\xdf\x00\x00\x00\xff\xff\xa5\xc4%K"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9aff325096b39f47,
		Nodes: []uint64{
			0x8afb8b2f70664e55,
			0xd2411b0b08bea741,
			0xd8105e522f0e9c87,
			0xe837dc667fe57e1f,
			0xeec1a7100fe44add,
			0xf6f1fa73036d902f,
		},
		Compressed: true,
	})
}
