// Code generated by capnpc-go. DO NOT EDIT.

package arc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

// Constants defined in arc.capnp.
const (
	LinkCellSpec = "(CellLabels)()"
)

type AttrDefTest capnp.Struct

// AttrDefTest_TypeID is the unique identifier for the type AttrDefTest.
const AttrDefTest_TypeID = 0xd8105e522f0e9c87

func NewAttrDefTest(s *capnp.Segment) (AttrDefTest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AttrDefTest(st), err
}

func NewRootAttrDefTest(s *capnp.Segment) (AttrDefTest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AttrDefTest(st), err
}

func ReadRootAttrDefTest(msg *capnp.Message) (AttrDefTest, error) {
	root, err := msg.Root()
	return AttrDefTest(root.Struct()), err
}

func (s AttrDefTest) String() string {
	str, _ := text.Marshal(0xd8105e522f0e9c87, capnp.Struct(s))
	return str
}

func (s AttrDefTest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AttrDefTest) DecodeFromPtr(p capnp.Ptr) AttrDefTest {
	return AttrDefTest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AttrDefTest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AttrDefTest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AttrDefTest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AttrDefTest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AttrDefTest) TypeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AttrDefTest) HasTypeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AttrDefTest) TypeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AttrDefTest) SetTypeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AttrDefTest) TypeID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AttrDefTest) SetTypeID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// AttrDefTest_List is a list of AttrDefTest.
type AttrDefTest_List = capnp.StructList[AttrDefTest]

// NewAttrDefTest creates a new list of AttrDefTest.
func NewAttrDefTest_List(s *capnp.Segment, sz int32) (AttrDefTest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[AttrDefTest](l), err
}

// AttrDefTest_Future is a wrapper for a AttrDefTest promised by a client call.
type AttrDefTest_Future struct{ *capnp.Future }

func (f AttrDefTest_Future) Struct() (AttrDefTest, error) {
	p, err := f.Future.Ptr()
	return AttrDefTest(p.Struct()), err
}

type CellTxOp2 uint16

// CellTxOp2_TypeID is the unique identifier for the type CellTxOp2.
const CellTxOp2_TypeID = 0xe837dc667fe57e1f

// Values of CellTxOp2.
const (
	CellTxOp2_noOp        CellTxOp2 = 0
	CellTxOp2_insertChild CellTxOp2 = 1
	CellTxOp2_upsertChild CellTxOp2 = 2
	CellTxOp2_deleteChild CellTxOp2 = 3
	CellTxOp2_deleteCell  CellTxOp2 = 4
	CellTxOp2_checkpoint  CellTxOp2 = 5
)

// String returns the enum's constant name.
func (c CellTxOp2) String() string {
	switch c {
	case CellTxOp2_noOp:
		return "noOp"
	case CellTxOp2_insertChild:
		return "insertChild"
	case CellTxOp2_upsertChild:
		return "upsertChild"
	case CellTxOp2_deleteChild:
		return "deleteChild"
	case CellTxOp2_deleteCell:
		return "deleteCell"
	case CellTxOp2_checkpoint:
		return "checkpoint"

	default:
		return ""
	}
}

// CellTxOp2FromString returns the enum value with a name,
// or the zero value if there's no such value.
func CellTxOp2FromString(c string) CellTxOp2 {
	switch c {
	case "noOp":
		return CellTxOp2_noOp
	case "insertChild":
		return CellTxOp2_insertChild
	case "upsertChild":
		return CellTxOp2_upsertChild
	case "deleteChild":
		return CellTxOp2_deleteChild
	case "deleteCell":
		return CellTxOp2_deleteCell
	case "checkpoint":
		return CellTxOp2_checkpoint

	default:
		return 0
	}
}

type CellTxOp2_List = capnp.EnumList[CellTxOp2]

func NewCellTxOp2_List(s *capnp.Segment, sz int32) (CellTxOp2_List, error) {
	return capnp.NewEnumList[CellTxOp2](s, sz)
}

type MultiTxCp capnp.Struct

// MultiTxCp_TypeID is the unique identifier for the type MultiTxCp.
const MultiTxCp_TypeID = 0x8afb8b2f70664e55

func NewMultiTxCp(s *capnp.Segment) (MultiTxCp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MultiTxCp(st), err
}

func NewRootMultiTxCp(s *capnp.Segment) (MultiTxCp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MultiTxCp(st), err
}

func ReadRootMultiTxCp(msg *capnp.Message) (MultiTxCp, error) {
	root, err := msg.Root()
	return MultiTxCp(root.Struct()), err
}

func (s MultiTxCp) String() string {
	str, _ := text.Marshal(0x8afb8b2f70664e55, capnp.Struct(s))
	return str
}

func (s MultiTxCp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiTxCp) DecodeFromPtr(p capnp.Ptr) MultiTxCp {
	return MultiTxCp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiTxCp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiTxCp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiTxCp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiTxCp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiTxCp) ReqID() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s MultiTxCp) SetReqID(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s MultiTxCp) CellTxs() (MultiTxCp_CellTxCp_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MultiTxCp_CellTxCp_List(p.List()), err
}

func (s MultiTxCp) HasCellTxs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiTxCp) SetCellTxs(v MultiTxCp_CellTxCp_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCellTxs sets the cellTxs field to a newly
// allocated MultiTxCp_CellTxCp_List, preferring placement in s's segment.
func (s MultiTxCp) NewCellTxs(n int32) (MultiTxCp_CellTxCp_List, error) {
	l, err := NewMultiTxCp_CellTxCp_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return MultiTxCp_CellTxCp_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// MultiTxCp_List is a list of MultiTxCp.
type MultiTxCp_List = capnp.StructList[MultiTxCp]

// NewMultiTxCp creates a new list of MultiTxCp.
func NewMultiTxCp_List(s *capnp.Segment, sz int32) (MultiTxCp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MultiTxCp](l), err
}

// MultiTxCp_Future is a wrapper for a MultiTxCp promised by a client call.
type MultiTxCp_Future struct{ *capnp.Future }

func (f MultiTxCp_Future) Struct() (MultiTxCp, error) {
	p, err := f.Future.Ptr()
	return MultiTxCp(p.Struct()), err
}

type MultiTxCp_CellTxCp capnp.Struct

// MultiTxCp_CellTxCp_TypeID is the unique identifier for the type MultiTxCp_CellTxCp.
const MultiTxCp_CellTxCp_TypeID = 0xf6f1fa73036d902f

func NewMultiTxCp_CellTxCp(s *capnp.Segment) (MultiTxCp_CellTxCp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MultiTxCp_CellTxCp(st), err
}

func NewRootMultiTxCp_CellTxCp(s *capnp.Segment) (MultiTxCp_CellTxCp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MultiTxCp_CellTxCp(st), err
}

func ReadRootMultiTxCp_CellTxCp(msg *capnp.Message) (MultiTxCp_CellTxCp, error) {
	root, err := msg.Root()
	return MultiTxCp_CellTxCp(root.Struct()), err
}

func (s MultiTxCp_CellTxCp) String() string {
	str, _ := text.Marshal(0xf6f1fa73036d902f, capnp.Struct(s))
	return str
}

func (s MultiTxCp_CellTxCp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiTxCp_CellTxCp) DecodeFromPtr(p capnp.Ptr) MultiTxCp_CellTxCp {
	return MultiTxCp_CellTxCp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiTxCp_CellTxCp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiTxCp_CellTxCp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiTxCp_CellTxCp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiTxCp_CellTxCp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiTxCp_CellTxCp) Op() CellTxOp2 {
	return CellTxOp2(capnp.Struct(s).Uint16(0))
}

func (s MultiTxCp_CellTxCp) SetOp(v CellTxOp2) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MultiTxCp_CellTxCp) CellSpec() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s MultiTxCp_CellTxCp) SetCellSpec(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s MultiTxCp_CellTxCp) CellID() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s MultiTxCp_CellTxCp) SetCellID(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s MultiTxCp_CellTxCp) Elems() (MultiTxCp_CellTxCp_AttrElemCp, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MultiTxCp_CellTxCp_AttrElemCp(p.Struct()), err
}

func (s MultiTxCp_CellTxCp) HasElems() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiTxCp_CellTxCp) SetElems(v MultiTxCp_CellTxCp_AttrElemCp) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewElems sets the elems field to a newly
// allocated MultiTxCp_CellTxCp_AttrElemCp struct, preferring placement in s's segment.
func (s MultiTxCp_CellTxCp) NewElems() (MultiTxCp_CellTxCp_AttrElemCp, error) {
	ss, err := NewMultiTxCp_CellTxCp_AttrElemCp(capnp.Struct(s).Segment())
	if err != nil {
		return MultiTxCp_CellTxCp_AttrElemCp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MultiTxCp_CellTxCp_List is a list of MultiTxCp_CellTxCp.
type MultiTxCp_CellTxCp_List = capnp.StructList[MultiTxCp_CellTxCp]

// NewMultiTxCp_CellTxCp creates a new list of MultiTxCp_CellTxCp.
func NewMultiTxCp_CellTxCp_List(s *capnp.Segment, sz int32) (MultiTxCp_CellTxCp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[MultiTxCp_CellTxCp](l), err
}

// MultiTxCp_CellTxCp_Future is a wrapper for a MultiTxCp_CellTxCp promised by a client call.
type MultiTxCp_CellTxCp_Future struct{ *capnp.Future }

func (f MultiTxCp_CellTxCp_Future) Struct() (MultiTxCp_CellTxCp, error) {
	p, err := f.Future.Ptr()
	return MultiTxCp_CellTxCp(p.Struct()), err
}
func (p MultiTxCp_CellTxCp_Future) Elems() MultiTxCp_CellTxCp_AttrElemCp_Future {
	return MultiTxCp_CellTxCp_AttrElemCp_Future{Future: p.Future.Field(0, nil)}
}

type MultiTxCp_CellTxCp_AttrElemCp capnp.Struct

// MultiTxCp_CellTxCp_AttrElemCp_TypeID is the unique identifier for the type MultiTxCp_CellTxCp_AttrElemCp.
const MultiTxCp_CellTxCp_AttrElemCp_TypeID = 0xd2411b0b08bea741

func NewMultiTxCp_CellTxCp_AttrElemCp(s *capnp.Segment) (MultiTxCp_CellTxCp_AttrElemCp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MultiTxCp_CellTxCp_AttrElemCp(st), err
}

func NewRootMultiTxCp_CellTxCp_AttrElemCp(s *capnp.Segment) (MultiTxCp_CellTxCp_AttrElemCp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MultiTxCp_CellTxCp_AttrElemCp(st), err
}

func ReadRootMultiTxCp_CellTxCp_AttrElemCp(msg *capnp.Message) (MultiTxCp_CellTxCp_AttrElemCp, error) {
	root, err := msg.Root()
	return MultiTxCp_CellTxCp_AttrElemCp(root.Struct()), err
}

func (s MultiTxCp_CellTxCp_AttrElemCp) String() string {
	str, _ := text.Marshal(0xd2411b0b08bea741, capnp.Struct(s))
	return str
}

func (s MultiTxCp_CellTxCp_AttrElemCp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiTxCp_CellTxCp_AttrElemCp) DecodeFromPtr(p capnp.Ptr) MultiTxCp_CellTxCp_AttrElemCp {
	return MultiTxCp_CellTxCp_AttrElemCp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiTxCp_CellTxCp_AttrElemCp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiTxCp_CellTxCp_AttrElemCp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiTxCp_CellTxCp_AttrElemCp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiTxCp_CellTxCp_AttrElemCp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiTxCp_CellTxCp_AttrElemCp) AttrID() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s MultiTxCp_CellTxCp_AttrElemCp) SetAttrID(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s MultiTxCp_CellTxCp_AttrElemCp) SeriesIndex() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s MultiTxCp_CellTxCp_AttrElemCp) SetSeriesIndex(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s MultiTxCp_CellTxCp_AttrElemCp) ValBuf() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s MultiTxCp_CellTxCp_AttrElemCp) HasValBuf() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiTxCp_CellTxCp_AttrElemCp) SetValBuf(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// MultiTxCp_CellTxCp_AttrElemCp_List is a list of MultiTxCp_CellTxCp_AttrElemCp.
type MultiTxCp_CellTxCp_AttrElemCp_List = capnp.StructList[MultiTxCp_CellTxCp_AttrElemCp]

// NewMultiTxCp_CellTxCp_AttrElemCp creates a new list of MultiTxCp_CellTxCp_AttrElemCp.
func NewMultiTxCp_CellTxCp_AttrElemCp_List(s *capnp.Segment, sz int32) (MultiTxCp_CellTxCp_AttrElemCp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[MultiTxCp_CellTxCp_AttrElemCp](l), err
}

// MultiTxCp_CellTxCp_AttrElemCp_Future is a wrapper for a MultiTxCp_CellTxCp_AttrElemCp promised by a client call.
type MultiTxCp_CellTxCp_AttrElemCp_Future struct{ *capnp.Future }

func (f MultiTxCp_CellTxCp_AttrElemCp_Future) Struct() (MultiTxCp_CellTxCp_AttrElemCp, error) {
	p, err := f.Future.Ptr()
	return MultiTxCp_CellTxCp_AttrElemCp(p.Struct()), err
}

const schema_9aff325096b39f47 = "x\xdat\x93\xc1kcU\x14\xc6\xbf\xef\xde\x17\x13\xb0" +
	"\x9d\xe4\xf2\x0a\x8a2d#\xda\x88m\xda\x8c\x83\xcel" +
	"2\x99d\xd0\x94:\xd3k+H\x11\xe15\xb9!a" +
	"^\xd2\xd7\xbcW\x8d\x82v)\xb4\x1b]TA\x14q" +
	"\xd5\xa5\x0b\xf7\x82\xff\x82+\x17\xbaS\x94.\x04\x17\x0a" +
	"V\xe1\xcaM\x9b\xbcX\xea&/\xef\xdc\xf3\xce\xf9\x9d" +
	"\xef|w\xe5\x88w\xbc\xd5\xf9g<\x08\xbd\x92y\xc4" +
	"\xbev\xbf\x13\x95\x8f\xfe>\x84\xf6I\xfb\xd2\x17_\x7f" +
	"\xbcQ\xb1\x9f\"\xc3,\xe0\xff\xc5S?#\x1e\x03|" +
	"%\xde\x06m\xed\xe4\x9b\xdc\xa3O\xd6\xbe\x83~\x9a\xc2" +
	"\x96?\xec\xcb\xf8\xec\xf7?\xcf\x93o\xbc'\x0e\xe9\x1f" +
	"\x0b\xf7\xddG\xe2+\xd0~\xf0\xd9\xb5\xf2\xabo\x16\xbe" +
	"\xbf\xb2\xf4\x92<\xf3oI\xf7\xef\xa6t\xa5\x8b\xef\xff" +
	"|\xd0\xf9\xe1\x85_\xa1|\x91\xe6\x82\xfe\xb1<\xf5\xbf" +
	"\x1c'~.?\x01\xed\x8fk?\xe5\x0b'\xdf\xfe\x06" +
	"\xe5{\xb3\x897\xfe\x90\x82>\xbd,\xb0\xf9\x8f\x94\xdc" +
	"\xccy\x82@J\xa9\xafS\xa4\xe3\x9e3\xd3\xab\xd0W" +
	"\x9e\x9b\xf0\xba\xf7\x0b\xea6\x88zq9\x18\xb6\x84\xfb" +
	"Yn\x05\xd1 \xba\xfd\xca~\x98\xf4\xf2[\xa3z\xa4" +
	"=2-\xa8\xb8f\xeb&\x0c\xdd\x09\x00\x9d\x93\x1e\xe0" +
	"\x11P\xa5\x0a\xa0\x9f\x92\xd4+\x82\xe4\x02]l\xe9." +
	"\xa0\x17%uC\xb084{\xcd\x063\x10\xcc\x80\x07" +
	"\xadq\x91\x98\xd7\xc0\x0dI\x16\xd2\x16\xa0\x0bN\xa92" +
	"\x97\xa9\\\xeb\xe5\x09\xc3r-I\x86\xf7B\xd3w8" +
	"\x1b\xa4\x9e\x9b\x02\xdd\xbb\x0d\xe8;\x92z]PM\x88" +
	"\x9a;\x80~YRo\x09R,P\x00J\xbb\xc4u" +
	"I\xfd\xba`5H\x92a\xb3\xc1\x1c\x04s\xa0\x8d\xcd" +
	"\xb0g\xe2\xe6\x00\xd9\xb6\x19M\xe0\xabo\x05\xe1\xdd\xfd" +
	"\x0e\xe7!8?\x83:+\xa0\xe3jTMg\xcb\xc4" +
	"\x89\xe3\x9a\x11j\xedB\x94\xe7S\xa1V\x1d\xc2s\x92" +
	"\xfaEA\x9b\xbc\x13\x99\xfbA\xdf\x00\xe0\x1c\x04\xe7\xc0" +
	"\xaa\x8b5\x1b\xf4 \xe8\xfdO\xc7\xb1$\xf9\xd1\x83\xa8" +
	"\xe2\xfa=>\x1e\xad\xf6\xac\x93S\xdd\xda\x01(\xd4M" +
	"\xf7\x90j\xd5=<\xb5\xb4\x0d0\xa3J\xdb@~\xb0" +
	"\xfb \xb2\xbdAl\x86I\xbd\x8bl/l\xdb\xfdh" +
	"\xf6\xadmB\x93\x98Ko\x062\x0cm\xabkZ\x0f" +
	"\xa3\xdd\x1e\xe4 \x99\x82\xc9\x19\xb0\xb07x\xe8\xe06" +
	"#\xd3r;\xba\x18\x0a\x8a\xef\xdaEw\xb0\x1e\xec\xa0" +
	"j\xc2\xb8\xb4X\xba\xb2\xc0\x7f\xd6^\x0c\xa7\xae\x9c^" +
	"M\xc5m;1\x02d=\xd2\x85\xa9\xda\xc1\x13\x80~" +
	"CRwg\\`\xdc\x0a\xda\x92:\x12T\x82\xe76" +
	"\xe8\xbb\x1dt%u\"H\xb9@\x09\xa8=g\xeaP" +
	"R\x8f\x04\xe5n\xc4|zgA\xe6A\xdb\x9a\x0c\x06" +
	"LLSu\xb1\xd4\xeaE\x13\x9a~\xccB\x8a\x0b\xb2" +
	"\x00\xfe\x1b\x00\x00\xff\xff|\x11&R"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9aff325096b39f47,
		Nodes: []uint64{
			0x8afb8b2f70664e55,
			0xd2411b0b08bea741,
			0xd8105e522f0e9c87,
			0xe837dc667fe57e1f,
			0xeec1a7100fe44add,
			0xf6f1fa73036d902f,
		},
		Compressed: true,
	})
}
