// Code generated by capnpc-go. DO NOT EDIT.

package arc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

// Constants defined in arc.capnp.
const (
	LinkCellSpec = "(CellInfo)()"
)

// Constants defined in arc.capnp.
var (
	BuiltInDefs = AttrDefTest_List(capnp.MustUnmarshalRoot(x_9aff325096b39f47[0:88]).List())
)

type AttrDefTest capnp.Struct

// AttrDefTest_TypeID is the unique identifier for the type AttrDefTest.
const AttrDefTest_TypeID = 0xd8105e522f0e9c87

func NewAttrDefTest(s *capnp.Segment) (AttrDefTest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AttrDefTest(st), err
}

func NewRootAttrDefTest(s *capnp.Segment) (AttrDefTest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AttrDefTest(st), err
}

func ReadRootAttrDefTest(msg *capnp.Message) (AttrDefTest, error) {
	root, err := msg.Root()
	return AttrDefTest(root.Struct()), err
}

func (s AttrDefTest) String() string {
	str, _ := text.Marshal(0xd8105e522f0e9c87, capnp.Struct(s))
	return str
}

func (s AttrDefTest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AttrDefTest) DecodeFromPtr(p capnp.Ptr) AttrDefTest {
	return AttrDefTest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AttrDefTest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AttrDefTest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AttrDefTest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AttrDefTest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AttrDefTest) TypeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AttrDefTest) HasTypeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AttrDefTest) TypeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AttrDefTest) SetTypeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AttrDefTest) TypeID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AttrDefTest) SetTypeID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// AttrDefTest_List is a list of AttrDefTest.
type AttrDefTest_List = capnp.StructList[AttrDefTest]

// NewAttrDefTest creates a new list of AttrDefTest.
func NewAttrDefTest_List(s *capnp.Segment, sz int32) (AttrDefTest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[AttrDefTest](l), err
}

// AttrDefTest_Future is a wrapper for a AttrDefTest promised by a client call.
type AttrDefTest_Future struct{ *capnp.Future }

func (f AttrDefTest_Future) Struct() (AttrDefTest, error) {
	p, err := f.Future.Ptr()
	return AttrDefTest(p.Struct()), err
}

type URIScheme2 uint16

// URIScheme2_TypeID is the unique identifier for the type URIScheme2.
const URIScheme2_TypeID = 0xc69edaa315779586

// Values of URIScheme2.
const (
	URIScheme2_any  URIScheme2 = 0
	URIScheme2_data URIScheme2 = 1
	URIScheme2_http URIScheme2 = 2
	URIScheme2_file URIScheme2 = 3
)

// String returns the enum's constant name.
func (c URIScheme2) String() string {
	switch c {
	case URIScheme2_any:
		return "any"
	case URIScheme2_data:
		return "data"
	case URIScheme2_http:
		return "http"
	case URIScheme2_file:
		return "file"

	default:
		return ""
	}
}

// URIScheme2FromString returns the enum value with a name,
// or the zero value if there's no such value.
func URIScheme2FromString(c string) URIScheme2 {
	switch c {
	case "any":
		return URIScheme2_any
	case "data":
		return URIScheme2_data
	case "http":
		return URIScheme2_http
	case "file":
		return URIScheme2_file

	default:
		return 0
	}
}

type URIScheme2_List = capnp.EnumList[URIScheme2]

func NewURIScheme2_List(s *capnp.Segment, sz int32) (URIScheme2_List, error) {
	return capnp.NewEnumList[URIScheme2](s, sz)
}

type AssetRef2 capnp.Struct

// AssetRef2_TypeID is the unique identifier for the type AssetRef2.
const AssetRef2_TypeID = 0xc1cead83b4340f68

func NewAssetRef2(s *capnp.Segment) (AssetRef2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return AssetRef2(st), err
}

func NewRootAssetRef2(s *capnp.Segment) (AssetRef2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return AssetRef2(st), err
}

func ReadRootAssetRef2(msg *capnp.Message) (AssetRef2, error) {
	root, err := msg.Root()
	return AssetRef2(root.Struct()), err
}

func (s AssetRef2) String() string {
	str, _ := text.Marshal(0xc1cead83b4340f68, capnp.Struct(s))
	return str
}

func (s AssetRef2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AssetRef2) DecodeFromPtr(p capnp.Ptr) AssetRef2 {
	return AssetRef2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AssetRef2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AssetRef2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AssetRef2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AssetRef2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AssetRef2) Label() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AssetRef2) HasLabel() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AssetRef2) LabelBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AssetRef2) SetLabel(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AssetRef2) MediaType() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s AssetRef2) HasMediaType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AssetRef2) MediaTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s AssetRef2) SetMediaType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s AssetRef2) Scheme() URIScheme2 {
	return URIScheme2(capnp.Struct(s).Uint16(0))
}

func (s AssetRef2) SetScheme(v URIScheme2) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s AssetRef2) Uri() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s AssetRef2) HasUri() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s AssetRef2) UriBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s AssetRef2) SetUri(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s AssetRef2) Attrs() (AssetRef2_Attrs, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return AssetRef2_Attrs(p.Struct()), err
}

func (s AssetRef2) HasAttrs() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s AssetRef2) SetAttrs(v AssetRef2_Attrs) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewAttrs sets the attrs field to a newly
// allocated AssetRef2_Attrs struct, preferring placement in s's segment.
func (s AssetRef2) NewAttrs() (AssetRef2_Attrs, error) {
	ss, err := NewAssetRef2_Attrs(capnp.Struct(s).Segment())
	if err != nil {
		return AssetRef2_Attrs{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// AssetRef2_List is a list of AssetRef2.
type AssetRef2_List = capnp.StructList[AssetRef2]

// NewAssetRef2 creates a new list of AssetRef2.
func NewAssetRef2_List(s *capnp.Segment, sz int32) (AssetRef2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[AssetRef2](l), err
}

// AssetRef2_Future is a wrapper for a AssetRef2 promised by a client call.
type AssetRef2_Future struct{ *capnp.Future }

func (f AssetRef2_Future) Struct() (AssetRef2, error) {
	p, err := f.Future.Ptr()
	return AssetRef2(p.Struct()), err
}
func (p AssetRef2_Future) Attrs() AssetRef2_Attrs_Future {
	return AssetRef2_Attrs_Future{Future: p.Future.Field(3, nil)}
}

type AssetRef2_Attrs capnp.Struct

// AssetRef2_Attrs_TypeID is the unique identifier for the type AssetRef2_Attrs.
const AssetRef2_Attrs_TypeID = 0xa4b56be7c7ee6f1e

func NewAssetRef2_Attrs(s *capnp.Segment) (AssetRef2_Attrs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AssetRef2_Attrs(st), err
}

func NewRootAssetRef2_Attrs(s *capnp.Segment) (AssetRef2_Attrs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AssetRef2_Attrs(st), err
}

func ReadRootAssetRef2_Attrs(msg *capnp.Message) (AssetRef2_Attrs, error) {
	root, err := msg.Root()
	return AssetRef2_Attrs(root.Struct()), err
}

func (s AssetRef2_Attrs) String() string {
	str, _ := text.Marshal(0xa4b56be7c7ee6f1e, capnp.Struct(s))
	return str
}

func (s AssetRef2_Attrs) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AssetRef2_Attrs) DecodeFromPtr(p capnp.Ptr) AssetRef2_Attrs {
	return AssetRef2_Attrs(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AssetRef2_Attrs) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AssetRef2_Attrs) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AssetRef2_Attrs) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AssetRef2_Attrs) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AssetRef2_Attrs) PixWidth() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AssetRef2_Attrs) SetPixWidth(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AssetRef2_Attrs) PixHeight() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AssetRef2_Attrs) SetPixHeight(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AssetRef2_Attrs) PhysWidth() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s AssetRef2_Attrs) SetPhysWidth(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s AssetRef2_Attrs) PhysHeight() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s AssetRef2_Attrs) SetPhysHeight(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

// AssetRef2_Attrs_List is a list of AssetRef2_Attrs.
type AssetRef2_Attrs_List = capnp.StructList[AssetRef2_Attrs]

// NewAssetRef2_Attrs creates a new list of AssetRef2_Attrs.
func NewAssetRef2_Attrs_List(s *capnp.Segment, sz int32) (AssetRef2_Attrs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[AssetRef2_Attrs](l), err
}

// AssetRef2_Attrs_Future is a wrapper for a AssetRef2_Attrs promised by a client call.
type AssetRef2_Attrs_Future struct{ *capnp.Future }

func (f AssetRef2_Attrs_Future) Struct() (AssetRef2_Attrs, error) {
	p, err := f.Future.Ptr()
	return AssetRef2_Attrs(p.Struct()), err
}

const schema_9aff325096b39f47 = "x\xdat\x93\xcf\x8b\x1cE\x1c\xc5\xdf\xab\xaau\xb2!" +
	"\xa6\xa7\xe8\x11\x89\x10\x07s\xc9N\x90\xfc\x98\xcdA\x02" +
	"\xb2\xae\x0e\xc6\xc9A\xb6f\"B\x0e\x92\xcelM\xba" +
	"\x93\xde\x99v\xba\x96\xec\xa8\x0b\x06\x83F\x88\xa0\xa0\xa2" +
	"\xe2\x8f\x83\x82'O\xc6? \x17\xf5$\x1eE\xc8-" +
	"\x10\xe2!\x88\xe0\xc1\x80\xb4\xd4dg\x1a\x97\xcde\x86" +
	"~\xf5\xea\xf1\xfd\xf4\xf7\xf5\xd1\xab|F\x1d{\xf8\xa0" +
	"\x820G\xe7\x1e*\x1e\x1f\xde\xfd\xe9\xf6\xc5\x1f\xbe\x81" +
	"\xd9OQ\xc4\xc1\xf1\xebo}\xf7\xcb\x0d\xa8\x0a\xb0\xf8" +
	"\x0f\x1fc8/*@8'n\x83\xe5\xb1\x09\xc9\xe2" +
	"\xe4W\xdf\x7f\xbc\xd2,>\xc3\x9cw\x87w\xc4\x1f\xe1" +
	"\xdf\xe2Q`\xf1_Q'X\xbc\xfd\xd1\xa5G\xbe\xfe" +
	"\xfd\xcb\x1f\xa1CQ\x9a\xc1P\xab\xbf\xc2\xfd\x93;\xfb" +
	"\xd4y\xb0\xb8>T_l~\xfa\xda\xaf\xd0\xa1\xfa\x9f" +
	"\xf1iu/l{c\xb7\xa5$\xbbg\x95 P\xbc" +
	"\xf3\xf9\xde#\x9dW\xaa\xbfm\x9f\x82>q]\xdd\x0b" +
	"/O\xb27\xd5%\xb0\xb8y\xeaVP\xfd\xf6\xc6\xdd" +
	"\xed\xd9\x8b7\x95`xg\x12~\xcb\x87\xff\xe9\xc3\x9f" +
	"-\xa2,\xc9\x8fD\xa3\x9e\xf4?\x87{Q6\xc8N" +
	",\xe7\xb9u\x1d\xdbo\x1e^vN\x8e\xf2\x15\xd2T" +
	"\xa5\x02\x14\x01\x1d\x9d\x02\xccYI\x93\x0aj\xb2F/" +
	"&\x1d\xc0\xc4\x92\xc6\x09j!j\x14\x80~\xd5\x8b\x99" +
	"\xa4yCPKY\xa3\x04\xf4\xf8\x0c`6$\xcd\x15" +
	"\xc1\"K6^NV]\x0c\x80\x0a\x82\x0a\x13\xed\x05" +
	"\x9b\x9c\x8fAWj\xf18\xf7F0\xe6n\x08\xee\xde" +
	"\xd2\xbc\x112v3q\x8a#\xb6\xe3\x04\x9e\xc7(\xb2" +
	"l\x80f\xb3\xbe\xec\xdc(7\xb5\x19\xdcf\xb3\x9cn" +
	"\x06w\xd9s\xbc)i\xae\x09r\x8b\xed\xdd\x13\x80\xb9" +
	"\"i\xde\xf7l\xe2>\xdb{\x07\x00sU\xd2|(" +
	"\xa8\x95\xacQ\x01\xfa\x03\x1fyM\xd2|\"XO\xa3" +
	"s6\xe5\x1e\x08\xee\x01\x8b5\xbb\x9aD\xa7\xc7\x19h" +
	"\xa7\xdaR\xde\x8b\xed\x9aeP\xd6\x09d\x00V\xd6G" +
	"\xc9\xd4T\x8f\xfc\xd8\xac\x96, \xab\x0f\xc0\x7f\xa9\xd3" +
	"\xee\xf6\xea>\xb49Y\xe4d\xfc\xc6\x01\x7fE?q" +
	"\x08\xa0\xd0\xfb\xfc\x9f\xd4\xfa\x10P\x89\x06\xe3`5r" +
	"Q\x10;\x97\x05\xfd$\xb5;\xa6\x9e[OR\xb7\xd4" +
	"\x1e\xb4l\xdf\xf7\x83{\xc1\x15IV\xcb\xb6\xc2\x8b\xd0" +
	"<hv\x91|]\xcf_\x90?S\xcf\x9f)|\xc8" +
	"s6M\x11\xb4\x07\xfd\xe1\xe4\xf1\xa4\x1d>\x0f\x99l" +
	"\xec\xbc?\xe7F\xad%\xdb?ms\xe7\x09v\xcd\xb6" +
	"\xd5\xf0U\\\x904\xc7\x05\xa7\xcb:\xe6\x17\xf3\xa4\xa4" +
	"yJ\xb0p\xe3\xcc\xbe\x18\xadY\xdf\xaf\xe9\x0b\xf6Z" +
	"\xbb5\xab\xd6N\x1f@\x9a\x0c.\xfa\x09\xbb\x99\xed\xc1" +
	"\xd3\xdd\xbf\x0b\xcd\x0b\xc5\x82?h\x0f\xfa\x08\x86\x8d\x85" +
	"\xc6\x7f\x01\x00\x00\xff\xff\x86\xe8\x18\xda"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9aff325096b39f47,
		Nodes: []uint64{
			0xa4b56be7c7ee6f1e,
			0xc1cead83b4340f68,
			0xc69edaa315779586,
			0xd07a997d9d046fb4,
			0xd8105e522f0e9c87,
			0xeec1a7100fe44add,
		},
		Compressed: true,
	})
}

var x_9aff325096b39f47 = []byte{
	0, 0, 0, 0, 10, 0, 0, 0,
	1, 0, 0, 0, 39, 0, 0, 0,
	8, 0, 0, 0, 1, 0, 1, 0,
	123, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 106, 0, 0, 0,
	200, 1, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 90, 0, 0, 0,
	97, 114, 99, 46, 67, 101, 108, 108,
	73, 110, 102, 111, 0, 0, 0, 0,
	97, 114, 99, 46, 71, 101, 111, 70,
	105, 120, 0, 0, 0, 0, 0, 0,
}
