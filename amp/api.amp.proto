syntax = "proto3";

// package amp is an implementation-independent API for a pluggable client-server UI/UX system,
// featuring support and integration for files, media, and communication.
package amp;

// Tells protoc that a .proto file importing amp.proto what package import to use within Go.
option go_package = "github.com/amp-3d/amp-sdk-go/amp";

// import "github.com/gogo/protobuf/gogoproto/gogo.proto";  // https://stackoverflow.com/questions/43026449/gogo-proto-file-not-found

option csharp_namespace = "AMP";


enum Const {
    Const_Defs = 0;

    // TIDBinaryLen is the byte size of a Tx ID ("TID"), a hash with a leading big endian binary time index.
    //
    // This allows TIDs to be sorted chronologically, improving catalog (search) efficiency. 
    // This facilitates Tx storage and Tx syndication (time-ordered Tx playback).  
    // Importantly, a TxID (32 bytes) is has a UTC16 prefix, allowing efficient LSM storage to scale to billions of Txs.
    //
    // Byte layout is designed so that TIDs are sortable by their embedded timestamp:
    //    0:6   - Standard UTC timestamp in unix seconds (big endian)
    //    6:8   - Timestamp fraction (big endian)
    //    8:32  - Signature/hash suffix.
    Const_TIDBinaryLen = 32;

    // TIDStringLen is the ASCII-compatible string length of a (binary) TID encoded into its base32 form.
    // The encoding used is the geo-hash base32 alphabet, so that even ascii ordinal string comparisons will correctly sort encoded TIDs by time.
    Const_TIDStringLen = 52;

    // DefaultServicePort  is the default TCP port used to expose amp.Host service.
    Const_DefaultServicePort = 5192;
    
	// Byte size and version of a TxMsg encoding -- sizes are little endian
	// A TxHeader has the following layout:
    //   Bytes  00:03 -- TxHeader marker ('amp') 
	//          03:04 -- Const_TxHeader_Version
    //          04:08 -- TxMsg body size: header + serialized TxOp(s)
    //          08:12 -- TxMsg.DataStore size
    //          12:16 -- Reserved 
	Const_TxHeader_Size = 16;
	
	// Version of the TxHeader -- first byte
    Const_TxHeader_Version = 0x33;
	
	// The first byte of the TxHeader is the header size and version and
	// the following 3 bytes of a serialized TxMsg ("amp") 
    Const_TxHeader_Marker = 0x616D70; 
    
    // בְּרֵאשִׁ֖ית בָּרָ֣א אֱלֹהִ֑ים אֵ֥ת הַשָּׁמַ֖יִם וְאֵ֥ת הָאָֽרֶץ
    // Oh Lord, please bless this project, those who fight for it, and those who lay their life on Your altar.
    Const_Invocation = 3773;
}



// TxOpCode specifies a particular cell transaction operation.
enum TxOpCode {
    TxOpCode_Nil        = 0; // No-op
    
    TxOpCode_MetaAttr   = 1; // Used for session-level meta events (e.g. login, etc)
    TxOpCode_UpsertAttr = 2; // If FromID is set, add link from FromID to TargetID
    TxOpCode_DeleteAttr = 4; // remove attr element
    TxOpCode_DeleteCell = 5; // remove cell and all its attributes
    
    TxOpCode_UpsertLink = 7; // upsert link from FromID to TargetID
    TxOpCode_DeleteLink = 8; // remove link from FromID to TargetID
}


// TxBody contains a max number of uint64 fields usable for any purpose.
enum TxField {
    TxField_0   = 0;
    
    TxField_FromID_0 = 1;
    TxField_FromID_1 = 2;
    TxField_FromID_2 = 3;
    
    TxField_TargetID_0 = 4;
    TxField_TargetID_1 = 5;
    TxField_TargetID_2 = 6;
    
    TxField_AttrID_0 = 7;
    TxField_AttrID_1 = 8;
    TxField_AttrID_2 = 9;
    
    TxField_SI_0 = 10;
    TxField_SI_1 = 11;
    TxField_SI_2 = 12;
    
    TxField_Hash = 13;
    
    TxField_NumFields = 14;
    TxField_MaxFields = 24;
}


// TxInfo contains information for a TxMsg
message TxInfo {

    // communicates request status / completion.
    OpStatus            Status = 2;
    
    // The number of TxOps in this TxMsg.
    uint64              NumOps = 4;

    // A universally unique tag assigned when this Tx was created.
    // Used to identify this tx and also serves as context ID for subsequent responses.
    int64               GenesisID_0 = 5;
    fixed64             GenesisID_1 = 6;
    fixed64             GenesisID_2 = 7;
    
    // This is the GenesisID of the initial request.
    // If 0, this denotes a context-free request and is not dependent on another tx.
    int64               RequestID_0 = 10;
    fixed64             RequestID_1 = 11;
    fixed64             RequestID_2 = 12;
    
    // Home "planet" or "cell" and allied trust chains 
    int64               RootElementID_0 = 13;
    fixed64             RootElementID_1 = 14;
    fixed64             RootElementID_2 = 15;

}

enum SelectOp {
    SelectOp_Neutral = 0;
    SelectOp_Include = 1;
    SelectOp_Exclude = 2;
}

// OpStatus allows a sender to express the status of a request.
enum OpStatus {

    // Op / request has not yet been submitted
    OpStatus_NotStarted = 0;
    
    // Op / request is in progress
    OpStatus_Syncing    = 1;
    
    // Sent by the host to signal that the op up to date and the client state is stable / synchronized.
    // This typically drives UI updates or other dependencies requiring a stable state.
    OpStatus_Synced     = 2;
    
    // From the client to host, this signals to close / cancel the op associated with ReqID.
    // From the host to client, this signals that the given request ID has been closed / discarded.
    OpStatus_Closed     = 3;
}

// Login -- STEP 1: client -> host
message Login {

    // A byte string identifying user who is logging in (lot limited to UTF8)
    // This is typically a username or a persistent Tag issued by the device OS when the app is (re)installed. 
    string             UserUID     = 1;
    
    // HostAddr is network address of the server known to the client (e.g. IP address, localhost, domain name, etc)
    // archost uses this to as the host name when serving URLs for the client to consume.
    string             HostAddr    = 2;
    
    string             DeviceLabel = 8;
    string             DeviceUID   = 9; 
    
    // Current or previous checkpoint -- optional
    AuthCheckpoint     Checkpoint  = 10;
}

// LoginChallenge -- STEP 2: host -> client
message LoginChallenge {
    bytes               Hash            = 1;
}

// LoginResponse -- STEP 3: client -> host
message LoginResponse {
    bytes               HashResponse    = 1;
}

// AuthCheckpoint  -- STEP 4: host -> client
message AuthCheckpoint {
    string              Token = 1;

    Tag                 Session = 10;
    Tag                 Member  = 11;

    // List of available channel types that a host emits at runtime so a client knows what kind of channel types are available.  
    Tag                 HomeFeed = 9;

}

enum PinSync {

    // If set, a pin request will not send any state responses to the client.
    // This is useful when only writing to a cell and no state updates are needed.
    PinSync_None = 0;
    
	// If set, a pin request will be automatically closed once state is pushed / synchronized.
    // This is useful when only a snapshot of the cell is needed.
    PinSync_CloseOnSync = 1;
    
    // If set, a pin request will remain open even after state is synced.
    // In this mode, he client will receive any state updates until the request is explicitly closed.
    PinSync_Maintain = 2;
}



// PinRequest is a client request to "pin" a cell, meaning selected attrs and child cells will be pushed to the client.  
message PinRequest {

    // Specifies a target URL or tag / cell ID to be pinned with the above available mint templates available.
    Tag          PinTarget = 2;
    
    // Attributes to be pinned (synced) -- if nil, all attrs are pinned
    repeated Tag PinAttrs  = 4;
    
    // Options for this request.
    PinSync      PinSync   = 6;
    
    // // If set, PinTarget.URL is an external URL redirected for internal handling -- e.g. oauth request (host to client) or an oauth response (client to host).
    // bool         ExternalURL = 10;

    // Delimited list of "semi-ordered" tags to filter the pinned cell.
    // ((:/\.\|)*{(-_\|\w)+})+
    //string              TagQueryExpr = 16;
    
}

// LaunchURL is used as a meta attribute handle a URL, such as an oauth request (host to client) or an oauth response (client to host).
message LaunchURL {
    string URL = 1;
}



// CordType describes how to interpret coordinates contained in a Position.
enum CordType {
    CordType_Unspecified     = 0;
    CordType_Ordered         = 1;  // U is order ranking
    CordType_Plane_Cartesian = 5;  // (U,V,W) are cartesian coordinates
    CordType_Plane_HexEvenR  = 6;  // (U,V) are hexagonal "even-r" coordinates
    CordType_Geoid_Sphere    = 10; // U is lat, V is long, W is altitude (m)
    CordType_Geoid_WGS84     = 11; // U is lat, V is long, W is altitude (m)
}


// Position describes a position in space and/or time using a given coordinate system.
message Position {
    CordType            CordType    = 1; // CordType describing how to interpret U,V,W
    
    double              U           = 3; 
    double              V           = 4;
    double              W           = 5;
    
    float               ROU         = 6; // radius of uncertainty (meters)
}


enum Enable {
    Enable_LatentOff  = 0x0;
    Enable_LatentOn   = 0x1;
    Enable_ActiveOn   = 0x2;
    Enable_ActiveOff  = 0x3;
}


enum UrlScheme {
    UrlScheme_Nil             = 0;
    UrlScheme_Unrecognized    = 1;  // Unrecognized URL scheme
    UrlScheme_Http            = 2;  // "[http[s]://]{hostname}[:{port}]/{query}"
    UrlScheme_Data            = 3;  // "[data:]{mime-type}[[;base64],{data-encoding}]"
    UrlScheme_File            = 4;  // "[file://]{hfs-pathname}"
    UrlScheme_Amp             = 7;  // "[amp:[//app-alias/]]{cmd}[/{uri}]?{query}"
    
    UrlScheme_Ipfs            = 17; // "[ipfs://]{hash}"
    UrlScheme_Ipns            = 18; // "[ipns://]{hash}"
    UrlScheme_Magnet          = 19; // "[magnet:]{query}"
    UrlScheme_Git             = 20; // "[git://]{hostname}/{repo}[/{path}]"
}


enum Metric {
    Metric_Nil                           = 0;
    Metric_OrthoPixel                    = 1; // x0 => width, x1 => height, x2 => depth
    Metric_OrthoMillimeter               = 2; // x0 => width, x1 => height, x2 => depth
    Metric_HexGridMillimeter             = 3; // x0 => q,     x1 => r,      x2 => s
    Metric_TrapezoDodecahedronMillimeter = 4; // TODO
}

enum TagUse {
    TagUse_Unspecified  = 0;
    TagUse_Pinnable     = 1; // attr specification that can be instantiated (which can cost resources)
    TagUse_Glyph        = 2; // references a visual icon or glyph 
    TagUse_Link         = 3; // references a public and independent / external link 
    TagUse_Stream       = 4; // consumable video, audio, and other stream asset types ~1-300 mb
    TagUse_Content      = 5; // denotes this Tag is a content link
}

// Tag is a multi-use workhorse. All fields are optional and whose meaning is contextual.
//
// Often used to reference an asset, a Link can reference any resource, a show, project, episode, or XR beacon. 
// The tagging naming convention describes a semi-ordered list of UTF tags.  
//      As tags first appear when going from left to right in the list, they are considered "more significant" or "higher priority" than tags that appear later.
//      It is up to amp-search-dev-tag-specification to order search results based on tag filters (case sensitive, time ranges, or any UTF8 enum identifier)
//      By convention, tags are case sensitive by default, however there are many filter presets -- This is how people "type or speak search"
//      "Two tag rule" -- if you can think of two or more other tags in an order ranking, then do that instead.
message Tag {

    TagUse  Use = 1;

    // Identifies a specific target tag ID this link points to.
    int64   TagID_0 = 2;
    fixed64 TagID_1 = 3;
    fixed64 TagID_2 = 4;

    // // Identifies an attribute specification type (i.e. a data channel identifier with an implied SI format).
    // int64   AttrID_0 = 5;
    // fixed64 AttrID_1 = 6;
    // fixed64 AttrID_2 = 7;
    
    
    string URL         = 13; // e.g. "https://...", "amp://...", "ipfs://...", "file://...", "data:..."
    string ContentType = 14; // e.g. "text/html", "image/png", "image/*", 
    bytes  Attachment  = 15; // inline content -- e.g. rtf text, inline thumbnails, cache fragments
    
    // Extensible 
    //repeated Tag Tags = 16;

    // Implies a specific interpretation or spatial encoding of the size metric values
    //      exp(LogScale) => units linear scale metric -
    //      e.g.  0.0 => 1, 1 => e^1,  3773.7337 => e^(8.23582016170069) ... )
    //double              LogScale   = 25; // natural log of the unit-to-physical scale metric (default 0.0 => 1.0)
    
    Metric Metric = 26; // specifies the metric system used for the size metric values
    float  Size_0 = 27; // x0 => width, x1 => height, x2 => depth
    float  Size_1 = 28;
    float  Size_2 = 29;
    
}



// TagTab maps to a visual tab for a Tag -- complete with fields for user consumption.
message TagTab {

    string  Label      = 1; // utf8-text -- title, name, or primary label
    string  Caption    = 2; // utf8 text -- short synopsis, summary, slogan, or "tagline"
    string  About      = 3; // utf8 text -- amplifying information -- should be a short paragraph or less 
    
    int64   CreatedAt  = 6; // UTC << 16
    int64   ModifiedAt = 7; // UTC << 16  
    
    repeated Tag Tags  = 9; // glyphs, links, literals, pinnable attrs, or attr series references (in a data store) 

}



/*

// ChannelSpec declares the presence of a particular set of attr series that, if pinned, have a particular format and intended usage.
//
// In general, for incoming FeedInfo, a corresponding client pin op, UI tab, and UI sheet (though the sheet may often be hidden or obscured). 
//
// Most streams have 3-4 AttrFeeds:
//      amp.tag.feed.[item.ID]TagTab
//      amp.tag.feed.items.genesis.[]EpochDelta
message ChannelSpec {  // AttrLayer, AttrSheet, AttrBundle, AttrSet

    // Specifies an attr element and/or sequence format. 
    //    e.g. "amp.app.attr.os.EpochDelta" -
    //
    // This value implies an format and interpretation of the data elements in this series and their collective meaning, 
    // and typically invokes particular UI elements that specifically handle or visualize the elements of this series.
    //
    // Any particular format spec can imply the existence of any number of attr series (e.g. an attr that binds particular attr series as columns).
    string              FormatSpec = 2; 
    
    // Specifies an attr usage and/or intention -- e.g. "index"
    // 
    // This can be considered a suffix to the SeriesSpec, and is used to refine UI presentation and behavior as appropriate.
    string              ContextSpec = 3;
    
    // Specifies a specific instance of this format and context spec.
    // 
    // This means the spec that is actually pinned is "{FormatSpec}.{ContextSpec}.{InstanceID}"
    //Tag                 InstanceID = 4;

    // Optional sub collection of feeds also part of this feed - e.g. columns of a spreadsheet
    //repeated Feed       Elements = 9; 
}



// By convention, every cell carries a "amp.feed.genesis.EpochDelta" feed which in turn is a tag.Time series of []EpochDelta.
//    series expressing state for the cell's permissions and the channel catalog.
message EpochDelta {
    
    // typically 1-4 ops that define default user and permission hive transactions, corresponding permissions tokens, and tag-wide public tokens
    // by convention, the first follows the "constitution rule" where you list things like organization or group mission and offer a purpose.Tag that goes into ore detail about purpose and mission.
    //
    // These essentially sequential edits to a permissions key-value store
    // TagIDs (ops)
    //      "text/amp.tag.epoch.entries.{clear|write}.{admin|commons|group}"
    //      "text/amp.tag.epoch.entries.{clear|write}.{admin|commons|group}"
    repeated Tag        PermissionsOps = 2;
    
    repeated string     ChannelSpecs = 4;
    repeated FeedInfo   RemoveFeeds = 5;

}


























The U.S.C Social Experiment
 - people "vote" on what they want
 - we're making a voting os app -- invoke blockchains

-- there were penned as  channels, but the actual pb declarations are update elements.
-- suffix ideas: Rev, Delta, Op, Tx, Item, Entry, Edit
*/
message Ballot {

}


message NotesEntry {

}


//  "amp.tag.spec.talk.spec.message"
message ChatEntry {
    
}

message SpreadsheetEntry {
    // SI is QSR
    // 
}


message SpatialPlacement {
    // SI: coord
    // ElemType: tag.ID (where tag is CellID or is a hard asset ref)
    
 	// Expresses the position of this placement in space.
	// The coordinate system is specified within (or implied) from the hosting attribute spec.
	// Here's to the 3 domains that reflect completeness: alpha (finite), omega (unending), and the inaccessible cardinal(s) -- https://www.youtube.com/watch?v=SrU9YDoXE88
    double  Pos0   = 1;
    double  Pos1   = 2;
    double  Pos2   = 3;
    
	// Expresses the scale of this Node.
	// If all three values are 0, they are all implicitly 1.
	// If Scale2 or Scale3 == 0, then they are each implicitly Scale1.
	float   Scale0 = 4;
	float   Scale1 = 5;
	float   Scale2 = 6;
	
	// Expresses the orientation of this placement using Euler angles.
	float   EulerX = 7;
	float   EulerY = 8;
	float   EulerZ = 9;

}



message TagPlayableMedia {

    // Elem type is PlayableMedia

}

message TagPlaylist {

}








// CryptoKitID identifies an encryption suite that implements ski.CryptoKit
enum CryptoKitID {
    CryptoKit_Nil             = 0;
    CryptoKit_SecretBox_NaCl  = 100;
    CryptoKit_AsymMsg_NaCl    = 101;
    CryptoKit_Signing_NaCl    = 102;
    CryptoKit_Signing_ED25519 = 202;

}

message CryptoKey {
    CryptoKitID         CryptoKitID     = 1;
    bytes               KeyBytes        = 4;
}



// AuthToken is an oauth token -- see oauth2.Token
message AuthToken {
    string              AccessToken  = 1;
    string              TokenType    = 2;
    string              RefreshToken = 3;
    int64               Expiry       = 4; // Unix UTC
}

/*

message LabelAttr {
    string              Main            = 1;
    string              Subtext         = 2;
}
message SwitchAttr {
    string              Label           = 1;
    string              About           = 2;
    bool                Enabled         = 2;
}
    
message EditableTextAttr {
    string              Label           = 1;
    string              About           = 2;
    string              Content         = 3;
    int                 Flags           = 4;
}
    
    */



message TRS {

    enum VisualScaleMode {
        AutoScale  = 0;
        FixedScale = 1;
    }
    
    // X1, X2, and X3 are coordinates or values expressed in any unit.
    // A channel client can later declare how to interpret these coordinates so that a channel server and provide indexed services.
    // Shoutout to the 3 domains that reflect all theoretical completeness: alpha (finite), omega (unending), and the inaccessible cardinal(s).
    // Special thanks to Michael at Vsauce: https://www.youtube.com/watch?v=SrU9YDoXE88
    double              X1                          = 41;
    double              X2                          = 42;
    double              X3                          = 43;
    
    // Specifies how scale dynamically changes based on observer position.
    VisualScaleMode     ScaleMode                   = 50;
    
    // Scale1..3 express the scale of this placement.
    // If all three values are 0, they are all implicitly 1.
    // If Scale2 or Scale3 == 0, then it is implicitly Scale1.
    float               Scale1                      = 51;
    float               Scale2                      = 52;
    float               Scale3                      = 53;

    // Rotate1 - Rotate3 the orientation of this placement using Euler angles.
    float               Rotate1                     = 61;
    float               Rotate2                     = 62;
    float               Rotate3                     = 63;
                
}






message DataSegment {


    uint64              ByteOfs = 5;
    uint64              ByteSz = 6;
    bytes               InlineData = 7;
    string              StreamURI  = 9;
    
    int64               BlobID = 10;


}







// ErrCode expresses status and error codes.
enum ErrCode {
    ErrCode_NoErr                       = 0;

    ErrCode_UnnamedErr                  = 5000;
    ErrCode_InternalErr                 = 5001;
    ErrCode_UnsupportedOp               = 5002;
    ErrCode_Unimplemented               = 5003;
    ErrCode_Timeout                     = 5004;
    ErrCode_ShuttingDown                = 5005;
    ErrCode_NotConnected                = 5006;
    ErrCode_AuthFailed                  = 5007;
    ErrCode_LoginFailed                 = 5008;
    ErrCode_SessionExpired              = 5009;
    
    ErrCode_RequestNotFound             = 5010;
    ErrCode_RequestClosed               = 5011;
    ErrCode_BadRequest                  = 5020;
    ErrCode_InvalidURI                  = 5021;
    ErrCode_BadValue                    = 5022;
    ErrCode_InvalidTag                  = 5023;
    ErrCode_InvalidTagSpec              = 5024;
    ErrCode_AttrNotFound                = 5029;
    ErrCode_NothingToCommit             = 5030;
    ErrCode_CommitFailed                = 5031;
    ErrCode_PlanetNotFound              = 5032;
    ErrCode_PlanetFailure               = 5033;
    ErrCode_AppNotFound                 = 5034;
    ErrCode_MalformedTx                 = 5040;

    ErrCode_BadSchema                   = 5052;
    ErrCode_DataFailure                 = 5053;
    ErrCode_ExportErr                   = 5054;
    ErrCode_PinFailed                   = 5055;
    ErrCode_CellNotFound                = 5058;
    ErrCode_ProviderErr                 = 5059;
    
    ErrCode_ViolatesAppendOnly          = 5100;
    ErrCode_InsufficientPermissions     = 5101;
}

enum LogLevel {
    LogLevel_Error = 0;
    LogLevel_Warn  = 2;
    LogLevel_Info  = 4;
}


// Err is a general purpose error / warning / log message.
message Err {

    // Identifies the type of error.
    ErrCode             Code  = 1;
    
    // Severity level
    LogLevel            Level = 2;
    
    // human-readable info
    string              Msg   = 4;
}