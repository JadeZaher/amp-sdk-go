// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: amp/api.amp.proto

// package amp is an implementation-independent API for a pluggable client-server UI/UX system,
// featuring support and integration for files, media, and communication.

package amp

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Const int32

const (
	Const_Defs Const = 0
	// TIDBinaryLen is the byte size of a Tx ID ("TID"), a hash with a leading big endian binary time index.
	//
	// This allows TIDs to be sorted chronologically, improving catalog (search) efficiency.
	// This facilitates Tx storage and Tx syndication (time-ordered Tx playback).
	// Importantly, a TxID (32 bytes) is has a UTC16 prefix, allowing efficient LSM storage to scale to billions of Txs.
	//
	// Byte layout is designed so that TIDs are sortable by their embedded timestamp:
	//    0:6   - Standard UTC timestamp in unix seconds (big endian)
	//    6:8   - Timestamp fraction (big endian)
	//    8:32  - Signature/hash suffix.
	Const_TIDBinaryLen Const = 32
	// TIDStringLen is the ASCII-compatible string length of a (binary) TID encoded into its base32 form.
	// The encoding used is the geo-hash base32 alphabet, so that even ascii ordinal string comparisons will correctly sort encoded TIDs by time.
	Const_TIDStringLen Const = 52
	// DefaultServicePort  is the default TCP port used to expose amp.Host service.
	Const_DefaultServicePort Const = 5192
	// Byte size and version of a TxMsg encoding -- sizes are little endian
	// A TxHeader has the following layout:
	//   Bytes  00:03 -- TxHeader marker ('amp')
	//          03:04 -- Const_TxHeader_Version
	//          04:08 -- TxMsg body size: header + serialized TxOp(s)
	//          08:12 -- TxMsg.DataStore size
	//          12:16 -- Reserved
	Const_TxHeader_Size Const = 16
	// Version of the TxHeader -- first byte
	Const_TxHeader_Version Const = 51
	// The first byte of the TxHeader is the header size and version and
	// the following 3 bytes of a serialized TxMsg ("amp")
	Const_TxHeader_Marker Const = 6385008
)

var Const_name = map[int32]string{
	0:       "Const_Defs",
	32:      "Const_TIDBinaryLen",
	52:      "Const_TIDStringLen",
	5192:    "Const_DefaultServicePort",
	16:      "Const_TxHeader_Size",
	51:      "Const_TxHeader_Version",
	6385008: "Const_TxHeader_Marker",
}

var Const_value = map[string]int32{
	"Const_Defs":               0,
	"Const_TIDBinaryLen":       32,
	"Const_TIDStringLen":       52,
	"Const_DefaultServicePort": 5192,
	"Const_TxHeader_Size":      16,
	"Const_TxHeader_Version":   51,
	"Const_TxHeader_Marker":    6385008,
}

func (Const) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{0}
}

// TxOpCode specifies a particular cell transaction operation.
type TxOpCode int32

const (
	TxOpCode_Nil        TxOpCode = 0
	TxOpCode_MetaAttr   TxOpCode = 1
	TxOpCode_UpsertAttr TxOpCode = 2
	TxOpCode_RemoveAttr TxOpCode = 4
	TxOpCode_RemoveCell TxOpCode = 16
)

var TxOpCode_name = map[int32]string{
	0:  "TxOpCode_Nil",
	1:  "TxOpCode_MetaAttr",
	2:  "TxOpCode_UpsertAttr",
	4:  "TxOpCode_RemoveAttr",
	16: "TxOpCode_RemoveCell",
}

var TxOpCode_value = map[string]int32{
	"TxOpCode_Nil":        0,
	"TxOpCode_MetaAttr":   1,
	"TxOpCode_UpsertAttr": 2,
	"TxOpCode_RemoveAttr": 4,
	"TxOpCode_RemoveCell": 16,
}

func (TxOpCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{1}
}

// TxBody contains a max number of uint64 fields usable for any purpose.
type TxField int32

const (
	TxField_0          TxField = 0
	TxField_MaxFields  TxField = 24
	TxField_TargetIDx0 TxField = 1
	TxField_TargetIDx1 TxField = 2
	TxField_TargetIDx2 TxField = 3
	TxField_AttrID_0   TxField = 4
	TxField_AttrID_1   TxField = 5
	TxField_AttrID_2   TxField = 6
	TxField_SI_0       TxField = 10
	TxField_SI_1       TxField = 11
	TxField_SI_2       TxField = 12
	TxField_Hash       TxField = 13
)

var TxField_name = map[int32]string{
	0:  "TxField_0",
	24: "TxField_MaxFields",
	1:  "TxField_TargetIDx0",
	2:  "TxField_TargetIDx1",
	3:  "TxField_TargetIDx2",
	4:  "TxField_AttrID_0",
	5:  "TxField_AttrID_1",
	6:  "TxField_AttrID_2",
	10: "TxField_SI_0",
	11: "TxField_SI_1",
	12: "TxField_SI_2",
	13: "TxField_Hash",
}

var TxField_value = map[string]int32{
	"TxField_0":          0,
	"TxField_MaxFields":  24,
	"TxField_TargetIDx0": 1,
	"TxField_TargetIDx1": 2,
	"TxField_TargetIDx2": 3,
	"TxField_AttrID_0":   4,
	"TxField_AttrID_1":   5,
	"TxField_AttrID_2":   6,
	"TxField_SI_0":       10,
	"TxField_SI_1":       11,
	"TxField_SI_2":       12,
	"TxField_Hash":       13,
}

func (TxField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{2}
}

type SelectOp int32

const (
	SelectOp_Neutral SelectOp = 0
	SelectOp_Include SelectOp = 1
	SelectOp_Exclude SelectOp = 2
)

var SelectOp_name = map[int32]string{
	0: "SelectOp_Neutral",
	1: "SelectOp_Include",
	2: "SelectOp_Exclude",
}

var SelectOp_value = map[string]int32{
	"SelectOp_Neutral": 0,
	"SelectOp_Include": 1,
	"SelectOp_Exclude": 2,
}

func (SelectOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{3}
}

// ReqStatus allows a sender to express the status of a request.
type ReqStatus int32

const (
	// The request is in the process of being formed
	ReqStatus_NotStarted ReqStatus = 0
	// Denotes that the request is in progress.
	ReqStatus_Syncing ReqStatus = 1
	// Sent by the host to signal that this ReqID up to date and the client state is stable / synchronized.
	// This generally drives UI updates or other aggregate cell dependencies.
	ReqStatus_Synced ReqStatus = 2
	// From the client to host, this signals to close / cancel the op associated with ReqID.
	// From the host to client, this signals that the given request ID has been closed / discarded.
	ReqStatus_Closed ReqStatus = 3
)

var ReqStatus_name = map[int32]string{
	0: "ReqStatus_NotStarted",
	1: "ReqStatus_Syncing",
	2: "ReqStatus_Synced",
	3: "ReqStatus_Closed",
}

var ReqStatus_value = map[string]int32{
	"ReqStatus_NotStarted": 0,
	"ReqStatus_Syncing":    1,
	"ReqStatus_Synced":     2,
	"ReqStatus_Closed":     3,
}

func (ReqStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{4}
}

//
//message TagSpec {
//
//// Composite tag expression syntax
////       TagSpec := "[{utf8_tag}[.:/\]*]*{utf8_ElemTypeDesc} ""
////
//// Note how a tag spec with no delimeters is a pure element type descriptor (and AttrSpecID == ElemSpecID)
//string              AsCanonic = 1;
//
//// Tag of AsCanonicString.
//int64               TagSpecIDx0 = 3;
//fixed64             TagSpecIDx1 = 4;
//fixed64             TagSpecIDx2 = 5;
//
//
//// Tag of "{ElemTypeDesc}"
//int64               ElemSpecIDx0 = 6;
//fixed64             ElemSpecIDx1 = 7;
//fixed64             ElemSpecIDx2 = 8;
//
//}
type PinFlags int32

const (
	PinFlags_None PinFlags = 0
	// If set, Pin.ServeState() causes this request (PinContext) to automatically close once state is pushed and synchronized.
	// Otherwise, the request remains open and the client will receive any state updates until closed.
	// This is useful when only a snapshot of the cell is needed.
	PinFlags_CloseOnSync PinFlags = 4
	// If set, a pinned cell will not send any state updates to the client.
	// This is useful when only writing to a cell and no state updates are needed.
	PinFlags_NoSync PinFlags = 8
)

var PinFlags_name = map[int32]string{
	0: "PinFlags_None",
	4: "PinFlags_CloseOnSync",
	8: "PinFlags_NoSync",
}

var PinFlags_value = map[string]int32{
	"PinFlags_None":        0,
	"PinFlags_CloseOnSync": 4,
	"PinFlags_NoSync":      8,
}

func (PinFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{5}
}

// CordType describes how to interpret coordinates contained in a Position.
type CordType int32

const (
	CordType_Unspecified     CordType = 0
	CordType_Ordered         CordType = 1
	CordType_Plane_Cartesian CordType = 5
	CordType_Plane_HexEvenR  CordType = 6
	CordType_Geoid_Sphere    CordType = 10
	CordType_Geoid_WGS84     CordType = 11
)

var CordType_name = map[int32]string{
	0:  "CordType_Unspecified",
	1:  "CordType_Ordered",
	5:  "CordType_Plane_Cartesian",
	6:  "CordType_Plane_HexEvenR",
	10: "CordType_Geoid_Sphere",
	11: "CordType_Geoid_WGS84",
}

var CordType_value = map[string]int32{
	"CordType_Unspecified":     0,
	"CordType_Ordered":         1,
	"CordType_Plane_Cartesian": 5,
	"CordType_Plane_HexEvenR":  6,
	"CordType_Geoid_Sphere":    10,
	"CordType_Geoid_WGS84":     11,
}

func (CordType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{6}
}

type Enable int32

const (
	Enable_LatentOff Enable = 0
	Enable_LatentOn  Enable = 1
	Enable_ActiveOn  Enable = 2
	Enable_ActiveOff Enable = 3
)

var Enable_name = map[int32]string{
	0: "Enable_LatentOff",
	1: "Enable_LatentOn",
	2: "Enable_ActiveOn",
	3: "Enable_ActiveOff",
}

var Enable_value = map[string]int32{
	"Enable_LatentOff": 0,
	"Enable_LatentOn":  1,
	"Enable_ActiveOn":  2,
	"Enable_ActiveOff": 3,
}

func (Enable) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{7}
}

type UrlScheme int32

const (
	UrlScheme_Nil  UrlScheme = 0
	UrlScheme_Data UrlScheme = 1
	UrlScheme_Amp  UrlScheme = 2
	UrlScheme_File UrlScheme = 3
	UrlScheme_Http UrlScheme = 4
)

var UrlScheme_name = map[int32]string{
	0: "UrlScheme_Nil",
	1: "UrlScheme_Data",
	2: "UrlScheme_Amp",
	3: "UrlScheme_File",
	4: "UrlScheme_Http",
}

var UrlScheme_value = map[string]int32{
	"UrlScheme_Nil":  0,
	"UrlScheme_Data": 1,
	"UrlScheme_Amp":  2,
	"UrlScheme_File": 3,
	"UrlScheme_Http": 4,
}

func (UrlScheme) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{8}
}

type Metric int32

const (
	Metric_Nil                           Metric = 0
	Metric_OrthoPixel                    Metric = 1
	Metric_OrthoMillimeter               Metric = 2
	Metric_HexGridMillimeter             Metric = 3
	Metric_TrapezoDodecahedronMillimeter Metric = 4
)

var Metric_name = map[int32]string{
	0: "Metric_Nil",
	1: "Metric_OrthoPixel",
	2: "Metric_OrthoMillimeter",
	3: "Metric_HexGridMillimeter",
	4: "Metric_TrapezoDodecahedronMillimeter",
}

var Metric_value = map[string]int32{
	"Metric_Nil":                           0,
	"Metric_OrthoPixel":                    1,
	"Metric_OrthoMillimeter":               2,
	"Metric_HexGridMillimeter":             3,
	"Metric_TrapezoDodecahedronMillimeter": 4,
}

func (Metric) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{9}
}

// CryptoKitID identifies an encryption suite that implements ski.CryptoKit
type CryptoKitID int32

const (
	CryptoKit_Nil             CryptoKitID = 0
	CryptoKit_SecretBox_NaCl  CryptoKitID = 100
	CryptoKit_AsymMsg_NaCl    CryptoKitID = 101
	CryptoKit_Signing_NaCl    CryptoKitID = 102
	CryptoKit_Signing_ED25519 CryptoKitID = 202
)

var CryptoKitID_name = map[int32]string{
	0:   "CryptoKit_Nil",
	100: "CryptoKit_SecretBox_NaCl",
	101: "CryptoKit_AsymMsg_NaCl",
	102: "CryptoKit_Signing_NaCl",
	202: "CryptoKit_Signing_ED25519",
}

var CryptoKitID_value = map[string]int32{
	"CryptoKit_Nil":             0,
	"CryptoKit_SecretBox_NaCl":  100,
	"CryptoKit_AsymMsg_NaCl":    101,
	"CryptoKit_Signing_NaCl":    102,
	"CryptoKit_Signing_ED25519": 202,
}

func (CryptoKitID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{10}
}

// ErrCode expresses status and error codes.
type ErrCode int32

const (
	ErrCode_NoErr                   ErrCode = 0
	ErrCode_UnnamedErr              ErrCode = 5000
	ErrCode_InternalErr             ErrCode = 5001
	ErrCode_UnsupportedOp           ErrCode = 5002
	ErrCode_Unimplemented           ErrCode = 5003
	ErrCode_Timeout                 ErrCode = 5004
	ErrCode_ShuttingDown            ErrCode = 5005
	ErrCode_NotConnected            ErrCode = 5006
	ErrCode_AuthFailed              ErrCode = 5007
	ErrCode_LoginFailed             ErrCode = 5008
	ErrCode_SessionExpired          ErrCode = 5009
	ErrCode_ReqNotFound             ErrCode = 5010
	ErrCode_InvalidReq              ErrCode = 5020
	ErrCode_InvalidURI              ErrCode = 5021
	ErrCode_BadValue                ErrCode = 5022
	ErrCode_InvalidTag              ErrCode = 5023
	ErrCode_InvalidTagSpec          ErrCode = 5024
	ErrCode_NothingToCommit         ErrCode = 5030
	ErrCode_CommitFailed            ErrCode = 5031
	ErrCode_PlanetNotFound          ErrCode = 5032
	ErrCode_PlanetFailure           ErrCode = 5033
	ErrCode_AppNotFound             ErrCode = 5034
	ErrCode_DefNotFound             ErrCode = 5036
	ErrCode_MalformedTx             ErrCode = 5040
	ErrCode_TypeNotFound            ErrCode = 5050
	ErrCode_TypeNotRegistered       ErrCode = 5051
	ErrCode_BadSchema               ErrCode = 5052
	ErrCode_DataFailure             ErrCode = 5053
	ErrCode_ExportErr               ErrCode = 5054
	ErrCode_PinFailed               ErrCode = 5055
	ErrCode_PinContextClosed        ErrCode = 5056
	ErrCode_CellNotFound            ErrCode = 5058
	ErrCode_ProviderErr             ErrCode = 5059
	ErrCode_ViolatesAppendOnly      ErrCode = 5100
	ErrCode_InsufficientPermissions ErrCode = 5101
)

var ErrCode_name = map[int32]string{
	0:    "ErrCode_NoErr",
	5000: "ErrCode_UnnamedErr",
	5001: "ErrCode_InternalErr",
	5002: "ErrCode_UnsupportedOp",
	5003: "ErrCode_Unimplemented",
	5004: "ErrCode_Timeout",
	5005: "ErrCode_ShuttingDown",
	5006: "ErrCode_NotConnected",
	5007: "ErrCode_AuthFailed",
	5008: "ErrCode_LoginFailed",
	5009: "ErrCode_SessionExpired",
	5010: "ErrCode_ReqNotFound",
	5020: "ErrCode_InvalidReq",
	5021: "ErrCode_InvalidURI",
	5022: "ErrCode_BadValue",
	5023: "ErrCode_InvalidTag",
	5024: "ErrCode_InvalidTagSpec",
	5030: "ErrCode_NothingToCommit",
	5031: "ErrCode_CommitFailed",
	5032: "ErrCode_PlanetNotFound",
	5033: "ErrCode_PlanetFailure",
	5034: "ErrCode_AppNotFound",
	5036: "ErrCode_DefNotFound",
	5040: "ErrCode_MalformedTx",
	5050: "ErrCode_TypeNotFound",
	5051: "ErrCode_TypeNotRegistered",
	5052: "ErrCode_BadSchema",
	5053: "ErrCode_DataFailure",
	5054: "ErrCode_ExportErr",
	5055: "ErrCode_PinFailed",
	5056: "ErrCode_PinContextClosed",
	5058: "ErrCode_CellNotFound",
	5059: "ErrCode_ProviderErr",
	5100: "ErrCode_ViolatesAppendOnly",
	5101: "ErrCode_InsufficientPermissions",
}

var ErrCode_value = map[string]int32{
	"ErrCode_NoErr":                   0,
	"ErrCode_UnnamedErr":              5000,
	"ErrCode_InternalErr":             5001,
	"ErrCode_UnsupportedOp":           5002,
	"ErrCode_Unimplemented":           5003,
	"ErrCode_Timeout":                 5004,
	"ErrCode_ShuttingDown":            5005,
	"ErrCode_NotConnected":            5006,
	"ErrCode_AuthFailed":              5007,
	"ErrCode_LoginFailed":             5008,
	"ErrCode_SessionExpired":          5009,
	"ErrCode_ReqNotFound":             5010,
	"ErrCode_InvalidReq":              5020,
	"ErrCode_InvalidURI":              5021,
	"ErrCode_BadValue":                5022,
	"ErrCode_InvalidTag":              5023,
	"ErrCode_InvalidTagSpec":          5024,
	"ErrCode_NothingToCommit":         5030,
	"ErrCode_CommitFailed":            5031,
	"ErrCode_PlanetNotFound":          5032,
	"ErrCode_PlanetFailure":           5033,
	"ErrCode_AppNotFound":             5034,
	"ErrCode_DefNotFound":             5036,
	"ErrCode_MalformedTx":             5040,
	"ErrCode_TypeNotFound":            5050,
	"ErrCode_TypeNotRegistered":       5051,
	"ErrCode_BadSchema":               5052,
	"ErrCode_DataFailure":             5053,
	"ErrCode_ExportErr":               5054,
	"ErrCode_PinFailed":               5055,
	"ErrCode_PinContextClosed":        5056,
	"ErrCode_CellNotFound":            5058,
	"ErrCode_ProviderErr":             5059,
	"ErrCode_ViolatesAppendOnly":      5100,
	"ErrCode_InsufficientPermissions": 5101,
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{11}
}

type LogLevel int32

const (
	LogLevel_Error LogLevel = 0
	LogLevel_Warn  LogLevel = 2
	LogLevel_Info  LogLevel = 4
)

var LogLevel_name = map[int32]string{
	0: "LogLevel_Error",
	2: "LogLevel_Warn",
	4: "LogLevel_Info",
}

var LogLevel_value = map[string]int32{
	"LogLevel_Error": 0,
	"LogLevel_Warn":  2,
	"LogLevel_Info":  4,
}

func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{12}
}

type TRS_VisualScaleMode int32

const (
	AutoScale  TRS_VisualScaleMode = 0
	FixedScale TRS_VisualScaleMode = 1
)

var TRS_VisualScaleMode_name = map[int32]string{
	0: "AutoScale",
	1: "FixedScale",
}

var TRS_VisualScaleMode_value = map[string]int32{
	"AutoScale":  0,
	"FixedScale": 1,
}

func (TRS_VisualScaleMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{24, 0}
}

// TxInfo contains information for a TxMsg
type TxInfo struct {
	// communicates request status / completion.
	Status ReqStatus `protobuf:"varint,2,opt,name=Status,proto3,enum=amp.ReqStatus" json:"Status,omitempty"`
	// The number of TxOps in this TxMsg.
	NumOps uint64 `protobuf:"varint,4,opt,name=NumOps,proto3" json:"NumOps,omitempty"`
	// A globally unique Tag at when this Tx was created.
	GenesisID_0 int64  `protobuf:"varint,7,opt,name=GenesisID_0,json=GenesisID0,proto3" json:"GenesisID_0,omitempty"`
	GenesisID_1 uint64 `protobuf:"fixed64,8,opt,name=GenesisID_1,json=GenesisID1,proto3" json:"GenesisID_1,omitempty"`
	GenesisID_2 uint64 `protobuf:"fixed64,9,opt,name=GenesisID_2,json=GenesisID2,proto3" json:"GenesisID_2,omitempty"`
	// Identifies an originating / requesting / associated client or listener.
	ContextID_0 int64  `protobuf:"varint,10,opt,name=ContextID_0,json=ContextID0,proto3" json:"ContextID_0,omitempty"`
	ContextID_1 uint64 `protobuf:"fixed64,11,opt,name=ContextID_1,json=ContextID1,proto3" json:"ContextID_1,omitempty"`
	ContextID_2 uint64 `protobuf:"fixed64,12,opt,name=ContextID_2,json=ContextID2,proto3" json:"ContextID_2,omitempty"`
}

func (m *TxInfo) Reset()      { *m = TxInfo{} }
func (*TxInfo) ProtoMessage() {}
func (*TxInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{0}
}
func (m *TxInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxInfo.Merge(m, src)
}
func (m *TxInfo) XXX_Size() int {
	return m.Size()
}
func (m *TxInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TxInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TxInfo proto.InternalMessageInfo

func (m *TxInfo) GetStatus() ReqStatus {
	if m != nil {
		return m.Status
	}
	return ReqStatus_NotStarted
}

func (m *TxInfo) GetNumOps() uint64 {
	if m != nil {
		return m.NumOps
	}
	return 0
}

func (m *TxInfo) GetGenesisID_0() int64 {
	if m != nil {
		return m.GenesisID_0
	}
	return 0
}

func (m *TxInfo) GetGenesisID_1() uint64 {
	if m != nil {
		return m.GenesisID_1
	}
	return 0
}

func (m *TxInfo) GetGenesisID_2() uint64 {
	if m != nil {
		return m.GenesisID_2
	}
	return 0
}

func (m *TxInfo) GetContextID_0() int64 {
	if m != nil {
		return m.ContextID_0
	}
	return 0
}

func (m *TxInfo) GetContextID_1() uint64 {
	if m != nil {
		return m.ContextID_1
	}
	return 0
}

func (m *TxInfo) GetContextID_2() uint64 {
	if m != nil {
		return m.ContextID_2
	}
	return 0
}

// Login -- STEP 1: client -> host
type Login struct {
	// A byte string identifying user who is logging in (lot limited to UTF8)
	// This is typically a username or a persistent Tag issued by the device OS when the app is (re)installed.
	UserUID string `protobuf:"bytes,1,opt,name=UserUID,proto3" json:"UserUID,omitempty"`
	// HostAddr is network address of the server known to the client (e.g. IP address, localhost, domain name, etc)
	// archost uses this to as the host name when serving URLs for the client to consume.
	HostAddr    string `protobuf:"bytes,2,opt,name=HostAddr,proto3" json:"HostAddr,omitempty"`
	DeviceLabel string `protobuf:"bytes,8,opt,name=DeviceLabel,proto3" json:"DeviceLabel,omitempty"`
	DeviceUID   string `protobuf:"bytes,9,opt,name=DeviceUID,proto3" json:"DeviceUID,omitempty"`
	// Current or previous checkpoint -- optional
	Checkpoint *AuthCheckpoint `protobuf:"bytes,10,opt,name=Checkpoint,proto3" json:"Checkpoint,omitempty"`
}

func (m *Login) Reset()      { *m = Login{} }
func (*Login) ProtoMessage() {}
func (*Login) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{1}
}
func (m *Login) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Login) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Login.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Login) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Login.Merge(m, src)
}
func (m *Login) XXX_Size() int {
	return m.Size()
}
func (m *Login) XXX_DiscardUnknown() {
	xxx_messageInfo_Login.DiscardUnknown(m)
}

var xxx_messageInfo_Login proto.InternalMessageInfo

func (m *Login) GetUserUID() string {
	if m != nil {
		return m.UserUID
	}
	return ""
}

func (m *Login) GetHostAddr() string {
	if m != nil {
		return m.HostAddr
	}
	return ""
}

func (m *Login) GetDeviceLabel() string {
	if m != nil {
		return m.DeviceLabel
	}
	return ""
}

func (m *Login) GetDeviceUID() string {
	if m != nil {
		return m.DeviceUID
	}
	return ""
}

func (m *Login) GetCheckpoint() *AuthCheckpoint {
	if m != nil {
		return m.Checkpoint
	}
	return nil
}

// LoginChallenge -- STEP 2: host -> client
type LoginChallenge struct {
	Hash []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *LoginChallenge) Reset()      { *m = LoginChallenge{} }
func (*LoginChallenge) ProtoMessage() {}
func (*LoginChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{2}
}
func (m *LoginChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginChallenge.Merge(m, src)
}
func (m *LoginChallenge) XXX_Size() int {
	return m.Size()
}
func (m *LoginChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_LoginChallenge proto.InternalMessageInfo

func (m *LoginChallenge) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// LoginResponse -- STEP 3: client -> host
type LoginResponse struct {
	HashResponse []byte `protobuf:"bytes,1,opt,name=HashResponse,proto3" json:"HashResponse,omitempty"`
}

func (m *LoginResponse) Reset()      { *m = LoginResponse{} }
func (*LoginResponse) ProtoMessage() {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{3}
}
func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(m, src)
}
func (m *LoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

func (m *LoginResponse) GetHashResponse() []byte {
	if m != nil {
		return m.HashResponse
	}
	return nil
}

// AuthCheckpoint  -- STEP 4: host -> client
type AuthCheckpoint struct {
	Token      string   `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	SessionTag *TagAttr `protobuf:"bytes,10,opt,name=SessionTag,proto3" json:"SessionTag,omitempty"`
	MemberTag  *TagAttr `protobuf:"bytes,11,opt,name=MemberTag,proto3" json:"MemberTag,omitempty"`
	// List of available channel types that a host emits at runtime so a client knows what kind of channel types are available.
	HomeFeed *TagAttr `protobuf:"bytes,9,opt,name=HomeFeed,proto3" json:"HomeFeed,omitempty"`
}

func (m *AuthCheckpoint) Reset()      { *m = AuthCheckpoint{} }
func (*AuthCheckpoint) ProtoMessage() {}
func (*AuthCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{4}
}
func (m *AuthCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthCheckpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthCheckpoint.Merge(m, src)
}
func (m *AuthCheckpoint) XXX_Size() int {
	return m.Size()
}
func (m *AuthCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_AuthCheckpoint proto.InternalMessageInfo

func (m *AuthCheckpoint) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *AuthCheckpoint) GetSessionTag() *TagAttr {
	if m != nil {
		return m.SessionTag
	}
	return nil
}

func (m *AuthCheckpoint) GetMemberTag() *TagAttr {
	if m != nil {
		return m.MemberTag
	}
	return nil
}

func (m *AuthCheckpoint) GetHomeFeed() *TagAttr {
	if m != nil {
		return m.HomeFeed
	}
	return nil
}

type HelloWorld struct {
}

func (m *HelloWorld) Reset()      { *m = HelloWorld{} }
func (*HelloWorld) ProtoMessage() {}
func (*HelloWorld) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{5}
}
func (m *HelloWorld) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloWorld) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloWorld.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloWorld) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloWorld.Merge(m, src)
}
func (m *HelloWorld) XXX_Size() int {
	return m.Size()
}
func (m *HelloWorld) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloWorld.DiscardUnknown(m)
}

var xxx_messageInfo_HelloWorld proto.InternalMessageInfo

// HandleURL is used as a meta attribute handle a URL, such as an oauth request (host to client) or an oauth response (client to host).
// TODO: make just a uniquely named Link
type HandleURL struct {
	URL string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (m *HandleURL) Reset()      { *m = HandleURL{} }
func (*HandleURL) ProtoMessage() {}
func (*HandleURL) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{6}
}
func (m *HandleURL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HandleURL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HandleURL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HandleURL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandleURL.Merge(m, src)
}
func (m *HandleURL) XXX_Size() int {
	return m.Size()
}
func (m *HandleURL) XXX_DiscardUnknown() {
	xxx_messageInfo_HandleURL.DiscardUnknown(m)
}

var xxx_messageInfo_HandleURL proto.InternalMessageInfo

func (m *HandleURL) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

// Requests the creation of a new feed template (attr streams) to be pinned (or half-duplex channel) on the given cell / tag, returning CellInfo allowing new channels to be added to it.
// By convention, every cell carries a "amp.feed.genesis.TagEpoch" feed which in turn is a tag.Time series of []TagEpoch.
//    series expressing state for the cell's permissions and the channel catalog.
type FeedGenesis struct {
	MintToTarget *TagAttr `protobuf:"bytes,1,opt,name=MintToTarget,proto3" json:"MintToTarget,omitempty"`
	// Attribute specs to subscribe to.
	MintInstance []*TagFeed `protobuf:"bytes,2,rep,name=MintInstance,proto3" json:"MintInstance,omitempty"`
}

func (m *FeedGenesis) Reset()      { *m = FeedGenesis{} }
func (*FeedGenesis) ProtoMessage() {}
func (*FeedGenesis) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{7}
}
func (m *FeedGenesis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedGenesis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedGenesis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedGenesis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedGenesis.Merge(m, src)
}
func (m *FeedGenesis) XXX_Size() int {
	return m.Size()
}
func (m *FeedGenesis) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedGenesis.DiscardUnknown(m)
}

var xxx_messageInfo_FeedGenesis proto.InternalMessageInfo

func (m *FeedGenesis) GetMintToTarget() *TagAttr {
	if m != nil {
		return m.MintToTarget
	}
	return nil
}

func (m *FeedGenesis) GetMintInstance() []*TagFeed {
	if m != nil {
		return m.MintInstance
	}
	return nil
}

// PinRequest is a client request to "pin" a cell, meaning selected attrs and child cells will be pushed to the client.
type PinRequest struct {
	PinURL *TagAttr `protobuf:"bytes,1,opt,name=PinURL,proto3" json:"PinURL,omitempty"`
	// The {cell tag.ID}{attr tag.ID} to sync / pin / send.
	SyncAttrs []*TagAttr `protobuf:"bytes,7,rep,name=SyncAttrs,proto3" json:"SyncAttrs,omitempty"`
	// Bit options for this request.
	Flags PinFlags `protobuf:"varint,10,opt,name=Flags,proto3,enum=amp.PinFlags" json:"Flags,omitempty"`
	// Delimited list of "semi-ordered" tags to filter the pinned cell.
	// ((:/\.\|)*{(-_\|\w)+})+
	TagQueryExpr string `protobuf:"bytes,16,opt,name=TagQueryExpr,proto3" json:"TagQueryExpr,omitempty"`
}

func (m *PinRequest) Reset()      { *m = PinRequest{} }
func (*PinRequest) ProtoMessage() {}
func (*PinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{8}
}
func (m *PinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PinRequest.Merge(m, src)
}
func (m *PinRequest) XXX_Size() int {
	return m.Size()
}
func (m *PinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PinRequest proto.InternalMessageInfo

func (m *PinRequest) GetPinURL() *TagAttr {
	if m != nil {
		return m.PinURL
	}
	return nil
}

func (m *PinRequest) GetSyncAttrs() []*TagAttr {
	if m != nil {
		return m.SyncAttrs
	}
	return nil
}

func (m *PinRequest) GetFlags() PinFlags {
	if m != nil {
		return m.Flags
	}
	return PinFlags_None
}

func (m *PinRequest) GetTagQueryExpr() string {
	if m != nil {
		return m.TagQueryExpr
	}
	return ""
}

// Position describes a position in space and/or time using a given coordinate system.
type Position struct {
	CordType CordType `protobuf:"varint,1,opt,name=CordType,proto3,enum=amp.CordType" json:"CordType,omitempty"`
	U        float64  `protobuf:"fixed64,3,opt,name=U,proto3" json:"U,omitempty"`
	V        float64  `protobuf:"fixed64,4,opt,name=V,proto3" json:"V,omitempty"`
	W        float64  `protobuf:"fixed64,5,opt,name=W,proto3" json:"W,omitempty"`
	ROU      float32  `protobuf:"fixed32,6,opt,name=ROU,proto3" json:"ROU,omitempty"`
}

func (m *Position) Reset()      { *m = Position{} }
func (*Position) ProtoMessage() {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{9}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetCordType() CordType {
	if m != nil {
		return m.CordType
	}
	return CordType_Unspecified
}

func (m *Position) GetU() float64 {
	if m != nil {
		return m.U
	}
	return 0
}

func (m *Position) GetV() float64 {
	if m != nil {
		return m.V
	}
	return 0
}

func (m *Position) GetW() float64 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *Position) GetROU() float32 {
	if m != nil {
		return m.ROU
	}
	return 0
}

// TagAttr is a multi-use workhorse link where all fields are optional and whose meaning is contextual.
//
// Often used to reference an asset, a Link can reference any resource, a show, project, episode, or XR beacon.
// The tagging naming convention describes a semi-ordered list of UTF tags.
//      As tags first appear when going from left to right in the list, they are considered "more significant" or "higher priority" than tags that appear later.
//      It is up to amp-search-dev-tag-specification to order search results based on tag filters (case sensitive, time ranges, or any UTF8 enum identifier)
//      By convention, tags are case sensitive by default, however there are many filter presets -- This is how people "type or speak search"
//      "Two tag rule" -- if you can think of two or more other tags in an order ranking, then do that instead.
type TagAttr struct {
	// Identifies a specific TagAttrSpec that this Link is an instance of.
	Tag_0 int64  `protobuf:"varint,2,opt,name=Tag_0,json=Tag0,proto3" json:"Tag_0,omitempty"`
	Tag_1 uint64 `protobuf:"fixed64,3,opt,name=Tag_1,json=Tag1,proto3" json:"Tag_1,omitempty"`
	Tag_2 uint64 `protobuf:"fixed64,4,opt,name=Tag_2,json=Tag2,proto3" json:"Tag_2,omitempty"`
	// Identifies an attribute element series type (i.e. a data channel identifier with an implied SI format).
	AttrSpec_0  int64      `protobuf:"varint,5,opt,name=AttrSpec_0,json=AttrSpec0,proto3" json:"AttrSpec_0,omitempty"`
	AttrSpec_1  uint64     `protobuf:"fixed64,6,opt,name=AttrSpec_1,json=AttrSpec1,proto3" json:"AttrSpec_1,omitempty"`
	AttrSpec_2  uint64     `protobuf:"fixed64,7,opt,name=AttrSpec_2,json=AttrSpec2,proto3" json:"AttrSpec_2,omitempty"`
	SI_0        int64      `protobuf:"varint,10,opt,name=SI_0,json=SI0,proto3" json:"SI_0,omitempty"`
	SI_1        uint64     `protobuf:"fixed64,11,opt,name=SI_1,json=SI1,proto3" json:"SI_1,omitempty"`
	SI_2        uint64     `protobuf:"fixed64,12,opt,name=SI_2,json=SI2,proto3" json:"SI_2,omitempty"`
	URL         string     `protobuf:"bytes,13,opt,name=URL,proto3" json:"URL,omitempty"`
	ContentType string     `protobuf:"bytes,14,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	Attachment  []byte     `protobuf:"bytes,15,opt,name=Attachment,proto3" json:"Attachment,omitempty"`
	Metric      Metric     `protobuf:"varint,16,opt,name=Metric,proto3,enum=amp.Metric" json:"Metric,omitempty"`
	Size_0      float64    `protobuf:"fixed64,17,opt,name=Size_0,json=Size0,proto3" json:"Size_0,omitempty"`
	Size_1      float64    `protobuf:"fixed64,18,opt,name=Size_1,json=Size1,proto3" json:"Size_1,omitempty"`
	Size_2      float64    `protobuf:"fixed64,19,opt,name=Size_2,json=Size2,proto3" json:"Size_2,omitempty"`
	SubAttrs    []*TagAttr `protobuf:"bytes,24,rep,name=SubAttrs,proto3" json:"SubAttrs,omitempty"`
}

func (m *TagAttr) Reset()      { *m = TagAttr{} }
func (*TagAttr) ProtoMessage() {}
func (*TagAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{10}
}
func (m *TagAttr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagAttr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagAttr.Merge(m, src)
}
func (m *TagAttr) XXX_Size() int {
	return m.Size()
}
func (m *TagAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_TagAttr.DiscardUnknown(m)
}

var xxx_messageInfo_TagAttr proto.InternalMessageInfo

func (m *TagAttr) GetTag_0() int64 {
	if m != nil {
		return m.Tag_0
	}
	return 0
}

func (m *TagAttr) GetTag_1() uint64 {
	if m != nil {
		return m.Tag_1
	}
	return 0
}

func (m *TagAttr) GetTag_2() uint64 {
	if m != nil {
		return m.Tag_2
	}
	return 0
}

func (m *TagAttr) GetAttrSpec_0() int64 {
	if m != nil {
		return m.AttrSpec_0
	}
	return 0
}

func (m *TagAttr) GetAttrSpec_1() uint64 {
	if m != nil {
		return m.AttrSpec_1
	}
	return 0
}

func (m *TagAttr) GetAttrSpec_2() uint64 {
	if m != nil {
		return m.AttrSpec_2
	}
	return 0
}

func (m *TagAttr) GetSI_0() int64 {
	if m != nil {
		return m.SI_0
	}
	return 0
}

func (m *TagAttr) GetSI_1() uint64 {
	if m != nil {
		return m.SI_1
	}
	return 0
}

func (m *TagAttr) GetSI_2() uint64 {
	if m != nil {
		return m.SI_2
	}
	return 0
}

func (m *TagAttr) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *TagAttr) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *TagAttr) GetAttachment() []byte {
	if m != nil {
		return m.Attachment
	}
	return nil
}

func (m *TagAttr) GetMetric() Metric {
	if m != nil {
		return m.Metric
	}
	return Metric_Nil
}

func (m *TagAttr) GetSize_0() float64 {
	if m != nil {
		return m.Size_0
	}
	return 0
}

func (m *TagAttr) GetSize_1() float64 {
	if m != nil {
		return m.Size_1
	}
	return 0
}

func (m *TagAttr) GetSize_2() float64 {
	if m != nil {
		return m.Size_2
	}
	return 0
}

func (m *TagAttr) GetSubAttrs() []*TagAttr {
	if m != nil {
		return m.SubAttrs
	}
	return nil
}

// TagHeader is a standard attribute for aa UI-visualized 24-byte time-based hashname.
// An amp.App fills in what is appropriate and leaves the rest blank.
type TagTab struct {
	Label      string `protobuf:"bytes,1,opt,name=Label,proto3" json:"Label,omitempty"`
	Caption    string `protobuf:"bytes,2,opt,name=Caption,proto3" json:"Caption,omitempty"`
	About      string `protobuf:"bytes,3,opt,name=About,proto3" json:"About,omitempty"`
	CreatedAt  int64  `protobuf:"varint,8,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ModifiedAt int64  `protobuf:"varint,9,opt,name=ModifiedAt,proto3" json:"ModifiedAt,omitempty"`
	// Any URL or binary (tag) address to open / pin
	// E.g. if 'amp://...', this denotes a pinnable URL -- but could be any pinnable URL: ipfs://, https://, ...
	Link *TagAttr `protobuf:"bytes,20,opt,name=Link,proto3" json:"Link,omitempty"`
}

func (m *TagTab) Reset()      { *m = TagTab{} }
func (*TagTab) ProtoMessage() {}
func (*TagTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{11}
}
func (m *TagTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagTab.Merge(m, src)
}
func (m *TagTab) XXX_Size() int {
	return m.Size()
}
func (m *TagTab) XXX_DiscardUnknown() {
	xxx_messageInfo_TagTab.DiscardUnknown(m)
}

var xxx_messageInfo_TagTab proto.InternalMessageInfo

func (m *TagTab) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *TagTab) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *TagTab) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *TagTab) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *TagTab) GetModifiedAt() int64 {
	if m != nil {
		return m.ModifiedAt
	}
	return 0
}

func (m *TagTab) GetLink() *TagAttr {
	if m != nil {
		return m.Link
	}
	return nil
}

// TagFeed is a public channel specification / declaration / definition.
// In general, for incoming TagFeed, a corresponding client pin op, UI tab, and UI sheet (though the sheet may often be hidden or obscured).
//
// Most streams have 3-4 AttrFeeds:
//      amp.tag.feed.[item.ID]TagTab
//      amp.tag.feed.items.genesis.[]TagEpoch
type TagFeed struct {
	App       *TagAttr   `protobuf:"bytes,1,opt,name=App,proto3" json:"App,omitempty"`
	FeedSpec  *TagAttr   `protobuf:"bytes,2,opt,name=FeedSpec,proto3" json:"FeedSpec,omitempty"`
	TabUI     *TagAttr   `protobuf:"bytes,4,opt,name=TabUI,proto3" json:"TabUI,omitempty"`
	SheetUI   *TagAttr   `protobuf:"bytes,5,opt,name=SheetUI,proto3" json:"SheetUI,omitempty"`
	AttrFeeds []*TagAttr `protobuf:"bytes,7,rep,name=AttrFeeds,proto3" json:"AttrFeeds,omitempty"`
	SubFeeds  []*TagFeed `protobuf:"bytes,9,rep,name=SubFeeds,proto3" json:"SubFeeds,omitempty"`
}

func (m *TagFeed) Reset()      { *m = TagFeed{} }
func (*TagFeed) ProtoMessage() {}
func (*TagFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{12}
}
func (m *TagFeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagFeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagFeed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagFeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagFeed.Merge(m, src)
}
func (m *TagFeed) XXX_Size() int {
	return m.Size()
}
func (m *TagFeed) XXX_DiscardUnknown() {
	xxx_messageInfo_TagFeed.DiscardUnknown(m)
}

var xxx_messageInfo_TagFeed proto.InternalMessageInfo

func (m *TagFeed) GetApp() *TagAttr {
	if m != nil {
		return m.App
	}
	return nil
}

func (m *TagFeed) GetFeedSpec() *TagAttr {
	if m != nil {
		return m.FeedSpec
	}
	return nil
}

func (m *TagFeed) GetTabUI() *TagAttr {
	if m != nil {
		return m.TabUI
	}
	return nil
}

func (m *TagFeed) GetSheetUI() *TagAttr {
	if m != nil {
		return m.SheetUI
	}
	return nil
}

func (m *TagFeed) GetAttrFeeds() []*TagAttr {
	if m != nil {
		return m.AttrFeeds
	}
	return nil
}

func (m *TagFeed) GetSubFeeds() []*TagFeed {
	if m != nil {
		return m.SubFeeds
	}
	return nil
}

//
//
//The U.S.C Social Experiment
//- people "vote" on what they want
//- we're making a voting os app -- invoke blockchains
//
type TagBallotBox struct {
}

func (m *TagBallotBox) Reset()      { *m = TagBallotBox{} }
func (*TagBallotBox) ProtoMessage() {}
func (*TagBallotBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{13}
}
func (m *TagBallotBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagBallotBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagBallotBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagBallotBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagBallotBox.Merge(m, src)
}
func (m *TagBallotBox) XXX_Size() int {
	return m.Size()
}
func (m *TagBallotBox) XXX_DiscardUnknown() {
	xxx_messageInfo_TagBallotBox.DiscardUnknown(m)
}

var xxx_messageInfo_TagBallotBox proto.InternalMessageInfo

type TagNotes struct {
}

func (m *TagNotes) Reset()      { *m = TagNotes{} }
func (*TagNotes) ProtoMessage() {}
func (*TagNotes) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{14}
}
func (m *TagNotes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagNotes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagNotes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagNotes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagNotes.Merge(m, src)
}
func (m *TagNotes) XXX_Size() int {
	return m.Size()
}
func (m *TagNotes) XXX_DiscardUnknown() {
	xxx_messageInfo_TagNotes.DiscardUnknown(m)
}

var xxx_messageInfo_TagNotes proto.InternalMessageInfo

//  "amp.tag.spec.talk.spec.message"
type TagChat struct {
}

func (m *TagChat) Reset()      { *m = TagChat{} }
func (*TagChat) ProtoMessage() {}
func (*TagChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{15}
}
func (m *TagChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagChat.Merge(m, src)
}
func (m *TagChat) XXX_Size() int {
	return m.Size()
}
func (m *TagChat) XXX_DiscardUnknown() {
	xxx_messageInfo_TagChat.DiscardUnknown(m)
}

var xxx_messageInfo_TagChat proto.InternalMessageInfo

type TagSpreadsheet struct {
}

func (m *TagSpreadsheet) Reset()      { *m = TagSpreadsheet{} }
func (*TagSpreadsheet) ProtoMessage() {}
func (*TagSpreadsheet) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{16}
}
func (m *TagSpreadsheet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagSpreadsheet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagSpreadsheet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagSpreadsheet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagSpreadsheet.Merge(m, src)
}
func (m *TagSpreadsheet) XXX_Size() int {
	return m.Size()
}
func (m *TagSpreadsheet) XXX_DiscardUnknown() {
	xxx_messageInfo_TagSpreadsheet.DiscardUnknown(m)
}

var xxx_messageInfo_TagSpreadsheet proto.InternalMessageInfo

type TagSurfaceGrid struct {
}

func (m *TagSurfaceGrid) Reset()      { *m = TagSurfaceGrid{} }
func (*TagSurfaceGrid) ProtoMessage() {}
func (*TagSurfaceGrid) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{17}
}
func (m *TagSurfaceGrid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagSurfaceGrid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagSurfaceGrid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagSurfaceGrid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagSurfaceGrid.Merge(m, src)
}
func (m *TagSurfaceGrid) XXX_Size() int {
	return m.Size()
}
func (m *TagSurfaceGrid) XXX_DiscardUnknown() {
	xxx_messageInfo_TagSurfaceGrid.DiscardUnknown(m)
}

var xxx_messageInfo_TagSurfaceGrid proto.InternalMessageInfo

type TagSurfaceGeo struct {
}

func (m *TagSurfaceGeo) Reset()      { *m = TagSurfaceGeo{} }
func (*TagSurfaceGeo) ProtoMessage() {}
func (*TagSurfaceGeo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{18}
}
func (m *TagSurfaceGeo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagSurfaceGeo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagSurfaceGeo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagSurfaceGeo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagSurfaceGeo.Merge(m, src)
}
func (m *TagSurfaceGeo) XXX_Size() int {
	return m.Size()
}
func (m *TagSurfaceGeo) XXX_DiscardUnknown() {
	xxx_messageInfo_TagSurfaceGeo.DiscardUnknown(m)
}

var xxx_messageInfo_TagSurfaceGeo proto.InternalMessageInfo

type TagPlayableMedia struct {
}

func (m *TagPlayableMedia) Reset()      { *m = TagPlayableMedia{} }
func (*TagPlayableMedia) ProtoMessage() {}
func (*TagPlayableMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{19}
}
func (m *TagPlayableMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagPlayableMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagPlayableMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagPlayableMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagPlayableMedia.Merge(m, src)
}
func (m *TagPlayableMedia) XXX_Size() int {
	return m.Size()
}
func (m *TagPlayableMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_TagPlayableMedia.DiscardUnknown(m)
}

var xxx_messageInfo_TagPlayableMedia proto.InternalMessageInfo

type TagPlaylist struct {
}

func (m *TagPlaylist) Reset()      { *m = TagPlaylist{} }
func (*TagPlaylist) ProtoMessage() {}
func (*TagPlaylist) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{20}
}
func (m *TagPlaylist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagPlaylist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagPlaylist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagPlaylist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagPlaylist.Merge(m, src)
}
func (m *TagPlaylist) XXX_Size() int {
	return m.Size()
}
func (m *TagPlaylist) XXX_DiscardUnknown() {
	xxx_messageInfo_TagPlaylist.DiscardUnknown(m)
}

var xxx_messageInfo_TagPlaylist proto.InternalMessageInfo

type TagEpoch struct {
	// typically 1-4 ops that define default user and permission hive transactions, corresponding permissions tokens, and tag-wide public tokens
	// by convention, the first follows the "constitution rule" where you list things like organization or group mission and offer a purpose.TagAttr that goes into ore detail about purpose and mission.
	//
	// These essentially sequential edits to a permissions key-value store
	// TagIDs (ops)
	//      "text/amp.tag.epoch.entries.{clear|write}.{admin|commons|group}"
	//      "text/amp.tag.epoch.entries.{clear|write}.{admin|commons|group}"
	PermissionsOps []*TagAttr `protobuf:"bytes,2,rep,name=PermissionsOps,proto3" json:"PermissionsOps,omitempty"`
	InsertFeeds    []*TagFeed `protobuf:"bytes,4,rep,name=InsertFeeds,proto3" json:"InsertFeeds,omitempty"`
	RemoveFeeds    []*TagFeed `protobuf:"bytes,5,rep,name=RemoveFeeds,proto3" json:"RemoveFeeds,omitempty"`
}

func (m *TagEpoch) Reset()      { *m = TagEpoch{} }
func (*TagEpoch) ProtoMessage() {}
func (*TagEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{21}
}
func (m *TagEpoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagEpoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagEpoch.Merge(m, src)
}
func (m *TagEpoch) XXX_Size() int {
	return m.Size()
}
func (m *TagEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_TagEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_TagEpoch proto.InternalMessageInfo

func (m *TagEpoch) GetPermissionsOps() []*TagAttr {
	if m != nil {
		return m.PermissionsOps
	}
	return nil
}

func (m *TagEpoch) GetInsertFeeds() []*TagFeed {
	if m != nil {
		return m.InsertFeeds
	}
	return nil
}

func (m *TagEpoch) GetRemoveFeeds() []*TagFeed {
	if m != nil {
		return m.RemoveFeeds
	}
	return nil
}

type CryptoKey struct {
	CryptoKitID CryptoKitID `protobuf:"varint,1,opt,name=CryptoKitID,proto3,enum=amp.CryptoKitID" json:"CryptoKitID,omitempty"`
	KeyBytes    []byte      `protobuf:"bytes,4,opt,name=KeyBytes,proto3" json:"KeyBytes,omitempty"`
}

func (m *CryptoKey) Reset()      { *m = CryptoKey{} }
func (*CryptoKey) ProtoMessage() {}
func (*CryptoKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{22}
}
func (m *CryptoKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CryptoKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CryptoKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CryptoKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptoKey.Merge(m, src)
}
func (m *CryptoKey) XXX_Size() int {
	return m.Size()
}
func (m *CryptoKey) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptoKey.DiscardUnknown(m)
}

var xxx_messageInfo_CryptoKey proto.InternalMessageInfo

func (m *CryptoKey) GetCryptoKitID() CryptoKitID {
	if m != nil {
		return m.CryptoKitID
	}
	return CryptoKit_Nil
}

func (m *CryptoKey) GetKeyBytes() []byte {
	if m != nil {
		return m.KeyBytes
	}
	return nil
}

// AuthToken is an oauth token -- see oauth2.Token
type AuthToken struct {
	AccessToken  string `protobuf:"bytes,1,opt,name=AccessToken,proto3" json:"AccessToken,omitempty"`
	TokenType    string `protobuf:"bytes,2,opt,name=TokenType,proto3" json:"TokenType,omitempty"`
	RefreshToken string `protobuf:"bytes,3,opt,name=RefreshToken,proto3" json:"RefreshToken,omitempty"`
	Expiry       int64  `protobuf:"varint,4,opt,name=Expiry,proto3" json:"Expiry,omitempty"`
}

func (m *AuthToken) Reset()      { *m = AuthToken{} }
func (*AuthToken) ProtoMessage() {}
func (*AuthToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{23}
}
func (m *AuthToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthToken.Merge(m, src)
}
func (m *AuthToken) XXX_Size() int {
	return m.Size()
}
func (m *AuthToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthToken.DiscardUnknown(m)
}

var xxx_messageInfo_AuthToken proto.InternalMessageInfo

func (m *AuthToken) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *AuthToken) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *AuthToken) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *AuthToken) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

type TRS struct {
	// X1, X2, and X3 are coordinates or values expressed in any unit.
	// A channel client can later declare how to interpret these coordinates so that a channel server and provide indexed services.
	// Shoutout to the 3 domains that reflect all theoretical completeness: alpha (finite), omega (unending), and the inaccessible cardinal(s).
	// Special thanks to Michael at Vsauce: https://www.youtube.com/watch?v=SrU9YDoXE88
	X1 float64 `protobuf:"fixed64,41,opt,name=X1,proto3" json:"X1,omitempty"`
	X2 float64 `protobuf:"fixed64,42,opt,name=X2,proto3" json:"X2,omitempty"`
	X3 float64 `protobuf:"fixed64,43,opt,name=X3,proto3" json:"X3,omitempty"`
	// Specifies how scale dynamically changes based on observer position.
	ScaleMode TRS_VisualScaleMode `protobuf:"varint,50,opt,name=ScaleMode,proto3,enum=amp.TRS_VisualScaleMode" json:"ScaleMode,omitempty"`
	// Scale1..3 express the scale of this placement.
	// If all three values are 0, they are all implicitly 1.
	// If Scale2 or Scale3 == 0, then it is implicitly Scale1.
	Scale1 float32 `protobuf:"fixed32,51,opt,name=Scale1,proto3" json:"Scale1,omitempty"`
	Scale2 float32 `protobuf:"fixed32,52,opt,name=Scale2,proto3" json:"Scale2,omitempty"`
	Scale3 float32 `protobuf:"fixed32,53,opt,name=Scale3,proto3" json:"Scale3,omitempty"`
	// Rotate1 - Rotate3 the orientation of this placement using Euler angles.
	Rotate1 float32 `protobuf:"fixed32,61,opt,name=Rotate1,proto3" json:"Rotate1,omitempty"`
	Rotate2 float32 `protobuf:"fixed32,62,opt,name=Rotate2,proto3" json:"Rotate2,omitempty"`
	Rotate3 float32 `protobuf:"fixed32,63,opt,name=Rotate3,proto3" json:"Rotate3,omitempty"`
}

func (m *TRS) Reset()      { *m = TRS{} }
func (*TRS) ProtoMessage() {}
func (*TRS) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{24}
}
func (m *TRS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TRS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TRS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TRS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TRS.Merge(m, src)
}
func (m *TRS) XXX_Size() int {
	return m.Size()
}
func (m *TRS) XXX_DiscardUnknown() {
	xxx_messageInfo_TRS.DiscardUnknown(m)
}

var xxx_messageInfo_TRS proto.InternalMessageInfo

func (m *TRS) GetX1() float64 {
	if m != nil {
		return m.X1
	}
	return 0
}

func (m *TRS) GetX2() float64 {
	if m != nil {
		return m.X2
	}
	return 0
}

func (m *TRS) GetX3() float64 {
	if m != nil {
		return m.X3
	}
	return 0
}

func (m *TRS) GetScaleMode() TRS_VisualScaleMode {
	if m != nil {
		return m.ScaleMode
	}
	return AutoScale
}

func (m *TRS) GetScale1() float32 {
	if m != nil {
		return m.Scale1
	}
	return 0
}

func (m *TRS) GetScale2() float32 {
	if m != nil {
		return m.Scale2
	}
	return 0
}

func (m *TRS) GetScale3() float32 {
	if m != nil {
		return m.Scale3
	}
	return 0
}

func (m *TRS) GetRotate1() float32 {
	if m != nil {
		return m.Rotate1
	}
	return 0
}

func (m *TRS) GetRotate2() float32 {
	if m != nil {
		return m.Rotate2
	}
	return 0
}

func (m *TRS) GetRotate3() float32 {
	if m != nil {
		return m.Rotate3
	}
	return 0
}

type DataSegment struct {
	ByteOfs    uint64 `protobuf:"varint,5,opt,name=ByteOfs,proto3" json:"ByteOfs,omitempty"`
	ByteSz     uint64 `protobuf:"varint,6,opt,name=ByteSz,proto3" json:"ByteSz,omitempty"`
	InlineData []byte `protobuf:"bytes,7,opt,name=InlineData,proto3" json:"InlineData,omitempty"`
	StreamURI  string `protobuf:"bytes,9,opt,name=StreamURI,proto3" json:"StreamURI,omitempty"`
	BlobID     int64  `protobuf:"varint,10,opt,name=BlobID,proto3" json:"BlobID,omitempty"`
}

func (m *DataSegment) Reset()      { *m = DataSegment{} }
func (*DataSegment) ProtoMessage() {}
func (*DataSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{25}
}
func (m *DataSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataSegment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataSegment.Merge(m, src)
}
func (m *DataSegment) XXX_Size() int {
	return m.Size()
}
func (m *DataSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_DataSegment.DiscardUnknown(m)
}

var xxx_messageInfo_DataSegment proto.InternalMessageInfo

func (m *DataSegment) GetByteOfs() uint64 {
	if m != nil {
		return m.ByteOfs
	}
	return 0
}

func (m *DataSegment) GetByteSz() uint64 {
	if m != nil {
		return m.ByteSz
	}
	return 0
}

func (m *DataSegment) GetInlineData() []byte {
	if m != nil {
		return m.InlineData
	}
	return nil
}

func (m *DataSegment) GetStreamURI() string {
	if m != nil {
		return m.StreamURI
	}
	return ""
}

func (m *DataSegment) GetBlobID() int64 {
	if m != nil {
		return m.BlobID
	}
	return 0
}

// Err is a general purpose error / warning / log message.
type Err struct {
	// Identifies the type of error.
	Code ErrCode `protobuf:"varint,1,opt,name=Code,proto3,enum=amp.ErrCode" json:"Code,omitempty"`
	// Severity level
	Level LogLevel `protobuf:"varint,2,opt,name=Level,proto3,enum=amp.LogLevel" json:"Level,omitempty"`
	// human-readable info
	Msg string `protobuf:"bytes,4,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (m *Err) Reset()      { *m = Err{} }
func (*Err) ProtoMessage() {}
func (*Err) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4505e0ac3ae98d9, []int{26}
}
func (m *Err) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Err) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Err.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Err) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Err.Merge(m, src)
}
func (m *Err) XXX_Size() int {
	return m.Size()
}
func (m *Err) XXX_DiscardUnknown() {
	xxx_messageInfo_Err.DiscardUnknown(m)
}

var xxx_messageInfo_Err proto.InternalMessageInfo

func (m *Err) GetCode() ErrCode {
	if m != nil {
		return m.Code
	}
	return ErrCode_NoErr
}

func (m *Err) GetLevel() LogLevel {
	if m != nil {
		return m.Level
	}
	return LogLevel_Error
}

func (m *Err) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterEnum("amp.Const", Const_name, Const_value)
	proto.RegisterEnum("amp.TxOpCode", TxOpCode_name, TxOpCode_value)
	proto.RegisterEnum("amp.TxField", TxField_name, TxField_value)
	proto.RegisterEnum("amp.SelectOp", SelectOp_name, SelectOp_value)
	proto.RegisterEnum("amp.ReqStatus", ReqStatus_name, ReqStatus_value)
	proto.RegisterEnum("amp.PinFlags", PinFlags_name, PinFlags_value)
	proto.RegisterEnum("amp.CordType", CordType_name, CordType_value)
	proto.RegisterEnum("amp.Enable", Enable_name, Enable_value)
	proto.RegisterEnum("amp.UrlScheme", UrlScheme_name, UrlScheme_value)
	proto.RegisterEnum("amp.Metric", Metric_name, Metric_value)
	proto.RegisterEnum("amp.CryptoKitID", CryptoKitID_name, CryptoKitID_value)
	proto.RegisterEnum("amp.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterEnum("amp.LogLevel", LogLevel_name, LogLevel_value)
	proto.RegisterEnum("amp.TRS_VisualScaleMode", TRS_VisualScaleMode_name, TRS_VisualScaleMode_value)
	proto.RegisterType((*TxInfo)(nil), "amp.TxInfo")
	proto.RegisterType((*Login)(nil), "amp.Login")
	proto.RegisterType((*LoginChallenge)(nil), "amp.LoginChallenge")
	proto.RegisterType((*LoginResponse)(nil), "amp.LoginResponse")
	proto.RegisterType((*AuthCheckpoint)(nil), "amp.AuthCheckpoint")
	proto.RegisterType((*HelloWorld)(nil), "amp.HelloWorld")
	proto.RegisterType((*HandleURL)(nil), "amp.HandleURL")
	proto.RegisterType((*FeedGenesis)(nil), "amp.FeedGenesis")
	proto.RegisterType((*PinRequest)(nil), "amp.PinRequest")
	proto.RegisterType((*Position)(nil), "amp.Position")
	proto.RegisterType((*TagAttr)(nil), "amp.TagAttr")
	proto.RegisterType((*TagTab)(nil), "amp.TagTab")
	proto.RegisterType((*TagFeed)(nil), "amp.TagFeed")
	proto.RegisterType((*TagBallotBox)(nil), "amp.TagBallotBox")
	proto.RegisterType((*TagNotes)(nil), "amp.TagNotes")
	proto.RegisterType((*TagChat)(nil), "amp.TagChat")
	proto.RegisterType((*TagSpreadsheet)(nil), "amp.TagSpreadsheet")
	proto.RegisterType((*TagSurfaceGrid)(nil), "amp.TagSurfaceGrid")
	proto.RegisterType((*TagSurfaceGeo)(nil), "amp.TagSurfaceGeo")
	proto.RegisterType((*TagPlayableMedia)(nil), "amp.TagPlayableMedia")
	proto.RegisterType((*TagPlaylist)(nil), "amp.TagPlaylist")
	proto.RegisterType((*TagEpoch)(nil), "amp.TagEpoch")
	proto.RegisterType((*CryptoKey)(nil), "amp.CryptoKey")
	proto.RegisterType((*AuthToken)(nil), "amp.AuthToken")
	proto.RegisterType((*TRS)(nil), "amp.TRS")
	proto.RegisterType((*DataSegment)(nil), "amp.DataSegment")
	proto.RegisterType((*Err)(nil), "amp.Err")
}

func init() { proto.RegisterFile("amp/api.amp.proto", fileDescriptor_f4505e0ac3ae98d9) }

var fileDescriptor_f4505e0ac3ae98d9 = []byte{
	// 2676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x58, 0x4b, 0x8c, 0x23, 0x47,
	0xf9, 0x9f, 0xb6, 0x3d, 0x9e, 0x71, 0xcd, 0x63, 0x6b, 0x6b, 0x5f, 0x9d, 0xcd, 0xc6, 0x19, 0x75,
	0x56, 0x99, 0xc9, 0xfc, 0xff, 0xd9, 0x8c, 0x3d, 0x9b, 0xbf, 0xfe, 0x1c, 0x00, 0xcd, 0x7a, 0x66,
	0x77, 0xac, 0xcc, 0x8b, 0x6e, 0x7b, 0x37, 0x02, 0x14, 0xab, 0xc6, 0xfd, 0xd9, 0x6e, 0x6d, 0xbb,
	0xab, 0xb7, 0xbb, 0xbc, 0x78, 0x72, 0x40, 0x70, 0x40, 0xbc, 0x43, 0x00, 0xc1, 0x89, 0x47, 0x4e,
	0x24, 0xac, 0x10, 0x42, 0x08, 0x0e, 0xbc, 0x11, 0x48, 0x28, 0xe2, 0x94, 0x63, 0xc4, 0x89, 0x6c,
	0x2e, 0x1c, 0x40, 0xca, 0x85, 0x3b, 0xfa, 0xaa, 0x1f, 0xee, 0x76, 0xcc, 0xc9, 0xf5, 0xfd, 0x7e,
	0x5f, 0x55, 0x7d, 0xf5, 0x55, 0xd5, 0xaf, 0x3e, 0x37, 0x39, 0xcf, 0x87, 0xfe, 0x0b, 0xdc, 0x77,
	0x6e, 0xf0, 0xa1, 0x7f, 0xc3, 0x0f, 0x84, 0x14, 0xac, 0xc8, 0x87, 0xbe, 0xf1, 0x5a, 0x81, 0x94,
	0x5b, 0xe3, 0xa6, 0xd7, 0x13, 0xec, 0x59, 0x52, 0xb6, 0x24, 0x97, 0xa3, 0x50, 0x2f, 0xac, 0x69,
	0x1b, 0xab, 0xf5, 0x55, 0xe5, 0x6b, 0xc2, 0x83, 0x08, 0x35, 0x63, 0x96, 0x5d, 0x26, 0xe5, 0xa3,
	0xd1, 0xf0, 0xd8, 0x0f, 0xf5, 0xd2, 0x9a, 0xb6, 0x51, 0x32, 0x63, 0x8b, 0x3d, 0x4d, 0x96, 0xee,
	0x80, 0x07, 0xa1, 0x13, 0x36, 0x77, 0x3b, 0x5b, 0xfa, 0xc2, 0x9a, 0xb6, 0x51, 0x34, 0x49, 0x0a,
	0x6d, 0xe5, 0x1d, 0x6a, 0xfa, 0xe2, 0x9a, 0xb6, 0x51, 0xce, 0x38, 0xd4, 0xf2, 0x0e, 0x75, 0xbd,
	0x32, 0xe5, 0x50, 0x47, 0x87, 0x86, 0xf0, 0x24, 0x8c, 0xa5, 0x9a, 0x82, 0x44, 0x53, 0xa4, 0xd0,
	0x56, 0xde, 0xa1, 0xa6, 0x2f, 0x45, 0x23, 0xa4, 0x50, 0x2d, 0xef, 0x50, 0xd7, 0x97, 0xa7, 0x1c,
	0xea, 0xc6, 0xcf, 0x35, 0x32, 0x7f, 0x20, 0xfa, 0x8e, 0xc7, 0x74, 0xb2, 0xd0, 0x0e, 0x21, 0x68,
	0x37, 0x77, 0x75, 0x6d, 0x4d, 0xdb, 0xa8, 0x98, 0x89, 0xc9, 0xae, 0x92, 0xc5, 0x7d, 0x11, 0xca,
	0x1d, 0xdb, 0x0e, 0x54, 0xae, 0x2a, 0x66, 0x6a, 0xb3, 0x35, 0xb2, 0xb4, 0x0b, 0x0f, 0x9d, 0x2e,
	0x1c, 0xf0, 0x53, 0x70, 0xd5, 0x22, 0x2b, 0x66, 0x16, 0x62, 0xd7, 0x48, 0x25, 0x32, 0x71, 0xe4,
	0x8a, 0xe2, 0x27, 0x00, 0xdb, 0x26, 0xa4, 0x31, 0x80, 0xee, 0x7d, 0x5f, 0x38, 0x9e, 0x54, 0x2b,
	0x5c, 0xaa, 0x5f, 0x50, 0x3b, 0xb1, 0x33, 0x92, 0x83, 0x09, 0x65, 0x66, 0xdc, 0x8c, 0xeb, 0x64,
	0x55, 0xc5, 0xdc, 0x18, 0x70, 0xd7, 0x05, 0xaf, 0x0f, 0x8c, 0x91, 0xd2, 0x3e, 0x0f, 0x07, 0x2a,
	0xf2, 0x65, 0x53, 0xb5, 0x8d, 0x6d, 0xb2, 0xa2, 0xbc, 0x4c, 0x08, 0x7d, 0xe1, 0x85, 0xc0, 0x0c,
	0xb2, 0x8c, 0x44, 0x62, 0xc7, 0xce, 0x39, 0xcc, 0x78, 0xa4, 0x91, 0xd5, 0xfc, 0xcc, 0xec, 0x22,
	0x99, 0x6f, 0x89, 0xfb, 0xe0, 0xc5, 0x69, 0x89, 0x0c, 0xf6, 0xbf, 0x84, 0x58, 0x10, 0x86, 0x8e,
	0xf0, 0x5a, 0xbc, 0x1f, 0x07, 0xbe, 0xac, 0x02, 0x6f, 0xf1, 0xfe, 0x8e, 0x94, 0x81, 0x99, 0xe1,
	0xd9, 0x26, 0xa9, 0x1c, 0xc2, 0xf0, 0x14, 0x02, 0x74, 0x5e, 0x9a, 0xe1, 0x3c, 0xa1, 0xd9, 0x06,
	0xa6, 0x7b, 0x08, 0xb7, 0x01, 0x6c, 0x95, 0xaf, 0x69, 0xd7, 0x94, 0x35, 0x96, 0x09, 0xd9, 0x07,
	0xd7, 0x15, 0xf7, 0x44, 0xe0, 0xda, 0xc6, 0x53, 0xa4, 0xb2, 0xcf, 0x3d, 0xdb, 0x85, 0xb6, 0x79,
	0xc0, 0x28, 0x29, 0xb6, 0xcd, 0x83, 0x38, 0x64, 0x6c, 0x1a, 0x0f, 0xc8, 0x12, 0x76, 0x8a, 0x8f,
	0x17, 0xdb, 0x22, 0xcb, 0x87, 0x8e, 0x27, 0x5b, 0xa2, 0xc5, 0x83, 0x3e, 0x48, 0xe5, 0x39, 0x3d,
	0x53, 0xce, 0x23, 0xe9, 0xd1, 0xf4, 0x42, 0xc9, 0xbd, 0x2e, 0xe8, 0x85, 0xb5, 0x62, 0xb6, 0x07,
	0x0e, 0x6e, 0xe6, 0x3c, 0x8c, 0x37, 0x35, 0x42, 0x4e, 0x70, 0x03, 0x1e, 0x8c, 0x20, 0x94, 0xec,
	0x3a, 0x29, 0x9f, 0x38, 0x5e, 0x12, 0xd6, 0xf4, 0x64, 0x31, 0x87, 0xa9, 0xb2, 0xce, 0xbc, 0x2e,
	0x62, 0xa1, 0xbe, 0x90, 0x9f, 0x23, 0x4a, 0x55, 0x4a, 0xb3, 0x67, 0xc8, 0xfc, 0x6d, 0x97, 0xf7,
	0x43, 0x95, 0xff, 0xd5, 0xfa, 0x8a, 0xf2, 0x3b, 0x71, 0x3c, 0x05, 0x9a, 0x11, 0x87, 0xdb, 0xde,
	0xe2, 0xfd, 0x4f, 0x8c, 0x20, 0x38, 0xdb, 0x1b, 0xfb, 0x81, 0x4e, 0x55, 0x4e, 0x72, 0x98, 0xf1,
	0x80, 0x2c, 0x9e, 0x88, 0xd0, 0x91, 0x8e, 0xf0, 0xd8, 0x73, 0x64, 0xb1, 0x21, 0x02, 0xbb, 0x75,
	0xe6, 0x47, 0x47, 0x24, 0x19, 0x37, 0x01, 0xcd, 0x94, 0x66, 0xcb, 0x44, 0x6b, 0xeb, 0xc5, 0x35,
	0x6d, 0x43, 0x33, 0xb5, 0x36, 0x5a, 0x77, 0x95, 0x48, 0x68, 0xa6, 0x76, 0x17, 0xad, 0x7b, 0xfa,
	0x7c, 0x64, 0xdd, 0xc3, 0xfd, 0x30, 0x8f, 0xdb, 0x7a, 0x79, 0x4d, 0xdb, 0x28, 0x98, 0xd8, 0x34,
	0xfe, 0x52, 0x24, 0x0b, 0xf1, 0x92, 0xd8, 0x05, 0x32, 0xdf, 0xe2, 0xfd, 0xce, 0x96, 0xba, 0x5e,
	0x45, 0xb3, 0xd4, 0xe2, 0xfd, 0xad, 0x04, 0xac, 0xa9, 0x09, 0xca, 0x0a, 0xac, 0x25, 0x60, 0x5d,
	0xcd, 0x13, 0x81, 0x75, 0xf6, 0x14, 0x21, 0x38, 0x8c, 0xe5, 0x43, 0xb7, 0xb3, 0xa5, 0xe6, 0x2c,
	0x9a, 0x95, 0x04, 0xd9, 0xca, 0xd1, 0x35, 0x15, 0x42, 0x79, 0x42, 0xd7, 0x72, 0x74, 0x5d, 0xe9,
	0x58, 0x86, 0xae, 0xb3, 0xf3, 0xa4, 0x64, 0x35, 0x53, 0xf5, 0x29, 0x5a, 0xcd, 0xad, 0x18, 0x4a,
	0xf4, 0xa6, 0x68, 0x35, 0x6b, 0x31, 0x94, 0x28, 0x4c, 0xd1, 0x6a, 0xd6, 0x93, 0x23, 0xb8, 0x92,
	0x1e, 0x41, 0x14, 0x0b, 0x25, 0x3d, 0x9e, 0x54, 0xc9, 0x5d, 0x8d, 0xc4, 0x22, 0x03, 0xb1, 0xaa,
	0x8a, 0x85, 0x77, 0x07, 0x43, 0xf0, 0xa4, 0x7e, 0x4e, 0x5d, 0xd0, 0x0c, 0xc2, 0x9e, 0x21, 0xe5,
	0x43, 0x90, 0x81, 0xd3, 0x55, 0xbb, 0xb8, 0x5a, 0x5f, 0x52, 0x3b, 0x13, 0x41, 0x66, 0x4c, 0xb1,
	0x4b, 0xa4, 0x6c, 0x39, 0xaf, 0x42, 0x67, 0x4b, 0x3f, 0xaf, 0xd2, 0x3f, 0x8f, 0xd6, 0x56, 0x0a,
	0xd7, 0x74, 0x36, 0x81, 0x6b, 0x29, 0x5c, 0xd7, 0x2f, 0x4c, 0xe0, 0x3a, 0xde, 0x42, 0x6b, 0x74,
	0x1a, 0x9d, 0x42, 0x7d, 0xc6, 0x29, 0x4c, 0x59, 0xe3, 0xa7, 0x1a, 0x29, 0xb7, 0x78, 0xbf, 0xc5,
	0x4f, 0x51, 0x2a, 0x22, 0x1d, 0x8c, 0xa5, 0x22, 0x52, 0x40, 0x9d, 0x2c, 0x34, 0xb8, 0x8f, 0x67,
	0x2b, 0x96, 0xcf, 0xc4, 0x44, 0xff, 0x9d, 0x53, 0x31, 0x92, 0x6a, 0x8b, 0x2b, 0x66, 0x64, 0xa0,
	0x62, 0x36, 0x02, 0xe0, 0x12, 0xec, 0x1d, 0xa9, 0x14, 0xb5, 0x68, 0x4e, 0x00, 0x4c, 0xd1, 0xa1,
	0xb0, 0x9d, 0x9e, 0xa3, 0xe8, 0x4a, 0xf4, 0x26, 0x4c, 0x10, 0xb6, 0x46, 0x4a, 0x07, 0x8e, 0x77,
	0x5f, 0xbf, 0x38, 0xe3, 0x8e, 0x29, 0xc6, 0xf8, 0xb7, 0xa6, 0x4e, 0x1e, 0x5e, 0x58, 0x56, 0x25,
	0xc5, 0x1d, 0xdf, 0x9f, 0x79, 0x21, 0x91, 0xc0, 0x34, 0xa0, 0x1f, 0x1e, 0x05, 0x15, 0xfc, 0x87,
	0xd2, 0x90, 0xb0, 0xcc, 0xc0, 0x93, 0x79, 0xda, 0x6e, 0xaa, 0x93, 0x39, 0xed, 0x16, 0x51, 0xec,
	0x59, 0xb2, 0x60, 0x0d, 0x00, 0x64, 0xbb, 0xa9, 0x4e, 0xe9, 0xb4, 0x57, 0x42, 0xa2, 0x06, 0x20,
	0x80, 0x63, 0xff, 0x17, 0x0d, 0x48, 0xe9, 0x78, 0xa3, 0x22, 0xd7, 0xca, 0x0c, 0x49, 0x4a, 0x59,
	0x63, 0x55, 0x09, 0xc1, 0x2d, 0xee, 0xba, 0x42, 0xde, 0x12, 0x63, 0x83, 0x90, 0xc5, 0x16, 0xef,
	0x1f, 0x09, 0x09, 0xa1, 0x51, 0x51, 0x29, 0x69, 0x0c, 0xb8, 0x34, 0x28, 0x59, 0x6d, 0xf1, 0xbe,
	0xe5, 0x07, 0xc0, 0xed, 0x10, 0x03, 0x4a, 0x90, 0x51, 0xd0, 0xe3, 0x5d, 0xb8, 0x13, 0x38, 0xb6,
	0x71, 0x8e, 0xac, 0x64, 0x10, 0x10, 0x06, 0x23, 0xb4, 0xc5, 0xfb, 0x27, 0x2e, 0x3f, 0xe3, 0xa7,
	0x2e, 0x1c, 0x82, 0xed, 0x70, 0x63, 0x85, 0x2c, 0xc5, 0x98, 0xeb, 0x84, 0xd2, 0x78, 0x43, 0x53,
	0xf3, 0xed, 0xf9, 0xa2, 0x3b, 0x60, 0x37, 0xc9, 0xea, 0x09, 0x04, 0x43, 0x47, 0xbd, 0x10, 0x21,
	0x56, 0x17, 0x85, 0x19, 0xcb, 0x9c, 0xf2, 0x61, 0x37, 0xc8, 0x52, 0xd3, 0x0b, 0x21, 0x90, 0xd1,
	0x72, 0x4b, 0x33, 0x96, 0x9b, 0x75, 0x40, 0x7f, 0x13, 0x86, 0xe2, 0x21, 0x44, 0xfe, 0xf3, 0xb3,
	0xfc, 0x33, 0x0e, 0xc6, 0xa7, 0xf0, 0xe4, 0x9d, 0xf9, 0x52, 0xbc, 0x04, 0x67, 0xac, 0x4e, 0x96,
	0x62, 0xc3, 0x91, 0x71, 0x51, 0xb0, 0x5a, 0xa7, 0x91, 0x14, 0x4e, 0x70, 0x33, 0xeb, 0x84, 0xa5,
	0xc2, 0x4b, 0x70, 0x76, 0xeb, 0x4c, 0x42, 0x54, 0x2e, 0x2d, 0x9b, 0xa9, 0x6d, 0x7c, 0x51, 0x23,
	0x15, 0x7c, 0x5a, 0xa3, 0xf7, 0x73, 0x8d, 0x2c, 0xed, 0x74, 0xbb, 0x10, 0x86, 0xd9, 0xb7, 0x35,
	0x0b, 0xe1, 0x35, 0x50, 0x0d, 0xa5, 0x15, 0xd1, 0xc5, 0x99, 0x00, 0xa8, 0xea, 0x26, 0xf4, 0x02,
	0x08, 0xa3, 0xf1, 0xe2, 0x1b, 0x94, 0xc3, 0xb0, 0x74, 0xdb, 0x1b, 0xfb, 0x4e, 0x70, 0xa6, 0x62,
	0x29, 0x9a, 0xb1, 0x65, 0xfc, 0xb2, 0x40, 0x8a, 0x2d, 0xd3, 0x62, 0xab, 0xa4, 0xf0, 0x72, 0x4d,
	0x7f, 0x4e, 0x5d, 0xfb, 0xc2, 0xcb, 0x35, 0x65, 0xd7, 0xf5, 0xcd, 0xd8, 0xae, 0x2b, 0x7b, 0x5b,
	0xff, 0x9f, 0xd8, 0xde, 0x66, 0xff, 0x47, 0x2a, 0x56, 0x97, 0xbb, 0x70, 0x28, 0x6c, 0xd0, 0xeb,
	0x2a, 0x1f, 0x7a, 0x94, 0x4c, 0xd3, 0xba, 0x71, 0xd7, 0x09, 0x47, 0xdc, 0x4d, 0x79, 0x73, 0xe2,
	0x8a, 0x71, 0x28, 0xa3, 0xa6, 0x6f, 0x2b, 0xfd, 0x8f, 0xad, 0x14, 0xaf, 0xeb, 0x37, 0x33, 0x78,
	0x3d, 0xc5, 0xb7, 0xf5, 0x17, 0x33, 0xf8, 0x36, 0x0a, 0x89, 0x29, 0x24, 0x97, 0x50, 0xd3, 0x3f,
	0xaa, 0x88, 0xc4, 0x9c, 0x30, 0x75, 0xfd, 0x63, 0x59, 0xa6, 0x3e, 0x61, 0xb6, 0xf5, 0x8f, 0x67,
	0x99, 0x6d, 0x63, 0x8b, 0x9c, 0x9b, 0x8a, 0x99, 0xad, 0xa8, 0x1d, 0x12, 0x0a, 0xa0, 0x73, 0x6c,
	0x95, 0x90, 0xdb, 0xce, 0x18, 0xec, 0xc8, 0xd6, 0x8c, 0xef, 0x68, 0x64, 0x69, 0x97, 0x4b, 0x6e,
	0x41, 0x5f, 0xa9, 0xb1, 0x4e, 0x16, 0x70, 0x6b, 0x8f, 0x7b, 0xa1, 0xba, 0xce, 0x25, 0x33, 0x31,
	0x71, 0x05, 0xd8, 0xb4, 0x5e, 0x55, 0xcf, 0x4d, 0xc9, 0x8c, 0x2d, 0x14, 0xaf, 0xa6, 0xe7, 0x3a,
	0x1e, 0xe0, 0x30, 0xea, 0xad, 0x59, 0x36, 0x33, 0x08, 0xee, 0xb9, 0x25, 0x03, 0xe0, 0xc3, 0xb6,
	0xd9, 0x4c, 0x8a, 0xc5, 0x14, 0x50, 0xa3, 0xba, 0xe2, 0xb4, 0xb9, 0x1b, 0x3f, 0x46, 0xb1, 0x65,
	0xbc, 0x42, 0x8a, 0x7b, 0x01, 0xd6, 0xa2, 0xa5, 0x06, 0xee, 0x4c, 0x74, 0x52, 0xa3, 0x63, 0xbe,
	0x17, 0x04, 0x88, 0x99, 0x8a, 0xc1, 0x7a, 0xe1, 0x00, 0x1e, 0x82, 0x1b, 0x97, 0xfc, 0xd1, 0xbb,
	0x7e, 0x20, 0xfa, 0x0a, 0x34, 0x23, 0x0e, 0xdf, 0xad, 0xc3, 0xb0, 0xaf, 0x8e, 0x4c, 0xc5, 0xc4,
	0xe6, 0xe6, 0xaf, 0x34, 0x32, 0xdf, 0x10, 0x5e, 0x28, 0x31, 0x23, 0xaa, 0xd1, 0xd9, 0x85, 0x5e,
	0x48, 0xe7, 0xd8, 0x65, 0xc2, 0x22, 0xbb, 0xd5, 0xdc, 0xbd, 0xe5, 0x78, 0x3c, 0x38, 0x3b, 0x00,
	0x8f, 0xae, 0xe5, 0x70, 0x4b, 0x06, 0x8e, 0xd7, 0x47, 0xfc, 0x26, 0x7b, 0x8a, 0xe8, 0x69, 0x7f,
	0x3e, 0x72, 0xa5, 0x05, 0x01, 0x56, 0xc2, 0x27, 0x22, 0x90, 0xf4, 0xed, 0x0d, 0x76, 0x85, 0x5c,
	0x88, 0xbb, 0x8d, 0xf7, 0x81, 0xdb, 0x10, 0x74, 0xf0, 0x31, 0xa2, 0x94, 0x5d, 0x25, 0x97, 0xa7,
	0x88, 0xbb, 0x10, 0xa0, 0x2c, 0xd0, 0x6d, 0x76, 0x8d, 0x5c, 0x9a, 0xe2, 0x0e, 0x79, 0x70, 0x1f,
	0x02, 0xfa, 0xc1, 0xdf, 0xbe, 0x50, 0xdc, 0xfc, 0x2c, 0x59, 0x6c, 0x8d, 0x8f, 0x7d, 0xb5, 0x7c,
	0x4a, 0x96, 0x93, 0x76, 0xe7, 0xc8, 0x71, 0xe9, 0x1c, 0xbb, 0x44, 0xce, 0xa7, 0xc8, 0x21, 0x48,
	0x8e, 0xaa, 0x43, 0x35, 0x8c, 0x23, 0x85, 0xdb, 0x3e, 0xea, 0x89, 0x22, 0x0a, 0x39, 0x22, 0x12,
	0x0e, 0x45, 0x94, 0x66, 0x10, 0x0d, 0x70, 0x5d, 0x4a, 0x37, 0x3f, 0x5f, 0x20, 0x0b, 0xad, 0xf1,
	0x6d, 0x07, 0x5c, 0x1b, 0x8f, 0x57, 0xdc, 0xec, 0x6c, 0x25, 0x93, 0x47, 0xe6, 0x21, 0x8f, 0x1a,
	0x21, 0xd5, 0x31, 0x77, 0x09, 0x1c, 0x55, 0x9e, 0xcd, 0xdd, 0xf1, 0x16, 0xd5, 0x66, 0xe2, 0x35,
	0x5a, 0x98, 0x89, 0xd7, 0x69, 0x91, 0x5d, 0x24, 0x34, 0xc1, 0x31, 0x48, 0xfc, 0x0b, 0x45, 0x4b,
	0x33, 0xd0, 0x1a, 0x9d, 0x9f, 0x81, 0xd6, 0x69, 0x39, 0xca, 0x57, 0x84, 0x62, 0x09, 0x44, 0xc9,
	0x14, 0x52, 0xa3, 0x4b, 0x53, 0x48, 0x9d, 0x2e, 0x67, 0x11, 0xfc, 0x6b, 0x41, 0x57, 0x36, 0x0f,
	0xc8, 0xa2, 0x05, 0x2e, 0x74, 0xe5, 0xb1, 0x8f, 0x33, 0x25, 0xed, 0xce, 0x11, 0x8c, 0x64, 0xc0,
	0x71, 0x1f, 0xb2, 0x68, 0xd3, 0xeb, 0xba, 0x23, 0x1b, 0xa8, 0x96, 0x43, 0xf7, 0xc6, 0x11, 0x5a,
	0xd8, 0x1c, 0x90, 0x4a, 0xfa, 0x2f, 0x95, 0xe9, 0xe4, 0x62, 0x6a, 0x74, 0x8e, 0x84, 0xb4, 0x24,
	0x0f, 0x24, 0xd8, 0x51, 0x76, 0x27, 0x0c, 0x96, 0xcc, 0x8e, 0xd7, 0x8f, 0xc6, 0xcc, 0xc3, 0x60,
	0xd3, 0x42, 0x1e, 0x6d, 0xb8, 0x22, 0x04, 0x9b, 0x16, 0x31, 0xee, 0xa4, 0x98, 0x66, 0xe7, 0xc9,
	0x4a, 0xd2, 0xee, 0x1c, 0x09, 0x0f, 0xe5, 0x41, 0x27, 0x17, 0x53, 0x48, 0xf5, 0x39, 0xf6, 0x70,
	0x40, 0x5a, 0x62, 0x17, 0xc8, 0xb9, 0x8c, 0xb3, 0x02, 0x17, 0x37, 0x1f, 0x69, 0x93, 0xc2, 0x1a,
	0xfb, 0x26, 0xed, 0x4e, 0xdb, 0x0b, 0x7d, 0xe8, 0xaa, 0xfa, 0x25, 0x4a, 0x45, 0xca, 0x1c, 0x07,
	0x36, 0x04, 0x60, 0x53, 0x8d, 0x5d, 0xc3, 0x8b, 0x13, 0xa3, 0x27, 0x2e, 0xf7, 0xa0, 0xd3, 0xc0,
	0x85, 0x86, 0x0e, 0xf7, 0xe8, 0x3c, 0x7b, 0x92, 0x5c, 0x99, 0x62, 0xf7, 0x61, 0xbc, 0xf7, 0x10,
	0x3c, 0x93, 0x96, 0xd9, 0x13, 0x78, 0x3f, 0x62, 0xf2, 0x0e, 0x08, 0xc7, 0xee, 0x58, 0xfe, 0x00,
	0x02, 0xa0, 0x24, 0x17, 0x45, 0x44, 0xdd, 0xbb, 0x63, 0xfd, 0xff, 0x4d, 0xba, 0xb4, 0xf9, 0x0a,
	0x29, 0xef, 0x79, 0xf8, 0x94, 0x63, 0x3c, 0x51, 0xab, 0x73, 0xc0, 0xb1, 0x4e, 0x3d, 0xee, 0xf5,
	0xe8, 0x1c, 0xae, 0x30, 0x8f, 0x7a, 0x54, 0xcb, 0x80, 0x3b, 0x5d, 0xe9, 0x3c, 0x84, 0x63, 0x2f,
	0x4a, 0x6d, 0x1e, 0xec, 0xf5, 0x68, 0x71, 0x73, 0x48, 0x2a, 0xed, 0xc0, 0xb5, 0xba, 0x03, 0x18,
	0x02, 0xe6, 0x36, 0x35, 0xe2, 0x8b, 0xc9, 0xc8, 0xea, 0x04, 0x42, 0x69, 0xa4, 0x5a, 0xde, 0x6d,
	0x67, 0xe8, 0xd3, 0x42, 0xde, 0xed, 0xb6, 0xe3, 0x02, 0x2d, 0xe6, 0xb1, 0x7d, 0x29, 0x7d, 0x5a,
	0xda, 0xfc, 0xb6, 0x96, 0x14, 0xce, 0x28, 0x61, 0x51, 0x6b, 0x22, 0x01, 0xb1, 0x7d, 0x1c, 0xc8,
	0x81, 0x38, 0x71, 0xc6, 0xe0, 0x52, 0x0d, 0x15, 0x27, 0x0b, 0x1f, 0x3a, 0xae, 0xeb, 0x0c, 0x41,
	0x02, 0xaa, 0xc0, 0x35, 0xa2, 0xc7, 0xdc, 0x3e, 0x8c, 0xb1, 0x1e, 0xca, 0xb0, 0x45, 0xb6, 0x41,
	0xae, 0xc7, 0x6c, 0x2b, 0xe0, 0x3e, 0xbc, 0x2a, 0x76, 0x85, 0x0d, 0x5d, 0x3e, 0x00, 0x3b, 0x10,
	0x5e, 0xc6, 0xb3, 0xb4, 0xf9, 0x5d, 0x2d, 0x57, 0x62, 0xe0, 0x02, 0x53, 0x33, 0x8e, 0x0e, 0xf7,
	0x3d, 0x85, 0x2c, 0xe8, 0x06, 0x80, 0xa5, 0x5b, 0xe7, 0x88, 0x37, 0x5c, 0x6a, 0x2b, 0x59, 0x4c,
	0xd9, 0x9d, 0xf0, 0x6c, 0x78, 0x18, 0xf6, 0x23, 0x0e, 0xf2, 0x9c, 0xe5, 0xf4, 0x3d, 0xc7, 0x8b,
	0xb9, 0x1e, 0xab, 0x92, 0x27, 0x3e, 0xcc, 0xed, 0xed, 0xd6, 0x5f, 0x7c, 0xb1, 0xf6, 0x11, 0xfa,
	0x57, 0x6d, 0xf3, 0x17, 0x0b, 0x64, 0x21, 0x7e, 0x39, 0x30, 0xa8, 0xb8, 0xd9, 0x39, 0x12, 0x7b,
	0x41, 0x40, 0xe7, 0xd8, 0x15, 0xc2, 0x12, 0xa8, 0xed, 0x79, 0x7c, 0x08, 0x36, 0xe2, 0x5f, 0x5a,
	0x67, 0x3a, 0xb9, 0x90, 0x10, 0x4d, 0x4f, 0x42, 0xe0, 0x71, 0x17, 0x99, 0x2f, 0xaf, 0xb3, 0xab,
	0xe4, 0xd2, 0xa4, 0x4b, 0x38, 0xf2, 0x7d, 0x81, 0xd7, 0xf4, 0xd8, 0xa7, 0x5f, 0x99, 0xe2, 0x9c,
	0xa1, 0xef, 0x02, 0xbe, 0xae, 0x60, 0xd3, 0xaf, 0xae, 0xb3, 0x8b, 0xe4, 0x5c, 0xc2, 0xb5, 0x9c,
	0x21, 0x88, 0x91, 0xa4, 0x5f, 0x5b, 0x67, 0x4f, 0x90, 0x8b, 0x09, 0x6a, 0x0d, 0x46, 0x52, 0x3a,
	0x5e, 0x7f, 0x57, 0x7c, 0xc6, 0xa3, 0x5f, 0xcf, 0x51, 0x47, 0x42, 0x36, 0x84, 0xe7, 0x41, 0x17,
	0xc7, 0x7a, 0x6d, 0x3d, 0x1b, 0x36, 0xd6, 0x61, 0xb7, 0xb9, 0xe3, 0x82, 0x4d, 0xbf, 0x91, 0x0b,
	0x5b, 0x7d, 0x31, 0x89, 0x99, 0xd7, 0xd7, 0xd9, 0x93, 0xe4, 0x72, 0x3a, 0x51, 0xf4, 0x35, 0x43,
	0x95, 0x50, 0x60, 0xd3, 0x6f, 0xe6, 0xba, 0x99, 0xf0, 0xe0, 0x48, 0xc8, 0xdb, 0x62, 0xe4, 0xd9,
	0xf4, 0x5b, 0xb9, 0x99, 0x9a, 0xde, 0x43, 0xee, 0x3a, 0xb6, 0x09, 0x0f, 0xe8, 0xf7, 0x66, 0x11,
	0x6d, 0xb3, 0x49, 0xbf, 0xbf, 0xce, 0x2e, 0x11, 0x9a, 0x10, 0xb7, 0xb8, 0x7d, 0x97, 0xbb, 0x23,
	0xa0, 0x3f, 0x98, 0xe5, 0xdf, 0xe2, 0x7d, 0xfa, 0xc3, 0x5c, 0x60, 0x13, 0x02, 0xff, 0x87, 0xd0,
	0x37, 0xd6, 0xd9, 0x35, 0x72, 0x25, 0x93, 0x83, 0x81, 0xe3, 0xf5, 0x5b, 0xa2, 0x21, 0x86, 0x43,
	0x47, 0xd2, 0x1f, 0xe5, 0x32, 0x14, 0x81, 0xf1, 0x72, 0xdf, 0xcc, 0x8d, 0xaa, 0x64, 0x44, 0xa6,
	0x8b, 0x7a, 0x2b, 0xb7, 0x4d, 0x11, 0x89, 0xfd, 0x46, 0x01, 0xd0, 0x1f, 0xe7, 0x52, 0xb1, 0xe3,
	0xfb, 0x69, 0xaf, 0x47, 0x39, 0x66, 0x17, 0x7a, 0x29, 0xf3, 0x93, 0x1c, 0x73, 0xc8, 0xdd, 0x9e,
	0x08, 0x86, 0x60, 0xb7, 0xc6, 0xf4, 0x67, 0xb9, 0x08, 0x51, 0x9a, 0xd2, 0x4e, 0xbf, 0x5e, 0xc7,
	0x93, 0x3b, 0x45, 0x99, 0xd0, 0x77, 0x42, 0xa9, 0x64, 0xf2, 0x37, 0xeb, 0xec, 0x32, 0x39, 0x9f,
	0xc9, 0xa3, 0x12, 0x01, 0x4e, 0x7f, 0x9b, 0x0f, 0x83, 0x4b, 0x9e, 0x84, 0xfe, 0xbb, 0x5c, 0x8f,
	0xbd, 0x31, 0x1e, 0x4b, 0x3c, 0xb1, 0xbf, 0xcf, 0xe1, 0x27, 0xe9, 0x91, 0xf8, 0xc3, 0x3a, 0x96,
	0x30, 0x19, 0x3c, 0xfe, 0x94, 0x18, 0x3f, 0x19, 0x7f, 0xcc, 0x67, 0x17, 0x5c, 0x37, 0x8d, 0xfd,
	0x4f, 0xb9, 0x18, 0x4e, 0x02, 0xf1, 0xd0, 0xb1, 0x21, 0xc0, 0xb9, 0xfe, 0xbc, 0xce, 0x9e, 0x26,
	0x57, 0x13, 0xe6, 0xae, 0x23, 0x5c, 0x2e, 0x21, 0xdc, 0xf1, 0x7d, 0xf0, 0xec, 0x63, 0xcf, 0x3d,
	0xa3, 0xff, 0x5c, 0x67, 0xd7, 0xc9, 0xd3, 0x93, 0xed, 0x0e, 0x47, 0xbd, 0x9e, 0xd3, 0x75, 0xc0,
	0x93, 0x99, 0xbf, 0x47, 0xf4, 0x5f, 0xeb, 0x9b, 0xbb, 0x64, 0x31, 0x29, 0xe6, 0x50, 0x05, 0x93,
	0x76, 0x67, 0x2f, 0x08, 0x04, 0xde, 0xdb, 0xf3, 0xea, 0x8b, 0x60, 0x84, 0xdd, 0xe3, 0x01, 0xaa,
	0x73, 0x16, 0x6a, 0x7a, 0x3d, 0x41, 0x4b, 0xb7, 0x3e, 0xfd, 0xce, 0x7b, 0xd5, 0xb9, 0x77, 0xdf,
	0xab, 0xce, 0x7d, 0xf0, 0x5e, 0x55, 0xfb, 0xdc, 0xe3, 0xaa, 0xf6, 0xd6, 0xe3, 0xaa, 0xf6, 0xf6,
	0xe3, 0xaa, 0xf6, 0xce, 0xe3, 0xaa, 0xf6, 0xf7, 0xc7, 0x55, 0xed, 0x1f, 0x8f, 0xab, 0x73, 0x1f,
	0x3c, 0xae, 0x6a, 0xaf, 0xbf, 0x5f, 0x9d, 0x7b, 0xe7, 0xfd, 0xea, 0xdc, 0xbb, 0xef, 0x57, 0xe7,
	0x3e, 0xb9, 0xd6, 0x77, 0xe4, 0x60, 0x74, 0x7a, 0xa3, 0x2b, 0x86, 0x2f, 0xf0, 0xa1, 0xff, 0xfc,
	0xb6, 0xad, 0x7e, 0x42, 0xfb, 0xfe, 0xf3, 0x7d, 0x81, 0xcd, 0x47, 0x85, 0xe2, 0xce, 0xe1, 0xc9,
	0x69, 0x59, 0x7d, 0x8d, 0xde, 0xfe, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x97, 0xfb, 0xdf,
	0xa2, 0x16, 0x00, 0x00,
}

func (x Const) String() string {
	s, ok := Const_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TxOpCode) String() string {
	s, ok := TxOpCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TxField) String() string {
	s, ok := TxField_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SelectOp) String() string {
	s, ok := SelectOp_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ReqStatus) String() string {
	s, ok := ReqStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PinFlags) String() string {
	s, ok := PinFlags_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CordType) String() string {
	s, ok := CordType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Enable) String() string {
	s, ok := Enable_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UrlScheme) String() string {
	s, ok := UrlScheme_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Metric) String() string {
	s, ok := Metric_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CryptoKitID) String() string {
	s, ok := CryptoKitID_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ErrCode) String() string {
	s, ok := ErrCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LogLevel) String() string {
	s, ok := LogLevel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TRS_VisualScaleMode) String() string {
	s, ok := TRS_VisualScaleMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TxInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxInfo)
	if !ok {
		that2, ok := that.(TxInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.NumOps != that1.NumOps {
		return false
	}
	if this.GenesisID_0 != that1.GenesisID_0 {
		return false
	}
	if this.GenesisID_1 != that1.GenesisID_1 {
		return false
	}
	if this.GenesisID_2 != that1.GenesisID_2 {
		return false
	}
	if this.ContextID_0 != that1.ContextID_0 {
		return false
	}
	if this.ContextID_1 != that1.ContextID_1 {
		return false
	}
	if this.ContextID_2 != that1.ContextID_2 {
		return false
	}
	return true
}
func (this *Login) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Login)
	if !ok {
		that2, ok := that.(Login)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserUID != that1.UserUID {
		return false
	}
	if this.HostAddr != that1.HostAddr {
		return false
	}
	if this.DeviceLabel != that1.DeviceLabel {
		return false
	}
	if this.DeviceUID != that1.DeviceUID {
		return false
	}
	if !this.Checkpoint.Equal(that1.Checkpoint) {
		return false
	}
	return true
}
func (this *LoginChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginChallenge)
	if !ok {
		that2, ok := that.(LoginChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	return true
}
func (this *LoginResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginResponse)
	if !ok {
		that2, ok := that.(LoginResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.HashResponse, that1.HashResponse) {
		return false
	}
	return true
}
func (this *AuthCheckpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthCheckpoint)
	if !ok {
		that2, ok := that.(AuthCheckpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if !this.SessionTag.Equal(that1.SessionTag) {
		return false
	}
	if !this.MemberTag.Equal(that1.MemberTag) {
		return false
	}
	if !this.HomeFeed.Equal(that1.HomeFeed) {
		return false
	}
	return true
}
func (this *HelloWorld) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HelloWorld)
	if !ok {
		that2, ok := that.(HelloWorld)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *HandleURL) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HandleURL)
	if !ok {
		that2, ok := that.(HandleURL)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	return true
}
func (this *FeedGenesis) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeedGenesis)
	if !ok {
		that2, ok := that.(FeedGenesis)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MintToTarget.Equal(that1.MintToTarget) {
		return false
	}
	if len(this.MintInstance) != len(that1.MintInstance) {
		return false
	}
	for i := range this.MintInstance {
		if !this.MintInstance[i].Equal(that1.MintInstance[i]) {
			return false
		}
	}
	return true
}
func (this *PinRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PinRequest)
	if !ok {
		that2, ok := that.(PinRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PinURL.Equal(that1.PinURL) {
		return false
	}
	if len(this.SyncAttrs) != len(that1.SyncAttrs) {
		return false
	}
	for i := range this.SyncAttrs {
		if !this.SyncAttrs[i].Equal(that1.SyncAttrs[i]) {
			return false
		}
	}
	if this.Flags != that1.Flags {
		return false
	}
	if this.TagQueryExpr != that1.TagQueryExpr {
		return false
	}
	return true
}
func (this *Position) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Position)
	if !ok {
		that2, ok := that.(Position)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CordType != that1.CordType {
		return false
	}
	if this.U != that1.U {
		return false
	}
	if this.V != that1.V {
		return false
	}
	if this.W != that1.W {
		return false
	}
	if this.ROU != that1.ROU {
		return false
	}
	return true
}
func (this *TagAttr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TagAttr)
	if !ok {
		that2, ok := that.(TagAttr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tag_0 != that1.Tag_0 {
		return false
	}
	if this.Tag_1 != that1.Tag_1 {
		return false
	}
	if this.Tag_2 != that1.Tag_2 {
		return false
	}
	if this.AttrSpec_0 != that1.AttrSpec_0 {
		return false
	}
	if this.AttrSpec_1 != that1.AttrSpec_1 {
		return false
	}
	if this.AttrSpec_2 != that1.AttrSpec_2 {
		return false
	}
	if this.SI_0 != that1.SI_0 {
		return false
	}
	if this.SI_1 != that1.SI_1 {
		return false
	}
	if this.SI_2 != that1.SI_2 {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	if !bytes.Equal(this.Attachment, that1.Attachment) {
		return false
	}
	if this.Metric != that1.Metric {
		return false
	}
	if this.Size_0 != that1.Size_0 {
		return false
	}
	if this.Size_1 != that1.Size_1 {
		return false
	}
	if this.Size_2 != that1.Size_2 {
		return false
	}
	if len(this.SubAttrs) != len(that1.SubAttrs) {
		return false
	}
	for i := range this.SubAttrs {
		if !this.SubAttrs[i].Equal(that1.SubAttrs[i]) {
			return false
		}
	}
	return true
}
func (this *TagTab) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TagTab)
	if !ok {
		that2, ok := that.(TagTab)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Caption != that1.Caption {
		return false
	}
	if this.About != that1.About {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.ModifiedAt != that1.ModifiedAt {
		return false
	}
	if !this.Link.Equal(that1.Link) {
		return false
	}
	return true
}
func (this *TagFeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TagFeed)
	if !ok {
		that2, ok := that.(TagFeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.App.Equal(that1.App) {
		return false
	}
	if !this.FeedSpec.Equal(that1.FeedSpec) {
		return false
	}
	if !this.TabUI.Equal(that1.TabUI) {
		return false
	}
	if !this.SheetUI.Equal(that1.SheetUI) {
		return false
	}
	if len(this.AttrFeeds) != len(that1.AttrFeeds) {
		return false
	}
	for i := range this.AttrFeeds {
		if !this.AttrFeeds[i].Equal(that1.AttrFeeds[i]) {
			return false
		}
	}
	if len(this.SubFeeds) != len(that1.SubFeeds) {
		return false
	}
	for i := range this.SubFeeds {
		if !this.SubFeeds[i].Equal(that1.SubFeeds[i]) {
			return false
		}
	}
	return true
}
func (this *TagBallotBox) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TagBallotBox)
	if !ok {
		that2, ok := that.(TagBallotBox)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TagNotes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TagNotes)
	if !ok {
		that2, ok := that.(TagNotes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TagChat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TagChat)
	if !ok {
		that2, ok := that.(TagChat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TagSpreadsheet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TagSpreadsheet)
	if !ok {
		that2, ok := that.(TagSpreadsheet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TagSurfaceGrid) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TagSurfaceGrid)
	if !ok {
		that2, ok := that.(TagSurfaceGrid)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TagSurfaceGeo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TagSurfaceGeo)
	if !ok {
		that2, ok := that.(TagSurfaceGeo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TagPlayableMedia) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TagPlayableMedia)
	if !ok {
		that2, ok := that.(TagPlayableMedia)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TagPlaylist) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TagPlaylist)
	if !ok {
		that2, ok := that.(TagPlaylist)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TagEpoch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TagEpoch)
	if !ok {
		that2, ok := that.(TagEpoch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PermissionsOps) != len(that1.PermissionsOps) {
		return false
	}
	for i := range this.PermissionsOps {
		if !this.PermissionsOps[i].Equal(that1.PermissionsOps[i]) {
			return false
		}
	}
	if len(this.InsertFeeds) != len(that1.InsertFeeds) {
		return false
	}
	for i := range this.InsertFeeds {
		if !this.InsertFeeds[i].Equal(that1.InsertFeeds[i]) {
			return false
		}
	}
	if len(this.RemoveFeeds) != len(that1.RemoveFeeds) {
		return false
	}
	for i := range this.RemoveFeeds {
		if !this.RemoveFeeds[i].Equal(that1.RemoveFeeds[i]) {
			return false
		}
	}
	return true
}
func (this *CryptoKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CryptoKey)
	if !ok {
		that2, ok := that.(CryptoKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CryptoKitID != that1.CryptoKitID {
		return false
	}
	if !bytes.Equal(this.KeyBytes, that1.KeyBytes) {
		return false
	}
	return true
}
func (this *AuthToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthToken)
	if !ok {
		that2, ok := that.(AuthToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccessToken != that1.AccessToken {
		return false
	}
	if this.TokenType != that1.TokenType {
		return false
	}
	if this.RefreshToken != that1.RefreshToken {
		return false
	}
	if this.Expiry != that1.Expiry {
		return false
	}
	return true
}
func (this *TRS) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TRS)
	if !ok {
		that2, ok := that.(TRS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X1 != that1.X1 {
		return false
	}
	if this.X2 != that1.X2 {
		return false
	}
	if this.X3 != that1.X3 {
		return false
	}
	if this.ScaleMode != that1.ScaleMode {
		return false
	}
	if this.Scale1 != that1.Scale1 {
		return false
	}
	if this.Scale2 != that1.Scale2 {
		return false
	}
	if this.Scale3 != that1.Scale3 {
		return false
	}
	if this.Rotate1 != that1.Rotate1 {
		return false
	}
	if this.Rotate2 != that1.Rotate2 {
		return false
	}
	if this.Rotate3 != that1.Rotate3 {
		return false
	}
	return true
}
func (this *DataSegment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataSegment)
	if !ok {
		that2, ok := that.(DataSegment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ByteOfs != that1.ByteOfs {
		return false
	}
	if this.ByteSz != that1.ByteSz {
		return false
	}
	if !bytes.Equal(this.InlineData, that1.InlineData) {
		return false
	}
	if this.StreamURI != that1.StreamURI {
		return false
	}
	if this.BlobID != that1.BlobID {
		return false
	}
	return true
}
func (this *Err) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Err)
	if !ok {
		that2, ok := that.(Err)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	return true
}
func (this *TxInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&amp.TxInfo{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "NumOps: "+fmt.Sprintf("%#v", this.NumOps)+",\n")
	s = append(s, "GenesisID_0: "+fmt.Sprintf("%#v", this.GenesisID_0)+",\n")
	s = append(s, "GenesisID_1: "+fmt.Sprintf("%#v", this.GenesisID_1)+",\n")
	s = append(s, "GenesisID_2: "+fmt.Sprintf("%#v", this.GenesisID_2)+",\n")
	s = append(s, "ContextID_0: "+fmt.Sprintf("%#v", this.ContextID_0)+",\n")
	s = append(s, "ContextID_1: "+fmt.Sprintf("%#v", this.ContextID_1)+",\n")
	s = append(s, "ContextID_2: "+fmt.Sprintf("%#v", this.ContextID_2)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Login) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&amp.Login{")
	s = append(s, "UserUID: "+fmt.Sprintf("%#v", this.UserUID)+",\n")
	s = append(s, "HostAddr: "+fmt.Sprintf("%#v", this.HostAddr)+",\n")
	s = append(s, "DeviceLabel: "+fmt.Sprintf("%#v", this.DeviceLabel)+",\n")
	s = append(s, "DeviceUID: "+fmt.Sprintf("%#v", this.DeviceUID)+",\n")
	if this.Checkpoint != nil {
		s = append(s, "Checkpoint: "+fmt.Sprintf("%#v", this.Checkpoint)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&amp.LoginChallenge{")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&amp.LoginResponse{")
	s = append(s, "HashResponse: "+fmt.Sprintf("%#v", this.HashResponse)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthCheckpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&amp.AuthCheckpoint{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	if this.SessionTag != nil {
		s = append(s, "SessionTag: "+fmt.Sprintf("%#v", this.SessionTag)+",\n")
	}
	if this.MemberTag != nil {
		s = append(s, "MemberTag: "+fmt.Sprintf("%#v", this.MemberTag)+",\n")
	}
	if this.HomeFeed != nil {
		s = append(s, "HomeFeed: "+fmt.Sprintf("%#v", this.HomeFeed)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HelloWorld) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&amp.HelloWorld{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HandleURL) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&amp.HandleURL{")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FeedGenesis) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&amp.FeedGenesis{")
	if this.MintToTarget != nil {
		s = append(s, "MintToTarget: "+fmt.Sprintf("%#v", this.MintToTarget)+",\n")
	}
	if this.MintInstance != nil {
		s = append(s, "MintInstance: "+fmt.Sprintf("%#v", this.MintInstance)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PinRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&amp.PinRequest{")
	if this.PinURL != nil {
		s = append(s, "PinURL: "+fmt.Sprintf("%#v", this.PinURL)+",\n")
	}
	if this.SyncAttrs != nil {
		s = append(s, "SyncAttrs: "+fmt.Sprintf("%#v", this.SyncAttrs)+",\n")
	}
	s = append(s, "Flags: "+fmt.Sprintf("%#v", this.Flags)+",\n")
	s = append(s, "TagQueryExpr: "+fmt.Sprintf("%#v", this.TagQueryExpr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Position) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&amp.Position{")
	s = append(s, "CordType: "+fmt.Sprintf("%#v", this.CordType)+",\n")
	s = append(s, "U: "+fmt.Sprintf("%#v", this.U)+",\n")
	s = append(s, "V: "+fmt.Sprintf("%#v", this.V)+",\n")
	s = append(s, "W: "+fmt.Sprintf("%#v", this.W)+",\n")
	s = append(s, "ROU: "+fmt.Sprintf("%#v", this.ROU)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagAttr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&amp.TagAttr{")
	s = append(s, "Tag_0: "+fmt.Sprintf("%#v", this.Tag_0)+",\n")
	s = append(s, "Tag_1: "+fmt.Sprintf("%#v", this.Tag_1)+",\n")
	s = append(s, "Tag_2: "+fmt.Sprintf("%#v", this.Tag_2)+",\n")
	s = append(s, "AttrSpec_0: "+fmt.Sprintf("%#v", this.AttrSpec_0)+",\n")
	s = append(s, "AttrSpec_1: "+fmt.Sprintf("%#v", this.AttrSpec_1)+",\n")
	s = append(s, "AttrSpec_2: "+fmt.Sprintf("%#v", this.AttrSpec_2)+",\n")
	s = append(s, "SI_0: "+fmt.Sprintf("%#v", this.SI_0)+",\n")
	s = append(s, "SI_1: "+fmt.Sprintf("%#v", this.SI_1)+",\n")
	s = append(s, "SI_2: "+fmt.Sprintf("%#v", this.SI_2)+",\n")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "Attachment: "+fmt.Sprintf("%#v", this.Attachment)+",\n")
	s = append(s, "Metric: "+fmt.Sprintf("%#v", this.Metric)+",\n")
	s = append(s, "Size_0: "+fmt.Sprintf("%#v", this.Size_0)+",\n")
	s = append(s, "Size_1: "+fmt.Sprintf("%#v", this.Size_1)+",\n")
	s = append(s, "Size_2: "+fmt.Sprintf("%#v", this.Size_2)+",\n")
	if this.SubAttrs != nil {
		s = append(s, "SubAttrs: "+fmt.Sprintf("%#v", this.SubAttrs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagTab) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&amp.TagTab{")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "Caption: "+fmt.Sprintf("%#v", this.Caption)+",\n")
	s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "ModifiedAt: "+fmt.Sprintf("%#v", this.ModifiedAt)+",\n")
	if this.Link != nil {
		s = append(s, "Link: "+fmt.Sprintf("%#v", this.Link)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagFeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&amp.TagFeed{")
	if this.App != nil {
		s = append(s, "App: "+fmt.Sprintf("%#v", this.App)+",\n")
	}
	if this.FeedSpec != nil {
		s = append(s, "FeedSpec: "+fmt.Sprintf("%#v", this.FeedSpec)+",\n")
	}
	if this.TabUI != nil {
		s = append(s, "TabUI: "+fmt.Sprintf("%#v", this.TabUI)+",\n")
	}
	if this.SheetUI != nil {
		s = append(s, "SheetUI: "+fmt.Sprintf("%#v", this.SheetUI)+",\n")
	}
	if this.AttrFeeds != nil {
		s = append(s, "AttrFeeds: "+fmt.Sprintf("%#v", this.AttrFeeds)+",\n")
	}
	if this.SubFeeds != nil {
		s = append(s, "SubFeeds: "+fmt.Sprintf("%#v", this.SubFeeds)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagBallotBox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&amp.TagBallotBox{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagNotes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&amp.TagNotes{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagChat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&amp.TagChat{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagSpreadsheet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&amp.TagSpreadsheet{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagSurfaceGrid) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&amp.TagSurfaceGrid{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagSurfaceGeo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&amp.TagSurfaceGeo{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagPlayableMedia) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&amp.TagPlayableMedia{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagPlaylist) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&amp.TagPlaylist{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagEpoch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&amp.TagEpoch{")
	if this.PermissionsOps != nil {
		s = append(s, "PermissionsOps: "+fmt.Sprintf("%#v", this.PermissionsOps)+",\n")
	}
	if this.InsertFeeds != nil {
		s = append(s, "InsertFeeds: "+fmt.Sprintf("%#v", this.InsertFeeds)+",\n")
	}
	if this.RemoveFeeds != nil {
		s = append(s, "RemoveFeeds: "+fmt.Sprintf("%#v", this.RemoveFeeds)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CryptoKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&amp.CryptoKey{")
	s = append(s, "CryptoKitID: "+fmt.Sprintf("%#v", this.CryptoKitID)+",\n")
	s = append(s, "KeyBytes: "+fmt.Sprintf("%#v", this.KeyBytes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&amp.AuthToken{")
	s = append(s, "AccessToken: "+fmt.Sprintf("%#v", this.AccessToken)+",\n")
	s = append(s, "TokenType: "+fmt.Sprintf("%#v", this.TokenType)+",\n")
	s = append(s, "RefreshToken: "+fmt.Sprintf("%#v", this.RefreshToken)+",\n")
	s = append(s, "Expiry: "+fmt.Sprintf("%#v", this.Expiry)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TRS) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&amp.TRS{")
	s = append(s, "X1: "+fmt.Sprintf("%#v", this.X1)+",\n")
	s = append(s, "X2: "+fmt.Sprintf("%#v", this.X2)+",\n")
	s = append(s, "X3: "+fmt.Sprintf("%#v", this.X3)+",\n")
	s = append(s, "ScaleMode: "+fmt.Sprintf("%#v", this.ScaleMode)+",\n")
	s = append(s, "Scale1: "+fmt.Sprintf("%#v", this.Scale1)+",\n")
	s = append(s, "Scale2: "+fmt.Sprintf("%#v", this.Scale2)+",\n")
	s = append(s, "Scale3: "+fmt.Sprintf("%#v", this.Scale3)+",\n")
	s = append(s, "Rotate1: "+fmt.Sprintf("%#v", this.Rotate1)+",\n")
	s = append(s, "Rotate2: "+fmt.Sprintf("%#v", this.Rotate2)+",\n")
	s = append(s, "Rotate3: "+fmt.Sprintf("%#v", this.Rotate3)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DataSegment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&amp.DataSegment{")
	s = append(s, "ByteOfs: "+fmt.Sprintf("%#v", this.ByteOfs)+",\n")
	s = append(s, "ByteSz: "+fmt.Sprintf("%#v", this.ByteSz)+",\n")
	s = append(s, "InlineData: "+fmt.Sprintf("%#v", this.InlineData)+",\n")
	s = append(s, "StreamURI: "+fmt.Sprintf("%#v", this.StreamURI)+",\n")
	s = append(s, "BlobID: "+fmt.Sprintf("%#v", this.BlobID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Err) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&amp.Err{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApiAmp(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TxInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContextID_2 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ContextID_2))
		i--
		dAtA[i] = 0x61
	}
	if m.ContextID_1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ContextID_1))
		i--
		dAtA[i] = 0x59
	}
	if m.ContextID_0 != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.ContextID_0))
		i--
		dAtA[i] = 0x50
	}
	if m.GenesisID_2 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.GenesisID_2))
		i--
		dAtA[i] = 0x49
	}
	if m.GenesisID_1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.GenesisID_1))
		i--
		dAtA[i] = 0x41
	}
	if m.GenesisID_0 != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.GenesisID_0))
		i--
		dAtA[i] = 0x38
	}
	if m.NumOps != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.NumOps))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *Login) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Login) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Login) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Checkpoint != nil {
		{
			size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.DeviceUID) > 0 {
		i -= len(m.DeviceUID)
		copy(dAtA[i:], m.DeviceUID)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.DeviceUID)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DeviceLabel) > 0 {
		i -= len(m.DeviceLabel)
		copy(dAtA[i:], m.DeviceLabel)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.DeviceLabel)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.HostAddr) > 0 {
		i -= len(m.HostAddr)
		copy(dAtA[i:], m.HostAddr)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.HostAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserUID) > 0 {
		i -= len(m.UserUID)
		copy(dAtA[i:], m.UserUID)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.UserUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HashResponse) > 0 {
		i -= len(m.HashResponse)
		copy(dAtA[i:], m.HashResponse)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.HashResponse)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthCheckpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MemberTag != nil {
		{
			size, err := m.MemberTag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.SessionTag != nil {
		{
			size, err := m.SessionTag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.HomeFeed != nil {
		{
			size, err := m.HomeFeed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HelloWorld) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloWorld) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloWorld) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *HandleURL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleURL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HandleURL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeedGenesis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedGenesis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedGenesis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MintInstance) > 0 {
		for iNdEx := len(m.MintInstance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MintInstance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiAmp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MintToTarget != nil {
		{
			size, err := m.MintToTarget.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TagQueryExpr) > 0 {
		i -= len(m.TagQueryExpr)
		copy(dAtA[i:], m.TagQueryExpr)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.TagQueryExpr)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Flags != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x50
	}
	if len(m.SyncAttrs) > 0 {
		for iNdEx := len(m.SyncAttrs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SyncAttrs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiAmp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.PinURL != nil {
		{
			size, err := m.PinURL.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ROU != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ROU))))
		i--
		dAtA[i] = 0x35
	}
	if m.W != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.W))))
		i--
		dAtA[i] = 0x29
	}
	if m.V != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.V))))
		i--
		dAtA[i] = 0x21
	}
	if m.U != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.U))))
		i--
		dAtA[i] = 0x19
	}
	if m.CordType != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.CordType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TagAttr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagAttr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagAttr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubAttrs) > 0 {
		for iNdEx := len(m.SubAttrs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubAttrs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiAmp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.Size_2 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Size_2))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x99
	}
	if m.Size_1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Size_1))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x91
	}
	if m.Size_0 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Size_0))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x89
	}
	if m.Metric != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.Metric))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Attachment) > 0 {
		i -= len(m.Attachment)
		copy(dAtA[i:], m.Attachment)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.Attachment)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x6a
	}
	if m.SI_2 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SI_2))
		i--
		dAtA[i] = 0x61
	}
	if m.SI_1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SI_1))
		i--
		dAtA[i] = 0x59
	}
	if m.SI_0 != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.SI_0))
		i--
		dAtA[i] = 0x50
	}
	if m.AttrSpec_2 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AttrSpec_2))
		i--
		dAtA[i] = 0x39
	}
	if m.AttrSpec_1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AttrSpec_1))
		i--
		dAtA[i] = 0x31
	}
	if m.AttrSpec_0 != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.AttrSpec_0))
		i--
		dAtA[i] = 0x28
	}
	if m.Tag_2 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Tag_2))
		i--
		dAtA[i] = 0x21
	}
	if m.Tag_1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Tag_1))
		i--
		dAtA[i] = 0x19
	}
	if m.Tag_0 != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.Tag_0))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TagTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Link != nil {
		{
			size, err := m.Link.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.ModifiedAt != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.ModifiedAt))
		i--
		dAtA[i] = 0x48
	}
	if m.CreatedAt != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x40
	}
	if len(m.About) > 0 {
		i -= len(m.About)
		copy(dAtA[i:], m.About)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.About)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Caption) > 0 {
		i -= len(m.Caption)
		copy(dAtA[i:], m.Caption)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.Caption)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TagFeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagFeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagFeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubFeeds) > 0 {
		for iNdEx := len(m.SubFeeds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubFeeds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiAmp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.AttrFeeds) > 0 {
		for iNdEx := len(m.AttrFeeds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttrFeeds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiAmp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.SheetUI != nil {
		{
			size, err := m.SheetUI.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TabUI != nil {
		{
			size, err := m.TabUI.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.FeedSpec != nil {
		{
			size, err := m.FeedSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.App != nil {
		{
			size, err := m.App.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiAmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TagBallotBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagBallotBox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagBallotBox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TagNotes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagNotes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagNotes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TagChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TagSpreadsheet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagSpreadsheet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagSpreadsheet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TagSurfaceGrid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagSurfaceGrid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagSurfaceGrid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TagSurfaceGeo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagSurfaceGeo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagSurfaceGeo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TagPlayableMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagPlayableMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagPlayableMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TagPlaylist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagPlaylist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagPlaylist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TagEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagEpoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagEpoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoveFeeds) > 0 {
		for iNdEx := len(m.RemoveFeeds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemoveFeeds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiAmp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.InsertFeeds) > 0 {
		for iNdEx := len(m.InsertFeeds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InsertFeeds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiAmp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PermissionsOps) > 0 {
		for iNdEx := len(m.PermissionsOps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PermissionsOps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiAmp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *CryptoKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CryptoKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyBytes) > 0 {
		i -= len(m.KeyBytes)
		copy(dAtA[i:], m.KeyBytes)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.KeyBytes)))
		i--
		dAtA[i] = 0x22
	}
	if m.CryptoKitID != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.CryptoKitID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuthToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiry != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RefreshToken) > 0 {
		i -= len(m.RefreshToken)
		copy(dAtA[i:], m.RefreshToken)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.RefreshToken)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenType) > 0 {
		i -= len(m.TokenType)
		copy(dAtA[i:], m.TokenType)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.TokenType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TRS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TRS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TRS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rotate3 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rotate3))))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfd
	}
	if m.Rotate2 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rotate2))))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf5
	}
	if m.Rotate1 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rotate1))))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xed
	}
	if m.Scale3 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Scale3))))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xad
	}
	if m.Scale2 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Scale2))))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa5
	}
	if m.Scale1 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Scale1))))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9d
	}
	if m.ScaleMode != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.ScaleMode))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x90
	}
	if m.X3 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.X3))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd9
	}
	if m.X2 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.X2))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd1
	}
	if m.X1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.X1))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc9
	}
	return len(dAtA) - i, nil
}

func (m *DataSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlobID != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.BlobID))
		i--
		dAtA[i] = 0x50
	}
	if len(m.StreamURI) > 0 {
		i -= len(m.StreamURI)
		copy(dAtA[i:], m.StreamURI)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.StreamURI)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.InlineData) > 0 {
		i -= len(m.InlineData)
		copy(dAtA[i:], m.InlineData)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.InlineData)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ByteSz != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.ByteSz))
		i--
		dAtA[i] = 0x30
	}
	if m.ByteOfs != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.ByteOfs))
		i--
		dAtA[i] = 0x28
	}
	return len(dAtA) - i, nil
}

func (m *Err) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Err) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Err) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintApiAmp(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x22
	}
	if m.Level != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintApiAmp(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApiAmp(dAtA []byte, offset int, v uint64) int {
	offset -= sovApiAmp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovApiAmp(uint64(m.Status))
	}
	if m.NumOps != 0 {
		n += 1 + sovApiAmp(uint64(m.NumOps))
	}
	if m.GenesisID_0 != 0 {
		n += 1 + sovApiAmp(uint64(m.GenesisID_0))
	}
	if m.GenesisID_1 != 0 {
		n += 9
	}
	if m.GenesisID_2 != 0 {
		n += 9
	}
	if m.ContextID_0 != 0 {
		n += 1 + sovApiAmp(uint64(m.ContextID_0))
	}
	if m.ContextID_1 != 0 {
		n += 9
	}
	if m.ContextID_2 != 0 {
		n += 9
	}
	return n
}

func (m *Login) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserUID)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	l = len(m.HostAddr)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	l = len(m.DeviceLabel)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	l = len(m.DeviceUID)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	if m.Checkpoint != nil {
		l = m.Checkpoint.Size()
		n += 1 + l + sovApiAmp(uint64(l))
	}
	return n
}

func (m *LoginChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	return n
}

func (m *LoginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashResponse)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	return n
}

func (m *AuthCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	if m.HomeFeed != nil {
		l = m.HomeFeed.Size()
		n += 1 + l + sovApiAmp(uint64(l))
	}
	if m.SessionTag != nil {
		l = m.SessionTag.Size()
		n += 1 + l + sovApiAmp(uint64(l))
	}
	if m.MemberTag != nil {
		l = m.MemberTag.Size()
		n += 1 + l + sovApiAmp(uint64(l))
	}
	return n
}

func (m *HelloWorld) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HandleURL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	return n
}

func (m *FeedGenesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MintToTarget != nil {
		l = m.MintToTarget.Size()
		n += 1 + l + sovApiAmp(uint64(l))
	}
	if len(m.MintInstance) > 0 {
		for _, e := range m.MintInstance {
			l = e.Size()
			n += 1 + l + sovApiAmp(uint64(l))
		}
	}
	return n
}

func (m *PinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PinURL != nil {
		l = m.PinURL.Size()
		n += 1 + l + sovApiAmp(uint64(l))
	}
	if len(m.SyncAttrs) > 0 {
		for _, e := range m.SyncAttrs {
			l = e.Size()
			n += 1 + l + sovApiAmp(uint64(l))
		}
	}
	if m.Flags != 0 {
		n += 1 + sovApiAmp(uint64(m.Flags))
	}
	l = len(m.TagQueryExpr)
	if l > 0 {
		n += 2 + l + sovApiAmp(uint64(l))
	}
	return n
}

func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CordType != 0 {
		n += 1 + sovApiAmp(uint64(m.CordType))
	}
	if m.U != 0 {
		n += 9
	}
	if m.V != 0 {
		n += 9
	}
	if m.W != 0 {
		n += 9
	}
	if m.ROU != 0 {
		n += 5
	}
	return n
}

func (m *TagAttr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tag_0 != 0 {
		n += 1 + sovApiAmp(uint64(m.Tag_0))
	}
	if m.Tag_1 != 0 {
		n += 9
	}
	if m.Tag_2 != 0 {
		n += 9
	}
	if m.AttrSpec_0 != 0 {
		n += 1 + sovApiAmp(uint64(m.AttrSpec_0))
	}
	if m.AttrSpec_1 != 0 {
		n += 9
	}
	if m.AttrSpec_2 != 0 {
		n += 9
	}
	if m.SI_0 != 0 {
		n += 1 + sovApiAmp(uint64(m.SI_0))
	}
	if m.SI_1 != 0 {
		n += 9
	}
	if m.SI_2 != 0 {
		n += 9
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	l = len(m.Attachment)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	if m.Metric != 0 {
		n += 2 + sovApiAmp(uint64(m.Metric))
	}
	if m.Size_0 != 0 {
		n += 10
	}
	if m.Size_1 != 0 {
		n += 10
	}
	if m.Size_2 != 0 {
		n += 10
	}
	if len(m.SubAttrs) > 0 {
		for _, e := range m.SubAttrs {
			l = e.Size()
			n += 2 + l + sovApiAmp(uint64(l))
		}
	}
	return n
}

func (m *TagTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	l = len(m.Caption)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovApiAmp(uint64(m.CreatedAt))
	}
	if m.ModifiedAt != 0 {
		n += 1 + sovApiAmp(uint64(m.ModifiedAt))
	}
	if m.Link != nil {
		l = m.Link.Size()
		n += 2 + l + sovApiAmp(uint64(l))
	}
	return n
}

func (m *TagFeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.App != nil {
		l = m.App.Size()
		n += 1 + l + sovApiAmp(uint64(l))
	}
	if m.FeedSpec != nil {
		l = m.FeedSpec.Size()
		n += 1 + l + sovApiAmp(uint64(l))
	}
	if m.TabUI != nil {
		l = m.TabUI.Size()
		n += 1 + l + sovApiAmp(uint64(l))
	}
	if m.SheetUI != nil {
		l = m.SheetUI.Size()
		n += 1 + l + sovApiAmp(uint64(l))
	}
	if len(m.AttrFeeds) > 0 {
		for _, e := range m.AttrFeeds {
			l = e.Size()
			n += 1 + l + sovApiAmp(uint64(l))
		}
	}
	if len(m.SubFeeds) > 0 {
		for _, e := range m.SubFeeds {
			l = e.Size()
			n += 1 + l + sovApiAmp(uint64(l))
		}
	}
	return n
}

func (m *TagBallotBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TagNotes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TagChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TagSpreadsheet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TagSurfaceGrid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TagSurfaceGeo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TagPlayableMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TagPlaylist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TagEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PermissionsOps) > 0 {
		for _, e := range m.PermissionsOps {
			l = e.Size()
			n += 1 + l + sovApiAmp(uint64(l))
		}
	}
	if len(m.InsertFeeds) > 0 {
		for _, e := range m.InsertFeeds {
			l = e.Size()
			n += 1 + l + sovApiAmp(uint64(l))
		}
	}
	if len(m.RemoveFeeds) > 0 {
		for _, e := range m.RemoveFeeds {
			l = e.Size()
			n += 1 + l + sovApiAmp(uint64(l))
		}
	}
	return n
}

func (m *CryptoKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CryptoKitID != 0 {
		n += 1 + sovApiAmp(uint64(m.CryptoKitID))
	}
	l = len(m.KeyBytes)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	return n
}

func (m *AuthToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	l = len(m.TokenType)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovApiAmp(uint64(m.Expiry))
	}
	return n
}

func (m *TRS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X1 != 0 {
		n += 10
	}
	if m.X2 != 0 {
		n += 10
	}
	if m.X3 != 0 {
		n += 10
	}
	if m.ScaleMode != 0 {
		n += 2 + sovApiAmp(uint64(m.ScaleMode))
	}
	if m.Scale1 != 0 {
		n += 6
	}
	if m.Scale2 != 0 {
		n += 6
	}
	if m.Scale3 != 0 {
		n += 6
	}
	if m.Rotate1 != 0 {
		n += 6
	}
	if m.Rotate2 != 0 {
		n += 6
	}
	if m.Rotate3 != 0 {
		n += 6
	}
	return n
}

func (m *DataSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ByteOfs != 0 {
		n += 1 + sovApiAmp(uint64(m.ByteOfs))
	}
	if m.ByteSz != 0 {
		n += 1 + sovApiAmp(uint64(m.ByteSz))
	}
	l = len(m.InlineData)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	l = len(m.StreamURI)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	if m.BlobID != 0 {
		n += 1 + sovApiAmp(uint64(m.BlobID))
	}
	return n
}

func (m *Err) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApiAmp(uint64(m.Code))
	}
	if m.Level != 0 {
		n += 1 + sovApiAmp(uint64(m.Level))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovApiAmp(uint64(l))
	}
	return n
}

func sovApiAmp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApiAmp(x uint64) (n int) {
	return sovApiAmp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TxInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxInfo{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`NumOps:` + fmt.Sprintf("%v", this.NumOps) + `,`,
		`GenesisID_0:` + fmt.Sprintf("%v", this.GenesisID_0) + `,`,
		`GenesisID_1:` + fmt.Sprintf("%v", this.GenesisID_1) + `,`,
		`GenesisID_2:` + fmt.Sprintf("%v", this.GenesisID_2) + `,`,
		`ContextID_0:` + fmt.Sprintf("%v", this.ContextID_0) + `,`,
		`ContextID_1:` + fmt.Sprintf("%v", this.ContextID_1) + `,`,
		`ContextID_2:` + fmt.Sprintf("%v", this.ContextID_2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Login) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Login{`,
		`UserUID:` + fmt.Sprintf("%v", this.UserUID) + `,`,
		`HostAddr:` + fmt.Sprintf("%v", this.HostAddr) + `,`,
		`DeviceLabel:` + fmt.Sprintf("%v", this.DeviceLabel) + `,`,
		`DeviceUID:` + fmt.Sprintf("%v", this.DeviceUID) + `,`,
		`Checkpoint:` + strings.Replace(this.Checkpoint.String(), "AuthCheckpoint", "AuthCheckpoint", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginChallenge{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginResponse{`,
		`HashResponse:` + fmt.Sprintf("%v", this.HashResponse) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthCheckpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthCheckpoint{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`HomeFeed:` + strings.Replace(this.HomeFeed.String(), "TagAttr", "TagAttr", 1) + `,`,
		`SessionTag:` + strings.Replace(this.SessionTag.String(), "TagAttr", "TagAttr", 1) + `,`,
		`MemberTag:` + strings.Replace(this.MemberTag.String(), "TagAttr", "TagAttr", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HelloWorld) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HelloWorld{`,
		`}`,
	}, "")
	return s
}
func (this *HandleURL) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HandleURL{`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeedGenesis) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMintInstance := "[]*TagFeed{"
	for _, f := range this.MintInstance {
		repeatedStringForMintInstance += strings.Replace(f.String(), "TagFeed", "TagFeed", 1) + ","
	}
	repeatedStringForMintInstance += "}"
	s := strings.Join([]string{`&FeedGenesis{`,
		`MintToTarget:` + strings.Replace(this.MintToTarget.String(), "TagAttr", "TagAttr", 1) + `,`,
		`MintInstance:` + repeatedStringForMintInstance + `,`,
		`}`,
	}, "")
	return s
}
func (this *PinRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSyncAttrs := "[]*TagAttr{"
	for _, f := range this.SyncAttrs {
		repeatedStringForSyncAttrs += strings.Replace(f.String(), "TagAttr", "TagAttr", 1) + ","
	}
	repeatedStringForSyncAttrs += "}"
	s := strings.Join([]string{`&PinRequest{`,
		`PinURL:` + strings.Replace(this.PinURL.String(), "TagAttr", "TagAttr", 1) + `,`,
		`SyncAttrs:` + repeatedStringForSyncAttrs + `,`,
		`Flags:` + fmt.Sprintf("%v", this.Flags) + `,`,
		`TagQueryExpr:` + fmt.Sprintf("%v", this.TagQueryExpr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Position) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Position{`,
		`CordType:` + fmt.Sprintf("%v", this.CordType) + `,`,
		`U:` + fmt.Sprintf("%v", this.U) + `,`,
		`V:` + fmt.Sprintf("%v", this.V) + `,`,
		`W:` + fmt.Sprintf("%v", this.W) + `,`,
		`ROU:` + fmt.Sprintf("%v", this.ROU) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TagAttr) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubAttrs := "[]*TagAttr{"
	for _, f := range this.SubAttrs {
		repeatedStringForSubAttrs += strings.Replace(f.String(), "TagAttr", "TagAttr", 1) + ","
	}
	repeatedStringForSubAttrs += "}"
	s := strings.Join([]string{`&TagAttr{`,
		`Tag_0:` + fmt.Sprintf("%v", this.Tag_0) + `,`,
		`Tag_1:` + fmt.Sprintf("%v", this.Tag_1) + `,`,
		`Tag_2:` + fmt.Sprintf("%v", this.Tag_2) + `,`,
		`AttrSpec_0:` + fmt.Sprintf("%v", this.AttrSpec_0) + `,`,
		`AttrSpec_1:` + fmt.Sprintf("%v", this.AttrSpec_1) + `,`,
		`AttrSpec_2:` + fmt.Sprintf("%v", this.AttrSpec_2) + `,`,
		`SI_0:` + fmt.Sprintf("%v", this.SI_0) + `,`,
		`SI_1:` + fmt.Sprintf("%v", this.SI_1) + `,`,
		`SI_2:` + fmt.Sprintf("%v", this.SI_2) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`Attachment:` + fmt.Sprintf("%v", this.Attachment) + `,`,
		`Metric:` + fmt.Sprintf("%v", this.Metric) + `,`,
		`Size_0:` + fmt.Sprintf("%v", this.Size_0) + `,`,
		`Size_1:` + fmt.Sprintf("%v", this.Size_1) + `,`,
		`Size_2:` + fmt.Sprintf("%v", this.Size_2) + `,`,
		`SubAttrs:` + repeatedStringForSubAttrs + `,`,
		`}`,
	}, "")
	return s
}
func (this *TagTab) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagTab{`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`Caption:` + fmt.Sprintf("%v", this.Caption) + `,`,
		`About:` + fmt.Sprintf("%v", this.About) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`ModifiedAt:` + fmt.Sprintf("%v", this.ModifiedAt) + `,`,
		`Link:` + strings.Replace(this.Link.String(), "TagAttr", "TagAttr", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TagFeed) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttrFeeds := "[]*TagAttr{"
	for _, f := range this.AttrFeeds {
		repeatedStringForAttrFeeds += strings.Replace(f.String(), "TagAttr", "TagAttr", 1) + ","
	}
	repeatedStringForAttrFeeds += "}"
	repeatedStringForSubFeeds := "[]*TagFeed{"
	for _, f := range this.SubFeeds {
		repeatedStringForSubFeeds += strings.Replace(f.String(), "TagFeed", "TagFeed", 1) + ","
	}
	repeatedStringForSubFeeds += "}"
	s := strings.Join([]string{`&TagFeed{`,
		`App:` + strings.Replace(this.App.String(), "TagAttr", "TagAttr", 1) + `,`,
		`FeedSpec:` + strings.Replace(this.FeedSpec.String(), "TagAttr", "TagAttr", 1) + `,`,
		`TabUI:` + strings.Replace(this.TabUI.String(), "TagAttr", "TagAttr", 1) + `,`,
		`SheetUI:` + strings.Replace(this.SheetUI.String(), "TagAttr", "TagAttr", 1) + `,`,
		`AttrFeeds:` + repeatedStringForAttrFeeds + `,`,
		`SubFeeds:` + repeatedStringForSubFeeds + `,`,
		`}`,
	}, "")
	return s
}
func (this *TagBallotBox) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagBallotBox{`,
		`}`,
	}, "")
	return s
}
func (this *TagNotes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagNotes{`,
		`}`,
	}, "")
	return s
}
func (this *TagChat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagChat{`,
		`}`,
	}, "")
	return s
}
func (this *TagSpreadsheet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagSpreadsheet{`,
		`}`,
	}, "")
	return s
}
func (this *TagSurfaceGrid) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagSurfaceGrid{`,
		`}`,
	}, "")
	return s
}
func (this *TagSurfaceGeo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagSurfaceGeo{`,
		`}`,
	}, "")
	return s
}
func (this *TagPlayableMedia) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagPlayableMedia{`,
		`}`,
	}, "")
	return s
}
func (this *TagPlaylist) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagPlaylist{`,
		`}`,
	}, "")
	return s
}
func (this *TagEpoch) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPermissionsOps := "[]*TagAttr{"
	for _, f := range this.PermissionsOps {
		repeatedStringForPermissionsOps += strings.Replace(f.String(), "TagAttr", "TagAttr", 1) + ","
	}
	repeatedStringForPermissionsOps += "}"
	repeatedStringForInsertFeeds := "[]*TagFeed{"
	for _, f := range this.InsertFeeds {
		repeatedStringForInsertFeeds += strings.Replace(f.String(), "TagFeed", "TagFeed", 1) + ","
	}
	repeatedStringForInsertFeeds += "}"
	repeatedStringForRemoveFeeds := "[]*TagFeed{"
	for _, f := range this.RemoveFeeds {
		repeatedStringForRemoveFeeds += strings.Replace(f.String(), "TagFeed", "TagFeed", 1) + ","
	}
	repeatedStringForRemoveFeeds += "}"
	s := strings.Join([]string{`&TagEpoch{`,
		`PermissionsOps:` + repeatedStringForPermissionsOps + `,`,
		`InsertFeeds:` + repeatedStringForInsertFeeds + `,`,
		`RemoveFeeds:` + repeatedStringForRemoveFeeds + `,`,
		`}`,
	}, "")
	return s
}
func (this *CryptoKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CryptoKey{`,
		`CryptoKitID:` + fmt.Sprintf("%v", this.CryptoKitID) + `,`,
		`KeyBytes:` + fmt.Sprintf("%v", this.KeyBytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthToken{`,
		`AccessToken:` + fmt.Sprintf("%v", this.AccessToken) + `,`,
		`TokenType:` + fmt.Sprintf("%v", this.TokenType) + `,`,
		`RefreshToken:` + fmt.Sprintf("%v", this.RefreshToken) + `,`,
		`Expiry:` + fmt.Sprintf("%v", this.Expiry) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TRS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TRS{`,
		`X1:` + fmt.Sprintf("%v", this.X1) + `,`,
		`X2:` + fmt.Sprintf("%v", this.X2) + `,`,
		`X3:` + fmt.Sprintf("%v", this.X3) + `,`,
		`ScaleMode:` + fmt.Sprintf("%v", this.ScaleMode) + `,`,
		`Scale1:` + fmt.Sprintf("%v", this.Scale1) + `,`,
		`Scale2:` + fmt.Sprintf("%v", this.Scale2) + `,`,
		`Scale3:` + fmt.Sprintf("%v", this.Scale3) + `,`,
		`Rotate1:` + fmt.Sprintf("%v", this.Rotate1) + `,`,
		`Rotate2:` + fmt.Sprintf("%v", this.Rotate2) + `,`,
		`Rotate3:` + fmt.Sprintf("%v", this.Rotate3) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataSegment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataSegment{`,
		`ByteOfs:` + fmt.Sprintf("%v", this.ByteOfs) + `,`,
		`ByteSz:` + fmt.Sprintf("%v", this.ByteSz) + `,`,
		`InlineData:` + fmt.Sprintf("%v", this.InlineData) + `,`,
		`StreamURI:` + fmt.Sprintf("%v", this.StreamURI) + `,`,
		`BlobID:` + fmt.Sprintf("%v", this.BlobID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Err) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Err{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApiAmp(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TxInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ReqStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOps", wireType)
			}
			m.NumOps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOps |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisID_0", wireType)
			}
			m.GenesisID_0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GenesisID_0 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisID_1", wireType)
			}
			m.GenesisID_1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisID_1 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisID_2", wireType)
			}
			m.GenesisID_2 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisID_2 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextID_0", wireType)
			}
			m.ContextID_0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContextID_0 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextID_1", wireType)
			}
			m.ContextID_1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextID_1 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextID_2", wireType)
			}
			m.ContextID_2 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextID_2 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Login) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Login: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Login: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Checkpoint == nil {
				m.Checkpoint = &AuthCheckpoint{}
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashResponse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashResponse = append(m.HashResponse[:0], dAtA[iNdEx:postIndex]...)
			if m.HashResponse == nil {
				m.HashResponse = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeFeed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HomeFeed == nil {
				m.HomeFeed = &TagAttr{}
			}
			if err := m.HomeFeed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionTag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionTag == nil {
				m.SessionTag = &TagAttr{}
			}
			if err := m.SessionTag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberTag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemberTag == nil {
				m.MemberTag = &TagAttr{}
			}
			if err := m.MemberTag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelloWorld) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloWorld: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloWorld: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleURL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleURL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleURL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedGenesis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedGenesis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedGenesis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintToTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MintToTarget == nil {
				m.MintToTarget = &TagAttr{}
			}
			if err := m.MintToTarget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintInstance = append(m.MintInstance, &TagFeed{})
			if err := m.MintInstance[len(m.MintInstance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinURL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PinURL == nil {
				m.PinURL = &TagAttr{}
			}
			if err := m.PinURL.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncAttrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SyncAttrs = append(m.SyncAttrs, &TagAttr{})
			if err := m.SyncAttrs[len(m.SyncAttrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= PinFlags(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagQueryExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagQueryExpr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CordType", wireType)
			}
			m.CordType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CordType |= CordType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field U", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.U = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.V = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field W", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.W = float64(math.Float64frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ROU", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ROU = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagAttr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagAttr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagAttr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag_0", wireType)
			}
			m.Tag_0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag_0 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag_1", wireType)
			}
			m.Tag_1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag_1 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag_2", wireType)
			}
			m.Tag_2 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag_2 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrSpec_0", wireType)
			}
			m.AttrSpec_0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttrSpec_0 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrSpec_1", wireType)
			}
			m.AttrSpec_1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AttrSpec_1 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrSpec_2", wireType)
			}
			m.AttrSpec_2 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AttrSpec_2 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SI_0", wireType)
			}
			m.SI_0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SI_0 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SI_1", wireType)
			}
			m.SI_1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SI_1 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SI_2", wireType)
			}
			m.SI_2 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SI_2 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachment = append(m.Attachment[:0], dAtA[iNdEx:postIndex]...)
			if m.Attachment == nil {
				m.Attachment = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			m.Metric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Metric |= Metric(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_0", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Size_0 = float64(math.Float64frombits(v))
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Size_1 = float64(math.Float64frombits(v))
		case 19:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_2", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Size_2 = float64(math.Float64frombits(v))
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAttrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubAttrs = append(m.SubAttrs, &TagAttr{})
			if err := m.SubAttrs[len(m.SubAttrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedAt", wireType)
			}
			m.ModifiedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifiedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Link == nil {
				m.Link = &TagAttr{}
			}
			if err := m.Link.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagFeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagFeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagFeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.App == nil {
				m.App = &TagAttr{}
			}
			if err := m.App.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeedSpec == nil {
				m.FeedSpec = &TagAttr{}
			}
			if err := m.FeedSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabUI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TabUI == nil {
				m.TabUI = &TagAttr{}
			}
			if err := m.TabUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SheetUI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SheetUI == nil {
				m.SheetUI = &TagAttr{}
			}
			if err := m.SheetUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrFeeds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttrFeeds = append(m.AttrFeeds, &TagAttr{})
			if err := m.AttrFeeds[len(m.AttrFeeds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubFeeds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubFeeds = append(m.SubFeeds, &TagFeed{})
			if err := m.SubFeeds[len(m.SubFeeds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagBallotBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagBallotBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagBallotBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagNotes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagNotes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagNotes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagSpreadsheet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagSpreadsheet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagSpreadsheet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagSurfaceGrid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagSurfaceGrid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagSurfaceGrid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagSurfaceGeo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagSurfaceGeo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagSurfaceGeo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagPlayableMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagPlayableMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagPlayableMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagPlaylist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagPlaylist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagPlaylist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionsOps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermissionsOps = append(m.PermissionsOps, &TagAttr{})
			if err := m.PermissionsOps[len(m.PermissionsOps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertFeeds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsertFeeds = append(m.InsertFeeds, &TagFeed{})
			if err := m.InsertFeeds[len(m.InsertFeeds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveFeeds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveFeeds = append(m.RemoveFeeds, &TagFeed{})
			if err := m.RemoveFeeds[len(m.RemoveFeeds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CryptoKitID", wireType)
			}
			m.CryptoKitID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CryptoKitID |= CryptoKitID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyBytes = append(m.KeyBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyBytes == nil {
				m.KeyBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TRS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TRS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TRS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 41:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.X1 = float64(math.Float64frombits(v))
		case 42:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X2", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.X2 = float64(math.Float64frombits(v))
		case 43:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X3", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.X3 = float64(math.Float64frombits(v))
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleMode", wireType)
			}
			m.ScaleMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleMode |= TRS_VisualScaleMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale1", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Scale1 = float32(math.Float32frombits(v))
		case 52:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale2", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Scale2 = float32(math.Float32frombits(v))
		case 53:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale3", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Scale3 = float32(math.Float32frombits(v))
		case 61:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotate1", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rotate1 = float32(math.Float32frombits(v))
		case 62:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotate2", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rotate2 = float32(math.Float32frombits(v))
		case 63:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotate3", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rotate3 = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteOfs", wireType)
			}
			m.ByteOfs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByteOfs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteSz", wireType)
			}
			m.ByteSz = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByteSz |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InlineData = append(m.InlineData[:0], dAtA[iNdEx:postIndex]...)
			if m.InlineData == nil {
				m.InlineData = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlobID", wireType)
			}
			m.BlobID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlobID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Err) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Err: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Err: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= LogLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApiAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApiAmp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApiAmp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiAmp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApiAmp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApiAmp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApiAmp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApiAmp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApiAmp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApiAmp = fmt.Errorf("proto: unexpected end of group")
)
